
EEE3096S_2022_Prac_3_ADCs_Interrupts_and_PWM_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800add8  0800add8  0001add8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b27c  0800b27c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b27c  0800b27c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b27c  0800b27c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b27c  0800b27c  0001b27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b280  0800b280  0001b280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200001dc  0800b460  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  0800b460  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a7f  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022db  00000000  00000000  00030c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00032f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00033f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ef1  00000000  00000000  00034e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011568  00000000  00000000  00048d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076223  00000000  00000000  0005a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d04e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d88  00000000  00000000  000d0534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800adc0 	.word	0x0800adc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800adc0 	.word	0x0800adc0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fadf 	bl	8001a00 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fa2f 	bl	80018b0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fad1 	bl	8001a00 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fac7 	bl	8001a00 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa57 	bl	8001934 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa4d 	bl	8001934 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_f2uiz>:
 80004a8:	219e      	movs	r1, #158	; 0x9e
 80004aa:	b510      	push	{r4, lr}
 80004ac:	05c9      	lsls	r1, r1, #23
 80004ae:	1c04      	adds	r4, r0, #0
 80004b0:	f002 fa2a 	bl	8002908 <__aeabi_fcmpge>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d103      	bne.n	80004c0 <__aeabi_f2uiz+0x18>
 80004b8:	1c20      	adds	r0, r4, #0
 80004ba:	f000 fb59 	bl	8000b70 <__aeabi_f2iz>
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	219e      	movs	r1, #158	; 0x9e
 80004c2:	1c20      	adds	r0, r4, #0
 80004c4:	05c9      	lsls	r1, r1, #23
 80004c6:	f000 f9a5 	bl	8000814 <__aeabi_fsub>
 80004ca:	f000 fb51 	bl	8000b70 <__aeabi_f2iz>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	061b      	lsls	r3, r3, #24
 80004d2:	469c      	mov	ip, r3
 80004d4:	4460      	add	r0, ip
 80004d6:	e7f2      	b.n	80004be <__aeabi_f2uiz+0x16>

080004d8 <__aeabi_fadd>:
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004da:	46c6      	mov	lr, r8
 80004dc:	0243      	lsls	r3, r0, #9
 80004de:	0a5b      	lsrs	r3, r3, #9
 80004e0:	024e      	lsls	r6, r1, #9
 80004e2:	0045      	lsls	r5, r0, #1
 80004e4:	004f      	lsls	r7, r1, #1
 80004e6:	00da      	lsls	r2, r3, #3
 80004e8:	0fc4      	lsrs	r4, r0, #31
 80004ea:	469c      	mov	ip, r3
 80004ec:	0a70      	lsrs	r0, r6, #9
 80004ee:	4690      	mov	r8, r2
 80004f0:	b500      	push	{lr}
 80004f2:	0e2d      	lsrs	r5, r5, #24
 80004f4:	0e3f      	lsrs	r7, r7, #24
 80004f6:	0fc9      	lsrs	r1, r1, #31
 80004f8:	09b6      	lsrs	r6, r6, #6
 80004fa:	428c      	cmp	r4, r1
 80004fc:	d04b      	beq.n	8000596 <__aeabi_fadd+0xbe>
 80004fe:	1bea      	subs	r2, r5, r7
 8000500:	2a00      	cmp	r2, #0
 8000502:	dd36      	ble.n	8000572 <__aeabi_fadd+0x9a>
 8000504:	2f00      	cmp	r7, #0
 8000506:	d061      	beq.n	80005cc <__aeabi_fadd+0xf4>
 8000508:	2dff      	cmp	r5, #255	; 0xff
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x36>
 800050c:	e0ad      	b.n	800066a <__aeabi_fadd+0x192>
 800050e:	2380      	movs	r3, #128	; 0x80
 8000510:	04db      	lsls	r3, r3, #19
 8000512:	431e      	orrs	r6, r3
 8000514:	2a1b      	cmp	r2, #27
 8000516:	dc00      	bgt.n	800051a <__aeabi_fadd+0x42>
 8000518:	e0d3      	b.n	80006c2 <__aeabi_fadd+0x1ea>
 800051a:	2001      	movs	r0, #1
 800051c:	4643      	mov	r3, r8
 800051e:	1a18      	subs	r0, r3, r0
 8000520:	0143      	lsls	r3, r0, #5
 8000522:	d400      	bmi.n	8000526 <__aeabi_fadd+0x4e>
 8000524:	e08c      	b.n	8000640 <__aeabi_fadd+0x168>
 8000526:	0180      	lsls	r0, r0, #6
 8000528:	0987      	lsrs	r7, r0, #6
 800052a:	0038      	movs	r0, r7
 800052c:	f002 f9f6 	bl	800291c <__clzsi2>
 8000530:	3805      	subs	r0, #5
 8000532:	4087      	lsls	r7, r0
 8000534:	4285      	cmp	r5, r0
 8000536:	dc00      	bgt.n	800053a <__aeabi_fadd+0x62>
 8000538:	e0b6      	b.n	80006a8 <__aeabi_fadd+0x1d0>
 800053a:	1a2d      	subs	r5, r5, r0
 800053c:	48b3      	ldr	r0, [pc, #716]	; (800080c <__aeabi_fadd+0x334>)
 800053e:	4038      	ands	r0, r7
 8000540:	0743      	lsls	r3, r0, #29
 8000542:	d004      	beq.n	800054e <__aeabi_fadd+0x76>
 8000544:	230f      	movs	r3, #15
 8000546:	4003      	ands	r3, r0
 8000548:	2b04      	cmp	r3, #4
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0x76>
 800054c:	3004      	adds	r0, #4
 800054e:	0143      	lsls	r3, r0, #5
 8000550:	d400      	bmi.n	8000554 <__aeabi_fadd+0x7c>
 8000552:	e078      	b.n	8000646 <__aeabi_fadd+0x16e>
 8000554:	1c6a      	adds	r2, r5, #1
 8000556:	2dfe      	cmp	r5, #254	; 0xfe
 8000558:	d065      	beq.n	8000626 <__aeabi_fadd+0x14e>
 800055a:	0180      	lsls	r0, r0, #6
 800055c:	0a43      	lsrs	r3, r0, #9
 800055e:	469c      	mov	ip, r3
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	4663      	mov	r3, ip
 8000564:	05d0      	lsls	r0, r2, #23
 8000566:	4318      	orrs	r0, r3
 8000568:	07e4      	lsls	r4, r4, #31
 800056a:	4320      	orrs	r0, r4
 800056c:	bc80      	pop	{r7}
 800056e:	46b8      	mov	r8, r7
 8000570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000572:	2a00      	cmp	r2, #0
 8000574:	d035      	beq.n	80005e2 <__aeabi_fadd+0x10a>
 8000576:	1b7a      	subs	r2, r7, r5
 8000578:	2d00      	cmp	r5, #0
 800057a:	d000      	beq.n	800057e <__aeabi_fadd+0xa6>
 800057c:	e0af      	b.n	80006de <__aeabi_fadd+0x206>
 800057e:	4643      	mov	r3, r8
 8000580:	2b00      	cmp	r3, #0
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0xae>
 8000584:	e0a7      	b.n	80006d6 <__aeabi_fadd+0x1fe>
 8000586:	1e53      	subs	r3, r2, #1
 8000588:	2a01      	cmp	r2, #1
 800058a:	d100      	bne.n	800058e <__aeabi_fadd+0xb6>
 800058c:	e12f      	b.n	80007ee <__aeabi_fadd+0x316>
 800058e:	2aff      	cmp	r2, #255	; 0xff
 8000590:	d069      	beq.n	8000666 <__aeabi_fadd+0x18e>
 8000592:	001a      	movs	r2, r3
 8000594:	e0aa      	b.n	80006ec <__aeabi_fadd+0x214>
 8000596:	1be9      	subs	r1, r5, r7
 8000598:	2900      	cmp	r1, #0
 800059a:	dd70      	ble.n	800067e <__aeabi_fadd+0x1a6>
 800059c:	2f00      	cmp	r7, #0
 800059e:	d037      	beq.n	8000610 <__aeabi_fadd+0x138>
 80005a0:	2dff      	cmp	r5, #255	; 0xff
 80005a2:	d062      	beq.n	800066a <__aeabi_fadd+0x192>
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	04db      	lsls	r3, r3, #19
 80005a8:	431e      	orrs	r6, r3
 80005aa:	291b      	cmp	r1, #27
 80005ac:	dc00      	bgt.n	80005b0 <__aeabi_fadd+0xd8>
 80005ae:	e0b0      	b.n	8000712 <__aeabi_fadd+0x23a>
 80005b0:	2001      	movs	r0, #1
 80005b2:	4440      	add	r0, r8
 80005b4:	0143      	lsls	r3, r0, #5
 80005b6:	d543      	bpl.n	8000640 <__aeabi_fadd+0x168>
 80005b8:	3501      	adds	r5, #1
 80005ba:	2dff      	cmp	r5, #255	; 0xff
 80005bc:	d033      	beq.n	8000626 <__aeabi_fadd+0x14e>
 80005be:	2301      	movs	r3, #1
 80005c0:	4a93      	ldr	r2, [pc, #588]	; (8000810 <__aeabi_fadd+0x338>)
 80005c2:	4003      	ands	r3, r0
 80005c4:	0840      	lsrs	r0, r0, #1
 80005c6:	4010      	ands	r0, r2
 80005c8:	4318      	orrs	r0, r3
 80005ca:	e7b9      	b.n	8000540 <__aeabi_fadd+0x68>
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0xfa>
 80005d0:	e083      	b.n	80006da <__aeabi_fadd+0x202>
 80005d2:	1e51      	subs	r1, r2, #1
 80005d4:	2a01      	cmp	r2, #1
 80005d6:	d100      	bne.n	80005da <__aeabi_fadd+0x102>
 80005d8:	e0d8      	b.n	800078c <__aeabi_fadd+0x2b4>
 80005da:	2aff      	cmp	r2, #255	; 0xff
 80005dc:	d045      	beq.n	800066a <__aeabi_fadd+0x192>
 80005de:	000a      	movs	r2, r1
 80005e0:	e798      	b.n	8000514 <__aeabi_fadd+0x3c>
 80005e2:	27fe      	movs	r7, #254	; 0xfe
 80005e4:	1c6a      	adds	r2, r5, #1
 80005e6:	4217      	tst	r7, r2
 80005e8:	d000      	beq.n	80005ec <__aeabi_fadd+0x114>
 80005ea:	e086      	b.n	80006fa <__aeabi_fadd+0x222>
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0x11a>
 80005f0:	e0b7      	b.n	8000762 <__aeabi_fadd+0x28a>
 80005f2:	4643      	mov	r3, r8
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0x122>
 80005f8:	e0f3      	b.n	80007e2 <__aeabi_fadd+0x30a>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d0b0      	beq.n	8000562 <__aeabi_fadd+0x8a>
 8000600:	1b98      	subs	r0, r3, r6
 8000602:	0143      	lsls	r3, r0, #5
 8000604:	d400      	bmi.n	8000608 <__aeabi_fadd+0x130>
 8000606:	e0fa      	b.n	80007fe <__aeabi_fadd+0x326>
 8000608:	4643      	mov	r3, r8
 800060a:	000c      	movs	r4, r1
 800060c:	1af0      	subs	r0, r6, r3
 800060e:	e797      	b.n	8000540 <__aeabi_fadd+0x68>
 8000610:	2e00      	cmp	r6, #0
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x13e>
 8000614:	e0c8      	b.n	80007a8 <__aeabi_fadd+0x2d0>
 8000616:	1e4a      	subs	r2, r1, #1
 8000618:	2901      	cmp	r1, #1
 800061a:	d100      	bne.n	800061e <__aeabi_fadd+0x146>
 800061c:	e0ae      	b.n	800077c <__aeabi_fadd+0x2a4>
 800061e:	29ff      	cmp	r1, #255	; 0xff
 8000620:	d023      	beq.n	800066a <__aeabi_fadd+0x192>
 8000622:	0011      	movs	r1, r2
 8000624:	e7c1      	b.n	80005aa <__aeabi_fadd+0xd2>
 8000626:	2300      	movs	r3, #0
 8000628:	22ff      	movs	r2, #255	; 0xff
 800062a:	469c      	mov	ip, r3
 800062c:	e799      	b.n	8000562 <__aeabi_fadd+0x8a>
 800062e:	21fe      	movs	r1, #254	; 0xfe
 8000630:	1c6a      	adds	r2, r5, #1
 8000632:	4211      	tst	r1, r2
 8000634:	d077      	beq.n	8000726 <__aeabi_fadd+0x24e>
 8000636:	2aff      	cmp	r2, #255	; 0xff
 8000638:	d0f5      	beq.n	8000626 <__aeabi_fadd+0x14e>
 800063a:	0015      	movs	r5, r2
 800063c:	4446      	add	r6, r8
 800063e:	0870      	lsrs	r0, r6, #1
 8000640:	0743      	lsls	r3, r0, #29
 8000642:	d000      	beq.n	8000646 <__aeabi_fadd+0x16e>
 8000644:	e77e      	b.n	8000544 <__aeabi_fadd+0x6c>
 8000646:	08c3      	lsrs	r3, r0, #3
 8000648:	2dff      	cmp	r5, #255	; 0xff
 800064a:	d00e      	beq.n	800066a <__aeabi_fadd+0x192>
 800064c:	025b      	lsls	r3, r3, #9
 800064e:	0a5b      	lsrs	r3, r3, #9
 8000650:	469c      	mov	ip, r3
 8000652:	b2ea      	uxtb	r2, r5
 8000654:	e785      	b.n	8000562 <__aeabi_fadd+0x8a>
 8000656:	2e00      	cmp	r6, #0
 8000658:	d007      	beq.n	800066a <__aeabi_fadd+0x192>
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	03d2      	lsls	r2, r2, #15
 800065e:	4213      	tst	r3, r2
 8000660:	d003      	beq.n	800066a <__aeabi_fadd+0x192>
 8000662:	4210      	tst	r0, r2
 8000664:	d101      	bne.n	800066a <__aeabi_fadd+0x192>
 8000666:	000c      	movs	r4, r1
 8000668:	0003      	movs	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0db      	beq.n	8000626 <__aeabi_fadd+0x14e>
 800066e:	2080      	movs	r0, #128	; 0x80
 8000670:	03c0      	lsls	r0, r0, #15
 8000672:	4318      	orrs	r0, r3
 8000674:	0240      	lsls	r0, r0, #9
 8000676:	0a43      	lsrs	r3, r0, #9
 8000678:	469c      	mov	ip, r3
 800067a:	22ff      	movs	r2, #255	; 0xff
 800067c:	e771      	b.n	8000562 <__aeabi_fadd+0x8a>
 800067e:	2900      	cmp	r1, #0
 8000680:	d0d5      	beq.n	800062e <__aeabi_fadd+0x156>
 8000682:	1b7a      	subs	r2, r7, r5
 8000684:	2d00      	cmp	r5, #0
 8000686:	d160      	bne.n	800074a <__aeabi_fadd+0x272>
 8000688:	4643      	mov	r3, r8
 800068a:	2b00      	cmp	r3, #0
 800068c:	d024      	beq.n	80006d8 <__aeabi_fadd+0x200>
 800068e:	1e53      	subs	r3, r2, #1
 8000690:	2a01      	cmp	r2, #1
 8000692:	d073      	beq.n	800077c <__aeabi_fadd+0x2a4>
 8000694:	2aff      	cmp	r2, #255	; 0xff
 8000696:	d0e7      	beq.n	8000668 <__aeabi_fadd+0x190>
 8000698:	001a      	movs	r2, r3
 800069a:	2a1b      	cmp	r2, #27
 800069c:	dc00      	bgt.n	80006a0 <__aeabi_fadd+0x1c8>
 800069e:	e085      	b.n	80007ac <__aeabi_fadd+0x2d4>
 80006a0:	2001      	movs	r0, #1
 80006a2:	003d      	movs	r5, r7
 80006a4:	1980      	adds	r0, r0, r6
 80006a6:	e785      	b.n	80005b4 <__aeabi_fadd+0xdc>
 80006a8:	2320      	movs	r3, #32
 80006aa:	003a      	movs	r2, r7
 80006ac:	1b45      	subs	r5, r0, r5
 80006ae:	0038      	movs	r0, r7
 80006b0:	3501      	adds	r5, #1
 80006b2:	40ea      	lsrs	r2, r5
 80006b4:	1b5d      	subs	r5, r3, r5
 80006b6:	40a8      	lsls	r0, r5
 80006b8:	1e43      	subs	r3, r0, #1
 80006ba:	4198      	sbcs	r0, r3
 80006bc:	2500      	movs	r5, #0
 80006be:	4310      	orrs	r0, r2
 80006c0:	e73e      	b.n	8000540 <__aeabi_fadd+0x68>
 80006c2:	2320      	movs	r3, #32
 80006c4:	0030      	movs	r0, r6
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	0031      	movs	r1, r6
 80006ca:	4098      	lsls	r0, r3
 80006cc:	40d1      	lsrs	r1, r2
 80006ce:	1e43      	subs	r3, r0, #1
 80006d0:	4198      	sbcs	r0, r3
 80006d2:	4308      	orrs	r0, r1
 80006d4:	e722      	b.n	800051c <__aeabi_fadd+0x44>
 80006d6:	000c      	movs	r4, r1
 80006d8:	0003      	movs	r3, r0
 80006da:	0015      	movs	r5, r2
 80006dc:	e7b4      	b.n	8000648 <__aeabi_fadd+0x170>
 80006de:	2fff      	cmp	r7, #255	; 0xff
 80006e0:	d0c1      	beq.n	8000666 <__aeabi_fadd+0x18e>
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	4640      	mov	r0, r8
 80006e6:	04db      	lsls	r3, r3, #19
 80006e8:	4318      	orrs	r0, r3
 80006ea:	4680      	mov	r8, r0
 80006ec:	2a1b      	cmp	r2, #27
 80006ee:	dd51      	ble.n	8000794 <__aeabi_fadd+0x2bc>
 80006f0:	2001      	movs	r0, #1
 80006f2:	000c      	movs	r4, r1
 80006f4:	003d      	movs	r5, r7
 80006f6:	1a30      	subs	r0, r6, r0
 80006f8:	e712      	b.n	8000520 <__aeabi_fadd+0x48>
 80006fa:	4643      	mov	r3, r8
 80006fc:	1b9f      	subs	r7, r3, r6
 80006fe:	017b      	lsls	r3, r7, #5
 8000700:	d42b      	bmi.n	800075a <__aeabi_fadd+0x282>
 8000702:	2f00      	cmp	r7, #0
 8000704:	d000      	beq.n	8000708 <__aeabi_fadd+0x230>
 8000706:	e710      	b.n	800052a <__aeabi_fadd+0x52>
 8000708:	2300      	movs	r3, #0
 800070a:	2400      	movs	r4, #0
 800070c:	2200      	movs	r2, #0
 800070e:	469c      	mov	ip, r3
 8000710:	e727      	b.n	8000562 <__aeabi_fadd+0x8a>
 8000712:	2320      	movs	r3, #32
 8000714:	0032      	movs	r2, r6
 8000716:	0030      	movs	r0, r6
 8000718:	40ca      	lsrs	r2, r1
 800071a:	1a59      	subs	r1, r3, r1
 800071c:	4088      	lsls	r0, r1
 800071e:	1e43      	subs	r3, r0, #1
 8000720:	4198      	sbcs	r0, r3
 8000722:	4310      	orrs	r0, r2
 8000724:	e745      	b.n	80005b2 <__aeabi_fadd+0xda>
 8000726:	2d00      	cmp	r5, #0
 8000728:	d14a      	bne.n	80007c0 <__aeabi_fadd+0x2e8>
 800072a:	4643      	mov	r3, r8
 800072c:	2b00      	cmp	r3, #0
 800072e:	d063      	beq.n	80007f8 <__aeabi_fadd+0x320>
 8000730:	2200      	movs	r2, #0
 8000732:	2e00      	cmp	r6, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x260>
 8000736:	e714      	b.n	8000562 <__aeabi_fadd+0x8a>
 8000738:	0030      	movs	r0, r6
 800073a:	4440      	add	r0, r8
 800073c:	0143      	lsls	r3, r0, #5
 800073e:	d400      	bmi.n	8000742 <__aeabi_fadd+0x26a>
 8000740:	e77e      	b.n	8000640 <__aeabi_fadd+0x168>
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <__aeabi_fadd+0x334>)
 8000744:	3501      	adds	r5, #1
 8000746:	4018      	ands	r0, r3
 8000748:	e77a      	b.n	8000640 <__aeabi_fadd+0x168>
 800074a:	2fff      	cmp	r7, #255	; 0xff
 800074c:	d08c      	beq.n	8000668 <__aeabi_fadd+0x190>
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	4641      	mov	r1, r8
 8000752:	04db      	lsls	r3, r3, #19
 8000754:	4319      	orrs	r1, r3
 8000756:	4688      	mov	r8, r1
 8000758:	e79f      	b.n	800069a <__aeabi_fadd+0x1c2>
 800075a:	4643      	mov	r3, r8
 800075c:	000c      	movs	r4, r1
 800075e:	1af7      	subs	r7, r6, r3
 8000760:	e6e3      	b.n	800052a <__aeabi_fadd+0x52>
 8000762:	4642      	mov	r2, r8
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_fadd+0x292>
 8000768:	e775      	b.n	8000656 <__aeabi_fadd+0x17e>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d000      	beq.n	8000770 <__aeabi_fadd+0x298>
 800076e:	e77a      	b.n	8000666 <__aeabi_fadd+0x18e>
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	03db      	lsls	r3, r3, #15
 8000774:	2400      	movs	r4, #0
 8000776:	469c      	mov	ip, r3
 8000778:	22ff      	movs	r2, #255	; 0xff
 800077a:	e6f2      	b.n	8000562 <__aeabi_fadd+0x8a>
 800077c:	0030      	movs	r0, r6
 800077e:	4440      	add	r0, r8
 8000780:	2501      	movs	r5, #1
 8000782:	0143      	lsls	r3, r0, #5
 8000784:	d400      	bmi.n	8000788 <__aeabi_fadd+0x2b0>
 8000786:	e75b      	b.n	8000640 <__aeabi_fadd+0x168>
 8000788:	2502      	movs	r5, #2
 800078a:	e718      	b.n	80005be <__aeabi_fadd+0xe6>
 800078c:	4643      	mov	r3, r8
 800078e:	2501      	movs	r5, #1
 8000790:	1b98      	subs	r0, r3, r6
 8000792:	e6c5      	b.n	8000520 <__aeabi_fadd+0x48>
 8000794:	2320      	movs	r3, #32
 8000796:	4644      	mov	r4, r8
 8000798:	4640      	mov	r0, r8
 800079a:	40d4      	lsrs	r4, r2
 800079c:	1a9a      	subs	r2, r3, r2
 800079e:	4090      	lsls	r0, r2
 80007a0:	1e43      	subs	r3, r0, #1
 80007a2:	4198      	sbcs	r0, r3
 80007a4:	4320      	orrs	r0, r4
 80007a6:	e7a4      	b.n	80006f2 <__aeabi_fadd+0x21a>
 80007a8:	000d      	movs	r5, r1
 80007aa:	e74d      	b.n	8000648 <__aeabi_fadd+0x170>
 80007ac:	2320      	movs	r3, #32
 80007ae:	4641      	mov	r1, r8
 80007b0:	4640      	mov	r0, r8
 80007b2:	40d1      	lsrs	r1, r2
 80007b4:	1a9a      	subs	r2, r3, r2
 80007b6:	4090      	lsls	r0, r2
 80007b8:	1e43      	subs	r3, r0, #1
 80007ba:	4198      	sbcs	r0, r3
 80007bc:	4308      	orrs	r0, r1
 80007be:	e770      	b.n	80006a2 <__aeabi_fadd+0x1ca>
 80007c0:	4642      	mov	r2, r8
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x2f0>
 80007c6:	e74f      	b.n	8000668 <__aeabi_fadd+0x190>
 80007c8:	2e00      	cmp	r6, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x2f6>
 80007cc:	e74d      	b.n	800066a <__aeabi_fadd+0x192>
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	03d2      	lsls	r2, r2, #15
 80007d2:	4213      	tst	r3, r2
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fadd+0x300>
 80007d6:	e748      	b.n	800066a <__aeabi_fadd+0x192>
 80007d8:	4210      	tst	r0, r2
 80007da:	d000      	beq.n	80007de <__aeabi_fadd+0x306>
 80007dc:	e745      	b.n	800066a <__aeabi_fadd+0x192>
 80007de:	0003      	movs	r3, r0
 80007e0:	e743      	b.n	800066a <__aeabi_fadd+0x192>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d090      	beq.n	8000708 <__aeabi_fadd+0x230>
 80007e6:	000c      	movs	r4, r1
 80007e8:	4684      	mov	ip, r0
 80007ea:	2200      	movs	r2, #0
 80007ec:	e6b9      	b.n	8000562 <__aeabi_fadd+0x8a>
 80007ee:	4643      	mov	r3, r8
 80007f0:	000c      	movs	r4, r1
 80007f2:	1af0      	subs	r0, r6, r3
 80007f4:	3501      	adds	r5, #1
 80007f6:	e693      	b.n	8000520 <__aeabi_fadd+0x48>
 80007f8:	4684      	mov	ip, r0
 80007fa:	2200      	movs	r2, #0
 80007fc:	e6b1      	b.n	8000562 <__aeabi_fadd+0x8a>
 80007fe:	2800      	cmp	r0, #0
 8000800:	d000      	beq.n	8000804 <__aeabi_fadd+0x32c>
 8000802:	e71d      	b.n	8000640 <__aeabi_fadd+0x168>
 8000804:	2300      	movs	r3, #0
 8000806:	2400      	movs	r4, #0
 8000808:	469c      	mov	ip, r3
 800080a:	e6aa      	b.n	8000562 <__aeabi_fadd+0x8a>
 800080c:	fbffffff 	.word	0xfbffffff
 8000810:	7dffffff 	.word	0x7dffffff

08000814 <__aeabi_fsub>:
 8000814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000816:	46ce      	mov	lr, r9
 8000818:	4647      	mov	r7, r8
 800081a:	0243      	lsls	r3, r0, #9
 800081c:	0a5b      	lsrs	r3, r3, #9
 800081e:	024e      	lsls	r6, r1, #9
 8000820:	00da      	lsls	r2, r3, #3
 8000822:	4694      	mov	ip, r2
 8000824:	0a72      	lsrs	r2, r6, #9
 8000826:	4691      	mov	r9, r2
 8000828:	0045      	lsls	r5, r0, #1
 800082a:	004a      	lsls	r2, r1, #1
 800082c:	b580      	push	{r7, lr}
 800082e:	0e2d      	lsrs	r5, r5, #24
 8000830:	001f      	movs	r7, r3
 8000832:	0fc4      	lsrs	r4, r0, #31
 8000834:	0e12      	lsrs	r2, r2, #24
 8000836:	0fc9      	lsrs	r1, r1, #31
 8000838:	09b6      	lsrs	r6, r6, #6
 800083a:	2aff      	cmp	r2, #255	; 0xff
 800083c:	d05b      	beq.n	80008f6 <__aeabi_fsub+0xe2>
 800083e:	2001      	movs	r0, #1
 8000840:	4041      	eors	r1, r0
 8000842:	428c      	cmp	r4, r1
 8000844:	d039      	beq.n	80008ba <__aeabi_fsub+0xa6>
 8000846:	1aa8      	subs	r0, r5, r2
 8000848:	2800      	cmp	r0, #0
 800084a:	dd5a      	ble.n	8000902 <__aeabi_fsub+0xee>
 800084c:	2a00      	cmp	r2, #0
 800084e:	d06a      	beq.n	8000926 <__aeabi_fsub+0x112>
 8000850:	2dff      	cmp	r5, #255	; 0xff
 8000852:	d100      	bne.n	8000856 <__aeabi_fsub+0x42>
 8000854:	e0d9      	b.n	8000a0a <__aeabi_fsub+0x1f6>
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	04d2      	lsls	r2, r2, #19
 800085a:	4316      	orrs	r6, r2
 800085c:	281b      	cmp	r0, #27
 800085e:	dc00      	bgt.n	8000862 <__aeabi_fsub+0x4e>
 8000860:	e0e9      	b.n	8000a36 <__aeabi_fsub+0x222>
 8000862:	2001      	movs	r0, #1
 8000864:	4663      	mov	r3, ip
 8000866:	1a18      	subs	r0, r3, r0
 8000868:	0143      	lsls	r3, r0, #5
 800086a:	d400      	bmi.n	800086e <__aeabi_fsub+0x5a>
 800086c:	e0b4      	b.n	80009d8 <__aeabi_fsub+0x1c4>
 800086e:	0180      	lsls	r0, r0, #6
 8000870:	0987      	lsrs	r7, r0, #6
 8000872:	0038      	movs	r0, r7
 8000874:	f002 f852 	bl	800291c <__clzsi2>
 8000878:	3805      	subs	r0, #5
 800087a:	4087      	lsls	r7, r0
 800087c:	4285      	cmp	r5, r0
 800087e:	dc00      	bgt.n	8000882 <__aeabi_fsub+0x6e>
 8000880:	e0cc      	b.n	8000a1c <__aeabi_fsub+0x208>
 8000882:	1a2d      	subs	r5, r5, r0
 8000884:	48b5      	ldr	r0, [pc, #724]	; (8000b5c <__aeabi_fsub+0x348>)
 8000886:	4038      	ands	r0, r7
 8000888:	0743      	lsls	r3, r0, #29
 800088a:	d004      	beq.n	8000896 <__aeabi_fsub+0x82>
 800088c:	230f      	movs	r3, #15
 800088e:	4003      	ands	r3, r0
 8000890:	2b04      	cmp	r3, #4
 8000892:	d000      	beq.n	8000896 <__aeabi_fsub+0x82>
 8000894:	3004      	adds	r0, #4
 8000896:	0143      	lsls	r3, r0, #5
 8000898:	d400      	bmi.n	800089c <__aeabi_fsub+0x88>
 800089a:	e0a0      	b.n	80009de <__aeabi_fsub+0x1ca>
 800089c:	1c6a      	adds	r2, r5, #1
 800089e:	2dfe      	cmp	r5, #254	; 0xfe
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fsub+0x90>
 80008a2:	e08d      	b.n	80009c0 <__aeabi_fsub+0x1ac>
 80008a4:	0180      	lsls	r0, r0, #6
 80008a6:	0a47      	lsrs	r7, r0, #9
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	05d0      	lsls	r0, r2, #23
 80008ac:	4338      	orrs	r0, r7
 80008ae:	07e4      	lsls	r4, r4, #31
 80008b0:	4320      	orrs	r0, r4
 80008b2:	bcc0      	pop	{r6, r7}
 80008b4:	46b9      	mov	r9, r7
 80008b6:	46b0      	mov	r8, r6
 80008b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ba:	1aa8      	subs	r0, r5, r2
 80008bc:	4680      	mov	r8, r0
 80008be:	2800      	cmp	r0, #0
 80008c0:	dd45      	ble.n	800094e <__aeabi_fsub+0x13a>
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d070      	beq.n	80009a8 <__aeabi_fsub+0x194>
 80008c6:	2dff      	cmp	r5, #255	; 0xff
 80008c8:	d100      	bne.n	80008cc <__aeabi_fsub+0xb8>
 80008ca:	e09e      	b.n	8000a0a <__aeabi_fsub+0x1f6>
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	04db      	lsls	r3, r3, #19
 80008d0:	431e      	orrs	r6, r3
 80008d2:	4643      	mov	r3, r8
 80008d4:	2b1b      	cmp	r3, #27
 80008d6:	dc00      	bgt.n	80008da <__aeabi_fsub+0xc6>
 80008d8:	e0d2      	b.n	8000a80 <__aeabi_fsub+0x26c>
 80008da:	2001      	movs	r0, #1
 80008dc:	4460      	add	r0, ip
 80008de:	0143      	lsls	r3, r0, #5
 80008e0:	d57a      	bpl.n	80009d8 <__aeabi_fsub+0x1c4>
 80008e2:	3501      	adds	r5, #1
 80008e4:	2dff      	cmp	r5, #255	; 0xff
 80008e6:	d06b      	beq.n	80009c0 <__aeabi_fsub+0x1ac>
 80008e8:	2301      	movs	r3, #1
 80008ea:	4a9d      	ldr	r2, [pc, #628]	; (8000b60 <__aeabi_fsub+0x34c>)
 80008ec:	4003      	ands	r3, r0
 80008ee:	0840      	lsrs	r0, r0, #1
 80008f0:	4010      	ands	r0, r2
 80008f2:	4318      	orrs	r0, r3
 80008f4:	e7c8      	b.n	8000888 <__aeabi_fsub+0x74>
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d020      	beq.n	800093c <__aeabi_fsub+0x128>
 80008fa:	428c      	cmp	r4, r1
 80008fc:	d023      	beq.n	8000946 <__aeabi_fsub+0x132>
 80008fe:	0028      	movs	r0, r5
 8000900:	38ff      	subs	r0, #255	; 0xff
 8000902:	2800      	cmp	r0, #0
 8000904:	d039      	beq.n	800097a <__aeabi_fsub+0x166>
 8000906:	1b57      	subs	r7, r2, r5
 8000908:	2d00      	cmp	r5, #0
 800090a:	d000      	beq.n	800090e <__aeabi_fsub+0xfa>
 800090c:	e09d      	b.n	8000a4a <__aeabi_fsub+0x236>
 800090e:	4663      	mov	r3, ip
 8000910:	2b00      	cmp	r3, #0
 8000912:	d100      	bne.n	8000916 <__aeabi_fsub+0x102>
 8000914:	e0db      	b.n	8000ace <__aeabi_fsub+0x2ba>
 8000916:	1e7b      	subs	r3, r7, #1
 8000918:	2f01      	cmp	r7, #1
 800091a:	d100      	bne.n	800091e <__aeabi_fsub+0x10a>
 800091c:	e10d      	b.n	8000b3a <__aeabi_fsub+0x326>
 800091e:	2fff      	cmp	r7, #255	; 0xff
 8000920:	d071      	beq.n	8000a06 <__aeabi_fsub+0x1f2>
 8000922:	001f      	movs	r7, r3
 8000924:	e098      	b.n	8000a58 <__aeabi_fsub+0x244>
 8000926:	2e00      	cmp	r6, #0
 8000928:	d100      	bne.n	800092c <__aeabi_fsub+0x118>
 800092a:	e0a7      	b.n	8000a7c <__aeabi_fsub+0x268>
 800092c:	1e42      	subs	r2, r0, #1
 800092e:	2801      	cmp	r0, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_fsub+0x120>
 8000932:	e0e6      	b.n	8000b02 <__aeabi_fsub+0x2ee>
 8000934:	28ff      	cmp	r0, #255	; 0xff
 8000936:	d068      	beq.n	8000a0a <__aeabi_fsub+0x1f6>
 8000938:	0010      	movs	r0, r2
 800093a:	e78f      	b.n	800085c <__aeabi_fsub+0x48>
 800093c:	2001      	movs	r0, #1
 800093e:	4041      	eors	r1, r0
 8000940:	42a1      	cmp	r1, r4
 8000942:	d000      	beq.n	8000946 <__aeabi_fsub+0x132>
 8000944:	e77f      	b.n	8000846 <__aeabi_fsub+0x32>
 8000946:	20ff      	movs	r0, #255	; 0xff
 8000948:	4240      	negs	r0, r0
 800094a:	4680      	mov	r8, r0
 800094c:	44a8      	add	r8, r5
 800094e:	4640      	mov	r0, r8
 8000950:	2800      	cmp	r0, #0
 8000952:	d038      	beq.n	80009c6 <__aeabi_fsub+0x1b2>
 8000954:	1b51      	subs	r1, r2, r5
 8000956:	2d00      	cmp	r5, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fsub+0x148>
 800095a:	e0ae      	b.n	8000aba <__aeabi_fsub+0x2a6>
 800095c:	2aff      	cmp	r2, #255	; 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x14e>
 8000960:	e0df      	b.n	8000b22 <__aeabi_fsub+0x30e>
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	4660      	mov	r0, ip
 8000966:	04db      	lsls	r3, r3, #19
 8000968:	4318      	orrs	r0, r3
 800096a:	4684      	mov	ip, r0
 800096c:	291b      	cmp	r1, #27
 800096e:	dc00      	bgt.n	8000972 <__aeabi_fsub+0x15e>
 8000970:	e0d9      	b.n	8000b26 <__aeabi_fsub+0x312>
 8000972:	2001      	movs	r0, #1
 8000974:	0015      	movs	r5, r2
 8000976:	1980      	adds	r0, r0, r6
 8000978:	e7b1      	b.n	80008de <__aeabi_fsub+0xca>
 800097a:	20fe      	movs	r0, #254	; 0xfe
 800097c:	1c6a      	adds	r2, r5, #1
 800097e:	4210      	tst	r0, r2
 8000980:	d171      	bne.n	8000a66 <__aeabi_fsub+0x252>
 8000982:	2d00      	cmp	r5, #0
 8000984:	d000      	beq.n	8000988 <__aeabi_fsub+0x174>
 8000986:	e0a6      	b.n	8000ad6 <__aeabi_fsub+0x2c2>
 8000988:	4663      	mov	r3, ip
 800098a:	2b00      	cmp	r3, #0
 800098c:	d100      	bne.n	8000990 <__aeabi_fsub+0x17c>
 800098e:	e0d9      	b.n	8000b44 <__aeabi_fsub+0x330>
 8000990:	2200      	movs	r2, #0
 8000992:	2e00      	cmp	r6, #0
 8000994:	d100      	bne.n	8000998 <__aeabi_fsub+0x184>
 8000996:	e788      	b.n	80008aa <__aeabi_fsub+0x96>
 8000998:	1b98      	subs	r0, r3, r6
 800099a:	0143      	lsls	r3, r0, #5
 800099c:	d400      	bmi.n	80009a0 <__aeabi_fsub+0x18c>
 800099e:	e0e1      	b.n	8000b64 <__aeabi_fsub+0x350>
 80009a0:	4663      	mov	r3, ip
 80009a2:	000c      	movs	r4, r1
 80009a4:	1af0      	subs	r0, r6, r3
 80009a6:	e76f      	b.n	8000888 <__aeabi_fsub+0x74>
 80009a8:	2e00      	cmp	r6, #0
 80009aa:	d100      	bne.n	80009ae <__aeabi_fsub+0x19a>
 80009ac:	e0b7      	b.n	8000b1e <__aeabi_fsub+0x30a>
 80009ae:	0002      	movs	r2, r0
 80009b0:	3a01      	subs	r2, #1
 80009b2:	2801      	cmp	r0, #1
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fsub+0x1a4>
 80009b6:	e09c      	b.n	8000af2 <__aeabi_fsub+0x2de>
 80009b8:	28ff      	cmp	r0, #255	; 0xff
 80009ba:	d026      	beq.n	8000a0a <__aeabi_fsub+0x1f6>
 80009bc:	4690      	mov	r8, r2
 80009be:	e788      	b.n	80008d2 <__aeabi_fsub+0xbe>
 80009c0:	22ff      	movs	r2, #255	; 0xff
 80009c2:	2700      	movs	r7, #0
 80009c4:	e771      	b.n	80008aa <__aeabi_fsub+0x96>
 80009c6:	20fe      	movs	r0, #254	; 0xfe
 80009c8:	1c6a      	adds	r2, r5, #1
 80009ca:	4210      	tst	r0, r2
 80009cc:	d064      	beq.n	8000a98 <__aeabi_fsub+0x284>
 80009ce:	2aff      	cmp	r2, #255	; 0xff
 80009d0:	d0f6      	beq.n	80009c0 <__aeabi_fsub+0x1ac>
 80009d2:	0015      	movs	r5, r2
 80009d4:	4466      	add	r6, ip
 80009d6:	0870      	lsrs	r0, r6, #1
 80009d8:	0743      	lsls	r3, r0, #29
 80009da:	d000      	beq.n	80009de <__aeabi_fsub+0x1ca>
 80009dc:	e756      	b.n	800088c <__aeabi_fsub+0x78>
 80009de:	08c3      	lsrs	r3, r0, #3
 80009e0:	2dff      	cmp	r5, #255	; 0xff
 80009e2:	d012      	beq.n	8000a0a <__aeabi_fsub+0x1f6>
 80009e4:	025b      	lsls	r3, r3, #9
 80009e6:	0a5f      	lsrs	r7, r3, #9
 80009e8:	b2ea      	uxtb	r2, r5
 80009ea:	e75e      	b.n	80008aa <__aeabi_fsub+0x96>
 80009ec:	4662      	mov	r2, ip
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fsub+0x1e0>
 80009f2:	e096      	b.n	8000b22 <__aeabi_fsub+0x30e>
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d008      	beq.n	8000a0a <__aeabi_fsub+0x1f6>
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	03d2      	lsls	r2, r2, #15
 80009fc:	4213      	tst	r3, r2
 80009fe:	d004      	beq.n	8000a0a <__aeabi_fsub+0x1f6>
 8000a00:	4648      	mov	r0, r9
 8000a02:	4210      	tst	r0, r2
 8000a04:	d101      	bne.n	8000a0a <__aeabi_fsub+0x1f6>
 8000a06:	000c      	movs	r4, r1
 8000a08:	464b      	mov	r3, r9
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0d8      	beq.n	80009c0 <__aeabi_fsub+0x1ac>
 8000a0e:	2780      	movs	r7, #128	; 0x80
 8000a10:	03ff      	lsls	r7, r7, #15
 8000a12:	431f      	orrs	r7, r3
 8000a14:	027f      	lsls	r7, r7, #9
 8000a16:	22ff      	movs	r2, #255	; 0xff
 8000a18:	0a7f      	lsrs	r7, r7, #9
 8000a1a:	e746      	b.n	80008aa <__aeabi_fsub+0x96>
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	003a      	movs	r2, r7
 8000a20:	1b45      	subs	r5, r0, r5
 8000a22:	0038      	movs	r0, r7
 8000a24:	3501      	adds	r5, #1
 8000a26:	40ea      	lsrs	r2, r5
 8000a28:	1b5d      	subs	r5, r3, r5
 8000a2a:	40a8      	lsls	r0, r5
 8000a2c:	1e43      	subs	r3, r0, #1
 8000a2e:	4198      	sbcs	r0, r3
 8000a30:	2500      	movs	r5, #0
 8000a32:	4310      	orrs	r0, r2
 8000a34:	e728      	b.n	8000888 <__aeabi_fsub+0x74>
 8000a36:	2320      	movs	r3, #32
 8000a38:	1a1b      	subs	r3, r3, r0
 8000a3a:	0032      	movs	r2, r6
 8000a3c:	409e      	lsls	r6, r3
 8000a3e:	40c2      	lsrs	r2, r0
 8000a40:	0030      	movs	r0, r6
 8000a42:	1e43      	subs	r3, r0, #1
 8000a44:	4198      	sbcs	r0, r3
 8000a46:	4310      	orrs	r0, r2
 8000a48:	e70c      	b.n	8000864 <__aeabi_fsub+0x50>
 8000a4a:	2aff      	cmp	r2, #255	; 0xff
 8000a4c:	d0db      	beq.n	8000a06 <__aeabi_fsub+0x1f2>
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	4660      	mov	r0, ip
 8000a52:	04db      	lsls	r3, r3, #19
 8000a54:	4318      	orrs	r0, r3
 8000a56:	4684      	mov	ip, r0
 8000a58:	2f1b      	cmp	r7, #27
 8000a5a:	dd56      	ble.n	8000b0a <__aeabi_fsub+0x2f6>
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	000c      	movs	r4, r1
 8000a60:	0015      	movs	r5, r2
 8000a62:	1a30      	subs	r0, r6, r0
 8000a64:	e700      	b.n	8000868 <__aeabi_fsub+0x54>
 8000a66:	4663      	mov	r3, ip
 8000a68:	1b9f      	subs	r7, r3, r6
 8000a6a:	017b      	lsls	r3, r7, #5
 8000a6c:	d43d      	bmi.n	8000aea <__aeabi_fsub+0x2d6>
 8000a6e:	2f00      	cmp	r7, #0
 8000a70:	d000      	beq.n	8000a74 <__aeabi_fsub+0x260>
 8000a72:	e6fe      	b.n	8000872 <__aeabi_fsub+0x5e>
 8000a74:	2400      	movs	r4, #0
 8000a76:	2200      	movs	r2, #0
 8000a78:	2700      	movs	r7, #0
 8000a7a:	e716      	b.n	80008aa <__aeabi_fsub+0x96>
 8000a7c:	0005      	movs	r5, r0
 8000a7e:	e7af      	b.n	80009e0 <__aeabi_fsub+0x1cc>
 8000a80:	0032      	movs	r2, r6
 8000a82:	4643      	mov	r3, r8
 8000a84:	4641      	mov	r1, r8
 8000a86:	40da      	lsrs	r2, r3
 8000a88:	2320      	movs	r3, #32
 8000a8a:	1a5b      	subs	r3, r3, r1
 8000a8c:	409e      	lsls	r6, r3
 8000a8e:	0030      	movs	r0, r6
 8000a90:	1e43      	subs	r3, r0, #1
 8000a92:	4198      	sbcs	r0, r3
 8000a94:	4310      	orrs	r0, r2
 8000a96:	e721      	b.n	80008dc <__aeabi_fsub+0xc8>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d1a7      	bne.n	80009ec <__aeabi_fsub+0x1d8>
 8000a9c:	4663      	mov	r3, ip
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d059      	beq.n	8000b56 <__aeabi_fsub+0x342>
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x296>
 8000aa8:	e6ff      	b.n	80008aa <__aeabi_fsub+0x96>
 8000aaa:	0030      	movs	r0, r6
 8000aac:	4460      	add	r0, ip
 8000aae:	0143      	lsls	r3, r0, #5
 8000ab0:	d592      	bpl.n	80009d8 <__aeabi_fsub+0x1c4>
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <__aeabi_fsub+0x348>)
 8000ab4:	3501      	adds	r5, #1
 8000ab6:	4018      	ands	r0, r3
 8000ab8:	e78e      	b.n	80009d8 <__aeabi_fsub+0x1c4>
 8000aba:	4663      	mov	r3, ip
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d047      	beq.n	8000b50 <__aeabi_fsub+0x33c>
 8000ac0:	1e4b      	subs	r3, r1, #1
 8000ac2:	2901      	cmp	r1, #1
 8000ac4:	d015      	beq.n	8000af2 <__aeabi_fsub+0x2de>
 8000ac6:	29ff      	cmp	r1, #255	; 0xff
 8000ac8:	d02b      	beq.n	8000b22 <__aeabi_fsub+0x30e>
 8000aca:	0019      	movs	r1, r3
 8000acc:	e74e      	b.n	800096c <__aeabi_fsub+0x158>
 8000ace:	000c      	movs	r4, r1
 8000ad0:	464b      	mov	r3, r9
 8000ad2:	003d      	movs	r5, r7
 8000ad4:	e784      	b.n	80009e0 <__aeabi_fsub+0x1cc>
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	d18b      	bne.n	80009f4 <__aeabi_fsub+0x1e0>
 8000adc:	2e00      	cmp	r6, #0
 8000ade:	d192      	bne.n	8000a06 <__aeabi_fsub+0x1f2>
 8000ae0:	2780      	movs	r7, #128	; 0x80
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	22ff      	movs	r2, #255	; 0xff
 8000ae6:	03ff      	lsls	r7, r7, #15
 8000ae8:	e6df      	b.n	80008aa <__aeabi_fsub+0x96>
 8000aea:	4663      	mov	r3, ip
 8000aec:	000c      	movs	r4, r1
 8000aee:	1af7      	subs	r7, r6, r3
 8000af0:	e6bf      	b.n	8000872 <__aeabi_fsub+0x5e>
 8000af2:	0030      	movs	r0, r6
 8000af4:	4460      	add	r0, ip
 8000af6:	2501      	movs	r5, #1
 8000af8:	0143      	lsls	r3, r0, #5
 8000afa:	d400      	bmi.n	8000afe <__aeabi_fsub+0x2ea>
 8000afc:	e76c      	b.n	80009d8 <__aeabi_fsub+0x1c4>
 8000afe:	2502      	movs	r5, #2
 8000b00:	e6f2      	b.n	80008e8 <__aeabi_fsub+0xd4>
 8000b02:	4663      	mov	r3, ip
 8000b04:	2501      	movs	r5, #1
 8000b06:	1b98      	subs	r0, r3, r6
 8000b08:	e6ae      	b.n	8000868 <__aeabi_fsub+0x54>
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	4664      	mov	r4, ip
 8000b0e:	4660      	mov	r0, ip
 8000b10:	40fc      	lsrs	r4, r7
 8000b12:	1bdf      	subs	r7, r3, r7
 8000b14:	40b8      	lsls	r0, r7
 8000b16:	1e43      	subs	r3, r0, #1
 8000b18:	4198      	sbcs	r0, r3
 8000b1a:	4320      	orrs	r0, r4
 8000b1c:	e79f      	b.n	8000a5e <__aeabi_fsub+0x24a>
 8000b1e:	0005      	movs	r5, r0
 8000b20:	e75e      	b.n	80009e0 <__aeabi_fsub+0x1cc>
 8000b22:	464b      	mov	r3, r9
 8000b24:	e771      	b.n	8000a0a <__aeabi_fsub+0x1f6>
 8000b26:	2320      	movs	r3, #32
 8000b28:	4665      	mov	r5, ip
 8000b2a:	4660      	mov	r0, ip
 8000b2c:	40cd      	lsrs	r5, r1
 8000b2e:	1a59      	subs	r1, r3, r1
 8000b30:	4088      	lsls	r0, r1
 8000b32:	1e43      	subs	r3, r0, #1
 8000b34:	4198      	sbcs	r0, r3
 8000b36:	4328      	orrs	r0, r5
 8000b38:	e71c      	b.n	8000974 <__aeabi_fsub+0x160>
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	2501      	movs	r5, #1
 8000b40:	1af0      	subs	r0, r6, r3
 8000b42:	e691      	b.n	8000868 <__aeabi_fsub+0x54>
 8000b44:	2e00      	cmp	r6, #0
 8000b46:	d095      	beq.n	8000a74 <__aeabi_fsub+0x260>
 8000b48:	000c      	movs	r4, r1
 8000b4a:	464f      	mov	r7, r9
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e6ac      	b.n	80008aa <__aeabi_fsub+0x96>
 8000b50:	464b      	mov	r3, r9
 8000b52:	000d      	movs	r5, r1
 8000b54:	e744      	b.n	80009e0 <__aeabi_fsub+0x1cc>
 8000b56:	464f      	mov	r7, r9
 8000b58:	2200      	movs	r2, #0
 8000b5a:	e6a6      	b.n	80008aa <__aeabi_fsub+0x96>
 8000b5c:	fbffffff 	.word	0xfbffffff
 8000b60:	7dffffff 	.word	0x7dffffff
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fsub+0x356>
 8000b68:	e736      	b.n	80009d8 <__aeabi_fsub+0x1c4>
 8000b6a:	2400      	movs	r4, #0
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e69c      	b.n	80008aa <__aeabi_fsub+0x96>

08000b70 <__aeabi_f2iz>:
 8000b70:	0241      	lsls	r1, r0, #9
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0fc3      	lsrs	r3, r0, #31
 8000b76:	0a49      	lsrs	r1, r1, #9
 8000b78:	2000      	movs	r0, #0
 8000b7a:	0e12      	lsrs	r2, r2, #24
 8000b7c:	2a7e      	cmp	r2, #126	; 0x7e
 8000b7e:	dd03      	ble.n	8000b88 <__aeabi_f2iz+0x18>
 8000b80:	2a9d      	cmp	r2, #157	; 0x9d
 8000b82:	dd02      	ble.n	8000b8a <__aeabi_f2iz+0x1a>
 8000b84:	4a09      	ldr	r2, [pc, #36]	; (8000bac <__aeabi_f2iz+0x3c>)
 8000b86:	1898      	adds	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	2080      	movs	r0, #128	; 0x80
 8000b8c:	0400      	lsls	r0, r0, #16
 8000b8e:	4301      	orrs	r1, r0
 8000b90:	2a95      	cmp	r2, #149	; 0x95
 8000b92:	dc07      	bgt.n	8000ba4 <__aeabi_f2iz+0x34>
 8000b94:	2096      	movs	r0, #150	; 0x96
 8000b96:	1a82      	subs	r2, r0, r2
 8000b98:	40d1      	lsrs	r1, r2
 8000b9a:	4248      	negs	r0, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1f3      	bne.n	8000b88 <__aeabi_f2iz+0x18>
 8000ba0:	0008      	movs	r0, r1
 8000ba2:	e7f1      	b.n	8000b88 <__aeabi_f2iz+0x18>
 8000ba4:	3a96      	subs	r2, #150	; 0x96
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	e7f7      	b.n	8000b9a <__aeabi_f2iz+0x2a>
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	7fffffff 	.word	0x7fffffff

08000bb0 <__aeabi_i2f>:
 8000bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d013      	beq.n	8000bde <__aeabi_i2f+0x2e>
 8000bb6:	17c3      	asrs	r3, r0, #31
 8000bb8:	18c6      	adds	r6, r0, r3
 8000bba:	405e      	eors	r6, r3
 8000bbc:	0fc4      	lsrs	r4, r0, #31
 8000bbe:	0030      	movs	r0, r6
 8000bc0:	f001 feac 	bl	800291c <__clzsi2>
 8000bc4:	239e      	movs	r3, #158	; 0x9e
 8000bc6:	0005      	movs	r5, r0
 8000bc8:	1a1b      	subs	r3, r3, r0
 8000bca:	2b96      	cmp	r3, #150	; 0x96
 8000bcc:	dc0f      	bgt.n	8000bee <__aeabi_i2f+0x3e>
 8000bce:	2808      	cmp	r0, #8
 8000bd0:	dd01      	ble.n	8000bd6 <__aeabi_i2f+0x26>
 8000bd2:	3d08      	subs	r5, #8
 8000bd4:	40ae      	lsls	r6, r5
 8000bd6:	0276      	lsls	r6, r6, #9
 8000bd8:	0a76      	lsrs	r6, r6, #9
 8000bda:	b2d8      	uxtb	r0, r3
 8000bdc:	e002      	b.n	8000be4 <__aeabi_i2f+0x34>
 8000bde:	2400      	movs	r4, #0
 8000be0:	2000      	movs	r0, #0
 8000be2:	2600      	movs	r6, #0
 8000be4:	05c0      	lsls	r0, r0, #23
 8000be6:	4330      	orrs	r0, r6
 8000be8:	07e4      	lsls	r4, r4, #31
 8000bea:	4320      	orrs	r0, r4
 8000bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bee:	2b99      	cmp	r3, #153	; 0x99
 8000bf0:	dd0c      	ble.n	8000c0c <__aeabi_i2f+0x5c>
 8000bf2:	2205      	movs	r2, #5
 8000bf4:	0031      	movs	r1, r6
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	40d1      	lsrs	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	0001      	movs	r1, r0
 8000bfe:	0030      	movs	r0, r6
 8000c00:	311b      	adds	r1, #27
 8000c02:	4088      	lsls	r0, r1
 8000c04:	1e41      	subs	r1, r0, #1
 8000c06:	4188      	sbcs	r0, r1
 8000c08:	4302      	orrs	r2, r0
 8000c0a:	0016      	movs	r6, r2
 8000c0c:	2d05      	cmp	r5, #5
 8000c0e:	dc12      	bgt.n	8000c36 <__aeabi_i2f+0x86>
 8000c10:	0031      	movs	r1, r6
 8000c12:	4f0d      	ldr	r7, [pc, #52]	; (8000c48 <__aeabi_i2f+0x98>)
 8000c14:	4039      	ands	r1, r7
 8000c16:	0772      	lsls	r2, r6, #29
 8000c18:	d009      	beq.n	8000c2e <__aeabi_i2f+0x7e>
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	4030      	ands	r0, r6
 8000c1e:	2804      	cmp	r0, #4
 8000c20:	d005      	beq.n	8000c2e <__aeabi_i2f+0x7e>
 8000c22:	3104      	adds	r1, #4
 8000c24:	014a      	lsls	r2, r1, #5
 8000c26:	d502      	bpl.n	8000c2e <__aeabi_i2f+0x7e>
 8000c28:	239f      	movs	r3, #159	; 0x9f
 8000c2a:	4039      	ands	r1, r7
 8000c2c:	1b5b      	subs	r3, r3, r5
 8000c2e:	0189      	lsls	r1, r1, #6
 8000c30:	0a4e      	lsrs	r6, r1, #9
 8000c32:	b2d8      	uxtb	r0, r3
 8000c34:	e7d6      	b.n	8000be4 <__aeabi_i2f+0x34>
 8000c36:	1f6a      	subs	r2, r5, #5
 8000c38:	4096      	lsls	r6, r2
 8000c3a:	0031      	movs	r1, r6
 8000c3c:	4f02      	ldr	r7, [pc, #8]	; (8000c48 <__aeabi_i2f+0x98>)
 8000c3e:	4039      	ands	r1, r7
 8000c40:	0772      	lsls	r2, r6, #29
 8000c42:	d0f4      	beq.n	8000c2e <__aeabi_i2f+0x7e>
 8000c44:	e7e9      	b.n	8000c1a <__aeabi_i2f+0x6a>
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	fbffffff 	.word	0xfbffffff

08000c4c <__aeabi_dadd>:
 8000c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4e:	464f      	mov	r7, r9
 8000c50:	4646      	mov	r6, r8
 8000c52:	46d6      	mov	lr, sl
 8000c54:	000d      	movs	r5, r1
 8000c56:	0004      	movs	r4, r0
 8000c58:	b5c0      	push	{r6, r7, lr}
 8000c5a:	001f      	movs	r7, r3
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0328      	lsls	r0, r5, #12
 8000c60:	0f62      	lsrs	r2, r4, #29
 8000c62:	0a40      	lsrs	r0, r0, #9
 8000c64:	4310      	orrs	r0, r2
 8000c66:	007a      	lsls	r2, r7, #1
 8000c68:	0d52      	lsrs	r2, r2, #21
 8000c6a:	00e3      	lsls	r3, r4, #3
 8000c6c:	033c      	lsls	r4, r7, #12
 8000c6e:	4691      	mov	r9, r2
 8000c70:	0a64      	lsrs	r4, r4, #9
 8000c72:	0ffa      	lsrs	r2, r7, #31
 8000c74:	0f4f      	lsrs	r7, r1, #29
 8000c76:	006e      	lsls	r6, r5, #1
 8000c78:	4327      	orrs	r7, r4
 8000c7a:	4692      	mov	sl, r2
 8000c7c:	46b8      	mov	r8, r7
 8000c7e:	0d76      	lsrs	r6, r6, #21
 8000c80:	0fed      	lsrs	r5, r5, #31
 8000c82:	00c9      	lsls	r1, r1, #3
 8000c84:	4295      	cmp	r5, r2
 8000c86:	d100      	bne.n	8000c8a <__aeabi_dadd+0x3e>
 8000c88:	e099      	b.n	8000dbe <__aeabi_dadd+0x172>
 8000c8a:	464c      	mov	r4, r9
 8000c8c:	1b34      	subs	r4, r6, r4
 8000c8e:	46a4      	mov	ip, r4
 8000c90:	2c00      	cmp	r4, #0
 8000c92:	dc00      	bgt.n	8000c96 <__aeabi_dadd+0x4a>
 8000c94:	e07c      	b.n	8000d90 <__aeabi_dadd+0x144>
 8000c96:	464a      	mov	r2, r9
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0x52>
 8000c9c:	e0b8      	b.n	8000e10 <__aeabi_dadd+0x1c4>
 8000c9e:	4ac5      	ldr	r2, [pc, #788]	; (8000fb4 <__aeabi_dadd+0x368>)
 8000ca0:	4296      	cmp	r6, r2
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_dadd+0x5a>
 8000ca4:	e11c      	b.n	8000ee0 <__aeabi_dadd+0x294>
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	003c      	movs	r4, r7
 8000caa:	0412      	lsls	r2, r2, #16
 8000cac:	4314      	orrs	r4, r2
 8000cae:	46a0      	mov	r8, r4
 8000cb0:	4662      	mov	r2, ip
 8000cb2:	2a38      	cmp	r2, #56	; 0x38
 8000cb4:	dd00      	ble.n	8000cb8 <__aeabi_dadd+0x6c>
 8000cb6:	e161      	b.n	8000f7c <__aeabi_dadd+0x330>
 8000cb8:	2a1f      	cmp	r2, #31
 8000cba:	dd00      	ble.n	8000cbe <__aeabi_dadd+0x72>
 8000cbc:	e1cc      	b.n	8001058 <__aeabi_dadd+0x40c>
 8000cbe:	4664      	mov	r4, ip
 8000cc0:	2220      	movs	r2, #32
 8000cc2:	1b12      	subs	r2, r2, r4
 8000cc4:	4644      	mov	r4, r8
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	000f      	movs	r7, r1
 8000cca:	46a1      	mov	r9, r4
 8000ccc:	4664      	mov	r4, ip
 8000cce:	4091      	lsls	r1, r2
 8000cd0:	40e7      	lsrs	r7, r4
 8000cd2:	464c      	mov	r4, r9
 8000cd4:	1e4a      	subs	r2, r1, #1
 8000cd6:	4191      	sbcs	r1, r2
 8000cd8:	433c      	orrs	r4, r7
 8000cda:	4642      	mov	r2, r8
 8000cdc:	4321      	orrs	r1, r4
 8000cde:	4664      	mov	r4, ip
 8000ce0:	40e2      	lsrs	r2, r4
 8000ce2:	1a80      	subs	r0, r0, r2
 8000ce4:	1a5c      	subs	r4, r3, r1
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	419b      	sbcs	r3, r3
 8000cea:	425f      	negs	r7, r3
 8000cec:	1bc7      	subs	r7, r0, r7
 8000cee:	023b      	lsls	r3, r7, #8
 8000cf0:	d400      	bmi.n	8000cf4 <__aeabi_dadd+0xa8>
 8000cf2:	e0d0      	b.n	8000e96 <__aeabi_dadd+0x24a>
 8000cf4:	027f      	lsls	r7, r7, #9
 8000cf6:	0a7f      	lsrs	r7, r7, #9
 8000cf8:	2f00      	cmp	r7, #0
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dadd+0xb2>
 8000cfc:	e0ff      	b.n	8000efe <__aeabi_dadd+0x2b2>
 8000cfe:	0038      	movs	r0, r7
 8000d00:	f001 fe0c 	bl	800291c <__clzsi2>
 8000d04:	0001      	movs	r1, r0
 8000d06:	3908      	subs	r1, #8
 8000d08:	2320      	movs	r3, #32
 8000d0a:	0022      	movs	r2, r4
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	408f      	lsls	r7, r1
 8000d10:	40da      	lsrs	r2, r3
 8000d12:	408c      	lsls	r4, r1
 8000d14:	4317      	orrs	r7, r2
 8000d16:	42b1      	cmp	r1, r6
 8000d18:	da00      	bge.n	8000d1c <__aeabi_dadd+0xd0>
 8000d1a:	e0ff      	b.n	8000f1c <__aeabi_dadd+0x2d0>
 8000d1c:	1b89      	subs	r1, r1, r6
 8000d1e:	1c4b      	adds	r3, r1, #1
 8000d20:	2b1f      	cmp	r3, #31
 8000d22:	dd00      	ble.n	8000d26 <__aeabi_dadd+0xda>
 8000d24:	e0a8      	b.n	8000e78 <__aeabi_dadd+0x22c>
 8000d26:	2220      	movs	r2, #32
 8000d28:	0039      	movs	r1, r7
 8000d2a:	1ad2      	subs	r2, r2, r3
 8000d2c:	0020      	movs	r0, r4
 8000d2e:	4094      	lsls	r4, r2
 8000d30:	4091      	lsls	r1, r2
 8000d32:	40d8      	lsrs	r0, r3
 8000d34:	1e62      	subs	r2, r4, #1
 8000d36:	4194      	sbcs	r4, r2
 8000d38:	40df      	lsrs	r7, r3
 8000d3a:	2600      	movs	r6, #0
 8000d3c:	4301      	orrs	r1, r0
 8000d3e:	430c      	orrs	r4, r1
 8000d40:	0763      	lsls	r3, r4, #29
 8000d42:	d009      	beq.n	8000d58 <__aeabi_dadd+0x10c>
 8000d44:	230f      	movs	r3, #15
 8000d46:	4023      	ands	r3, r4
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d005      	beq.n	8000d58 <__aeabi_dadd+0x10c>
 8000d4c:	1d23      	adds	r3, r4, #4
 8000d4e:	42a3      	cmp	r3, r4
 8000d50:	41a4      	sbcs	r4, r4
 8000d52:	4264      	negs	r4, r4
 8000d54:	193f      	adds	r7, r7, r4
 8000d56:	001c      	movs	r4, r3
 8000d58:	023b      	lsls	r3, r7, #8
 8000d5a:	d400      	bmi.n	8000d5e <__aeabi_dadd+0x112>
 8000d5c:	e09e      	b.n	8000e9c <__aeabi_dadd+0x250>
 8000d5e:	4b95      	ldr	r3, [pc, #596]	; (8000fb4 <__aeabi_dadd+0x368>)
 8000d60:	3601      	adds	r6, #1
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dadd+0x11c>
 8000d66:	e0b7      	b.n	8000ed8 <__aeabi_dadd+0x28c>
 8000d68:	4a93      	ldr	r2, [pc, #588]	; (8000fb8 <__aeabi_dadd+0x36c>)
 8000d6a:	08e4      	lsrs	r4, r4, #3
 8000d6c:	4017      	ands	r7, r2
 8000d6e:	077b      	lsls	r3, r7, #29
 8000d70:	0571      	lsls	r1, r6, #21
 8000d72:	027f      	lsls	r7, r7, #9
 8000d74:	4323      	orrs	r3, r4
 8000d76:	0b3f      	lsrs	r7, r7, #12
 8000d78:	0d4a      	lsrs	r2, r1, #21
 8000d7a:	0512      	lsls	r2, r2, #20
 8000d7c:	433a      	orrs	r2, r7
 8000d7e:	07ed      	lsls	r5, r5, #31
 8000d80:	432a      	orrs	r2, r5
 8000d82:	0018      	movs	r0, r3
 8000d84:	0011      	movs	r1, r2
 8000d86:	bce0      	pop	{r5, r6, r7}
 8000d88:	46ba      	mov	sl, r7
 8000d8a:	46b1      	mov	r9, r6
 8000d8c:	46a8      	mov	r8, r5
 8000d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d90:	2c00      	cmp	r4, #0
 8000d92:	d04b      	beq.n	8000e2c <__aeabi_dadd+0x1e0>
 8000d94:	464c      	mov	r4, r9
 8000d96:	1ba4      	subs	r4, r4, r6
 8000d98:	46a4      	mov	ip, r4
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x154>
 8000d9e:	e123      	b.n	8000fe8 <__aeabi_dadd+0x39c>
 8000da0:	0004      	movs	r4, r0
 8000da2:	431c      	orrs	r4, r3
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dadd+0x15c>
 8000da6:	e1af      	b.n	8001108 <__aeabi_dadd+0x4bc>
 8000da8:	4662      	mov	r2, ip
 8000daa:	1e54      	subs	r4, r2, #1
 8000dac:	2a01      	cmp	r2, #1
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dadd+0x166>
 8000db0:	e215      	b.n	80011de <__aeabi_dadd+0x592>
 8000db2:	4d80      	ldr	r5, [pc, #512]	; (8000fb4 <__aeabi_dadd+0x368>)
 8000db4:	45ac      	cmp	ip, r5
 8000db6:	d100      	bne.n	8000dba <__aeabi_dadd+0x16e>
 8000db8:	e1c8      	b.n	800114c <__aeabi_dadd+0x500>
 8000dba:	46a4      	mov	ip, r4
 8000dbc:	e11b      	b.n	8000ff6 <__aeabi_dadd+0x3aa>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	1ab2      	subs	r2, r6, r2
 8000dc2:	4694      	mov	ip, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	dc00      	bgt.n	8000dca <__aeabi_dadd+0x17e>
 8000dc8:	e0ac      	b.n	8000f24 <__aeabi_dadd+0x2d8>
 8000dca:	464a      	mov	r2, r9
 8000dcc:	2a00      	cmp	r2, #0
 8000dce:	d043      	beq.n	8000e58 <__aeabi_dadd+0x20c>
 8000dd0:	4a78      	ldr	r2, [pc, #480]	; (8000fb4 <__aeabi_dadd+0x368>)
 8000dd2:	4296      	cmp	r6, r2
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dadd+0x18c>
 8000dd6:	e1af      	b.n	8001138 <__aeabi_dadd+0x4ec>
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	003c      	movs	r4, r7
 8000ddc:	0412      	lsls	r2, r2, #16
 8000dde:	4314      	orrs	r4, r2
 8000de0:	46a0      	mov	r8, r4
 8000de2:	4662      	mov	r2, ip
 8000de4:	2a38      	cmp	r2, #56	; 0x38
 8000de6:	dc67      	bgt.n	8000eb8 <__aeabi_dadd+0x26c>
 8000de8:	2a1f      	cmp	r2, #31
 8000dea:	dc00      	bgt.n	8000dee <__aeabi_dadd+0x1a2>
 8000dec:	e15f      	b.n	80010ae <__aeabi_dadd+0x462>
 8000dee:	4647      	mov	r7, r8
 8000df0:	3a20      	subs	r2, #32
 8000df2:	40d7      	lsrs	r7, r2
 8000df4:	4662      	mov	r2, ip
 8000df6:	2a20      	cmp	r2, #32
 8000df8:	d005      	beq.n	8000e06 <__aeabi_dadd+0x1ba>
 8000dfa:	4664      	mov	r4, ip
 8000dfc:	2240      	movs	r2, #64	; 0x40
 8000dfe:	1b12      	subs	r2, r2, r4
 8000e00:	4644      	mov	r4, r8
 8000e02:	4094      	lsls	r4, r2
 8000e04:	4321      	orrs	r1, r4
 8000e06:	1e4a      	subs	r2, r1, #1
 8000e08:	4191      	sbcs	r1, r2
 8000e0a:	000c      	movs	r4, r1
 8000e0c:	433c      	orrs	r4, r7
 8000e0e:	e057      	b.n	8000ec0 <__aeabi_dadd+0x274>
 8000e10:	003a      	movs	r2, r7
 8000e12:	430a      	orrs	r2, r1
 8000e14:	d100      	bne.n	8000e18 <__aeabi_dadd+0x1cc>
 8000e16:	e105      	b.n	8001024 <__aeabi_dadd+0x3d8>
 8000e18:	0022      	movs	r2, r4
 8000e1a:	3a01      	subs	r2, #1
 8000e1c:	2c01      	cmp	r4, #1
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_dadd+0x1d6>
 8000e20:	e182      	b.n	8001128 <__aeabi_dadd+0x4dc>
 8000e22:	4c64      	ldr	r4, [pc, #400]	; (8000fb4 <__aeabi_dadd+0x368>)
 8000e24:	45a4      	cmp	ip, r4
 8000e26:	d05b      	beq.n	8000ee0 <__aeabi_dadd+0x294>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	e741      	b.n	8000cb0 <__aeabi_dadd+0x64>
 8000e2c:	4c63      	ldr	r4, [pc, #396]	; (8000fbc <__aeabi_dadd+0x370>)
 8000e2e:	1c77      	adds	r7, r6, #1
 8000e30:	4227      	tst	r7, r4
 8000e32:	d000      	beq.n	8000e36 <__aeabi_dadd+0x1ea>
 8000e34:	e0c4      	b.n	8000fc0 <__aeabi_dadd+0x374>
 8000e36:	0004      	movs	r4, r0
 8000e38:	431c      	orrs	r4, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_dadd+0x1f4>
 8000e3e:	e169      	b.n	8001114 <__aeabi_dadd+0x4c8>
 8000e40:	2c00      	cmp	r4, #0
 8000e42:	d100      	bne.n	8000e46 <__aeabi_dadd+0x1fa>
 8000e44:	e1bf      	b.n	80011c6 <__aeabi_dadd+0x57a>
 8000e46:	4644      	mov	r4, r8
 8000e48:	430c      	orrs	r4, r1
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_dadd+0x202>
 8000e4c:	e1d0      	b.n	80011f0 <__aeabi_dadd+0x5a4>
 8000e4e:	0742      	lsls	r2, r0, #29
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	08c0      	lsrs	r0, r0, #3
 8000e56:	e029      	b.n	8000eac <__aeabi_dadd+0x260>
 8000e58:	003a      	movs	r2, r7
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_dadd+0x214>
 8000e5e:	e170      	b.n	8001142 <__aeabi_dadd+0x4f6>
 8000e60:	4662      	mov	r2, ip
 8000e62:	4664      	mov	r4, ip
 8000e64:	3a01      	subs	r2, #1
 8000e66:	2c01      	cmp	r4, #1
 8000e68:	d100      	bne.n	8000e6c <__aeabi_dadd+0x220>
 8000e6a:	e0e0      	b.n	800102e <__aeabi_dadd+0x3e2>
 8000e6c:	4c51      	ldr	r4, [pc, #324]	; (8000fb4 <__aeabi_dadd+0x368>)
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dadd+0x228>
 8000e72:	e161      	b.n	8001138 <__aeabi_dadd+0x4ec>
 8000e74:	4694      	mov	ip, r2
 8000e76:	e7b4      	b.n	8000de2 <__aeabi_dadd+0x196>
 8000e78:	003a      	movs	r2, r7
 8000e7a:	391f      	subs	r1, #31
 8000e7c:	40ca      	lsrs	r2, r1
 8000e7e:	0011      	movs	r1, r2
 8000e80:	2b20      	cmp	r3, #32
 8000e82:	d003      	beq.n	8000e8c <__aeabi_dadd+0x240>
 8000e84:	2240      	movs	r2, #64	; 0x40
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	409f      	lsls	r7, r3
 8000e8a:	433c      	orrs	r4, r7
 8000e8c:	1e63      	subs	r3, r4, #1
 8000e8e:	419c      	sbcs	r4, r3
 8000e90:	2700      	movs	r7, #0
 8000e92:	2600      	movs	r6, #0
 8000e94:	430c      	orrs	r4, r1
 8000e96:	0763      	lsls	r3, r4, #29
 8000e98:	d000      	beq.n	8000e9c <__aeabi_dadd+0x250>
 8000e9a:	e753      	b.n	8000d44 <__aeabi_dadd+0xf8>
 8000e9c:	46b4      	mov	ip, r6
 8000e9e:	08e4      	lsrs	r4, r4, #3
 8000ea0:	077b      	lsls	r3, r7, #29
 8000ea2:	4323      	orrs	r3, r4
 8000ea4:	08f8      	lsrs	r0, r7, #3
 8000ea6:	4a43      	ldr	r2, [pc, #268]	; (8000fb4 <__aeabi_dadd+0x368>)
 8000ea8:	4594      	cmp	ip, r2
 8000eaa:	d01d      	beq.n	8000ee8 <__aeabi_dadd+0x29c>
 8000eac:	4662      	mov	r2, ip
 8000eae:	0307      	lsls	r7, r0, #12
 8000eb0:	0552      	lsls	r2, r2, #21
 8000eb2:	0b3f      	lsrs	r7, r7, #12
 8000eb4:	0d52      	lsrs	r2, r2, #21
 8000eb6:	e760      	b.n	8000d7a <__aeabi_dadd+0x12e>
 8000eb8:	4644      	mov	r4, r8
 8000eba:	430c      	orrs	r4, r1
 8000ebc:	1e62      	subs	r2, r4, #1
 8000ebe:	4194      	sbcs	r4, r2
 8000ec0:	18e4      	adds	r4, r4, r3
 8000ec2:	429c      	cmp	r4, r3
 8000ec4:	419b      	sbcs	r3, r3
 8000ec6:	425f      	negs	r7, r3
 8000ec8:	183f      	adds	r7, r7, r0
 8000eca:	023b      	lsls	r3, r7, #8
 8000ecc:	d5e3      	bpl.n	8000e96 <__aeabi_dadd+0x24a>
 8000ece:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <__aeabi_dadd+0x368>)
 8000ed0:	3601      	adds	r6, #1
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_dadd+0x28c>
 8000ed6:	e0b5      	b.n	8001044 <__aeabi_dadd+0x3f8>
 8000ed8:	0032      	movs	r2, r6
 8000eda:	2700      	movs	r7, #0
 8000edc:	2300      	movs	r3, #0
 8000ede:	e74c      	b.n	8000d7a <__aeabi_dadd+0x12e>
 8000ee0:	0742      	lsls	r2, r0, #29
 8000ee2:	08db      	lsrs	r3, r3, #3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	08c0      	lsrs	r0, r0, #3
 8000ee8:	001a      	movs	r2, r3
 8000eea:	4302      	orrs	r2, r0
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_dadd+0x2a4>
 8000eee:	e1e1      	b.n	80012b4 <__aeabi_dadd+0x668>
 8000ef0:	2780      	movs	r7, #128	; 0x80
 8000ef2:	033f      	lsls	r7, r7, #12
 8000ef4:	4307      	orrs	r7, r0
 8000ef6:	033f      	lsls	r7, r7, #12
 8000ef8:	4a2e      	ldr	r2, [pc, #184]	; (8000fb4 <__aeabi_dadd+0x368>)
 8000efa:	0b3f      	lsrs	r7, r7, #12
 8000efc:	e73d      	b.n	8000d7a <__aeabi_dadd+0x12e>
 8000efe:	0020      	movs	r0, r4
 8000f00:	f001 fd0c 	bl	800291c <__clzsi2>
 8000f04:	0001      	movs	r1, r0
 8000f06:	3118      	adds	r1, #24
 8000f08:	291f      	cmp	r1, #31
 8000f0a:	dc00      	bgt.n	8000f0e <__aeabi_dadd+0x2c2>
 8000f0c:	e6fc      	b.n	8000d08 <__aeabi_dadd+0xbc>
 8000f0e:	3808      	subs	r0, #8
 8000f10:	4084      	lsls	r4, r0
 8000f12:	0027      	movs	r7, r4
 8000f14:	2400      	movs	r4, #0
 8000f16:	42b1      	cmp	r1, r6
 8000f18:	db00      	blt.n	8000f1c <__aeabi_dadd+0x2d0>
 8000f1a:	e6ff      	b.n	8000d1c <__aeabi_dadd+0xd0>
 8000f1c:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <__aeabi_dadd+0x36c>)
 8000f1e:	1a76      	subs	r6, r6, r1
 8000f20:	4017      	ands	r7, r2
 8000f22:	e70d      	b.n	8000d40 <__aeabi_dadd+0xf4>
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	d02f      	beq.n	8000f88 <__aeabi_dadd+0x33c>
 8000f28:	464a      	mov	r2, r9
 8000f2a:	1b92      	subs	r2, r2, r6
 8000f2c:	4694      	mov	ip, r2
 8000f2e:	2e00      	cmp	r6, #0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dadd+0x2e8>
 8000f32:	e0ad      	b.n	8001090 <__aeabi_dadd+0x444>
 8000f34:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <__aeabi_dadd+0x368>)
 8000f36:	4591      	cmp	r9, r2
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dadd+0x2f0>
 8000f3a:	e10f      	b.n	800115c <__aeabi_dadd+0x510>
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	0412      	lsls	r2, r2, #16
 8000f40:	4310      	orrs	r0, r2
 8000f42:	4662      	mov	r2, ip
 8000f44:	2a38      	cmp	r2, #56	; 0x38
 8000f46:	dd00      	ble.n	8000f4a <__aeabi_dadd+0x2fe>
 8000f48:	e10f      	b.n	800116a <__aeabi_dadd+0x51e>
 8000f4a:	2a1f      	cmp	r2, #31
 8000f4c:	dd00      	ble.n	8000f50 <__aeabi_dadd+0x304>
 8000f4e:	e180      	b.n	8001252 <__aeabi_dadd+0x606>
 8000f50:	4664      	mov	r4, ip
 8000f52:	2220      	movs	r2, #32
 8000f54:	001e      	movs	r6, r3
 8000f56:	1b12      	subs	r2, r2, r4
 8000f58:	4667      	mov	r7, ip
 8000f5a:	0004      	movs	r4, r0
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	4094      	lsls	r4, r2
 8000f60:	40fe      	lsrs	r6, r7
 8000f62:	1e5a      	subs	r2, r3, #1
 8000f64:	4193      	sbcs	r3, r2
 8000f66:	40f8      	lsrs	r0, r7
 8000f68:	4334      	orrs	r4, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	4480      	add	r8, r0
 8000f6e:	1864      	adds	r4, r4, r1
 8000f70:	428c      	cmp	r4, r1
 8000f72:	41bf      	sbcs	r7, r7
 8000f74:	427f      	negs	r7, r7
 8000f76:	464e      	mov	r6, r9
 8000f78:	4447      	add	r7, r8
 8000f7a:	e7a6      	b.n	8000eca <__aeabi_dadd+0x27e>
 8000f7c:	4642      	mov	r2, r8
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	0011      	movs	r1, r2
 8000f82:	1e4a      	subs	r2, r1, #1
 8000f84:	4191      	sbcs	r1, r2
 8000f86:	e6ad      	b.n	8000ce4 <__aeabi_dadd+0x98>
 8000f88:	4c0c      	ldr	r4, [pc, #48]	; (8000fbc <__aeabi_dadd+0x370>)
 8000f8a:	1c72      	adds	r2, r6, #1
 8000f8c:	4222      	tst	r2, r4
 8000f8e:	d000      	beq.n	8000f92 <__aeabi_dadd+0x346>
 8000f90:	e0a1      	b.n	80010d6 <__aeabi_dadd+0x48a>
 8000f92:	0002      	movs	r2, r0
 8000f94:	431a      	orrs	r2, r3
 8000f96:	2e00      	cmp	r6, #0
 8000f98:	d000      	beq.n	8000f9c <__aeabi_dadd+0x350>
 8000f9a:	e0fa      	b.n	8001192 <__aeabi_dadd+0x546>
 8000f9c:	2a00      	cmp	r2, #0
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_dadd+0x356>
 8000fa0:	e145      	b.n	800122e <__aeabi_dadd+0x5e2>
 8000fa2:	003a      	movs	r2, r7
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	d000      	beq.n	8000faa <__aeabi_dadd+0x35e>
 8000fa8:	e146      	b.n	8001238 <__aeabi_dadd+0x5ec>
 8000faa:	0742      	lsls	r2, r0, #29
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	08c0      	lsrs	r0, r0, #3
 8000fb2:	e77b      	b.n	8000eac <__aeabi_dadd+0x260>
 8000fb4:	000007ff 	.word	0x000007ff
 8000fb8:	ff7fffff 	.word	0xff7fffff
 8000fbc:	000007fe 	.word	0x000007fe
 8000fc0:	4647      	mov	r7, r8
 8000fc2:	1a5c      	subs	r4, r3, r1
 8000fc4:	1bc2      	subs	r2, r0, r7
 8000fc6:	42a3      	cmp	r3, r4
 8000fc8:	41bf      	sbcs	r7, r7
 8000fca:	427f      	negs	r7, r7
 8000fcc:	46b9      	mov	r9, r7
 8000fce:	0017      	movs	r7, r2
 8000fd0:	464a      	mov	r2, r9
 8000fd2:	1abf      	subs	r7, r7, r2
 8000fd4:	023a      	lsls	r2, r7, #8
 8000fd6:	d500      	bpl.n	8000fda <__aeabi_dadd+0x38e>
 8000fd8:	e08d      	b.n	80010f6 <__aeabi_dadd+0x4aa>
 8000fda:	0023      	movs	r3, r4
 8000fdc:	433b      	orrs	r3, r7
 8000fde:	d000      	beq.n	8000fe2 <__aeabi_dadd+0x396>
 8000fe0:	e68a      	b.n	8000cf8 <__aeabi_dadd+0xac>
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	e761      	b.n	8000eac <__aeabi_dadd+0x260>
 8000fe8:	4cb4      	ldr	r4, [pc, #720]	; (80012bc <__aeabi_dadd+0x670>)
 8000fea:	45a1      	cmp	r9, r4
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_dadd+0x3a4>
 8000fee:	e0ad      	b.n	800114c <__aeabi_dadd+0x500>
 8000ff0:	2480      	movs	r4, #128	; 0x80
 8000ff2:	0424      	lsls	r4, r4, #16
 8000ff4:	4320      	orrs	r0, r4
 8000ff6:	4664      	mov	r4, ip
 8000ff8:	2c38      	cmp	r4, #56	; 0x38
 8000ffa:	dc3d      	bgt.n	8001078 <__aeabi_dadd+0x42c>
 8000ffc:	4662      	mov	r2, ip
 8000ffe:	2c1f      	cmp	r4, #31
 8001000:	dd00      	ble.n	8001004 <__aeabi_dadd+0x3b8>
 8001002:	e0b7      	b.n	8001174 <__aeabi_dadd+0x528>
 8001004:	2520      	movs	r5, #32
 8001006:	001e      	movs	r6, r3
 8001008:	1b2d      	subs	r5, r5, r4
 800100a:	0004      	movs	r4, r0
 800100c:	40ab      	lsls	r3, r5
 800100e:	40ac      	lsls	r4, r5
 8001010:	40d6      	lsrs	r6, r2
 8001012:	40d0      	lsrs	r0, r2
 8001014:	4642      	mov	r2, r8
 8001016:	1e5d      	subs	r5, r3, #1
 8001018:	41ab      	sbcs	r3, r5
 800101a:	4334      	orrs	r4, r6
 800101c:	1a12      	subs	r2, r2, r0
 800101e:	4690      	mov	r8, r2
 8001020:	4323      	orrs	r3, r4
 8001022:	e02c      	b.n	800107e <__aeabi_dadd+0x432>
 8001024:	0742      	lsls	r2, r0, #29
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	4313      	orrs	r3, r2
 800102a:	08c0      	lsrs	r0, r0, #3
 800102c:	e73b      	b.n	8000ea6 <__aeabi_dadd+0x25a>
 800102e:	185c      	adds	r4, r3, r1
 8001030:	429c      	cmp	r4, r3
 8001032:	419b      	sbcs	r3, r3
 8001034:	4440      	add	r0, r8
 8001036:	425b      	negs	r3, r3
 8001038:	18c7      	adds	r7, r0, r3
 800103a:	2601      	movs	r6, #1
 800103c:	023b      	lsls	r3, r7, #8
 800103e:	d400      	bmi.n	8001042 <__aeabi_dadd+0x3f6>
 8001040:	e729      	b.n	8000e96 <__aeabi_dadd+0x24a>
 8001042:	2602      	movs	r6, #2
 8001044:	4a9e      	ldr	r2, [pc, #632]	; (80012c0 <__aeabi_dadd+0x674>)
 8001046:	0863      	lsrs	r3, r4, #1
 8001048:	4017      	ands	r7, r2
 800104a:	2201      	movs	r2, #1
 800104c:	4014      	ands	r4, r2
 800104e:	431c      	orrs	r4, r3
 8001050:	07fb      	lsls	r3, r7, #31
 8001052:	431c      	orrs	r4, r3
 8001054:	087f      	lsrs	r7, r7, #1
 8001056:	e673      	b.n	8000d40 <__aeabi_dadd+0xf4>
 8001058:	4644      	mov	r4, r8
 800105a:	3a20      	subs	r2, #32
 800105c:	40d4      	lsrs	r4, r2
 800105e:	4662      	mov	r2, ip
 8001060:	2a20      	cmp	r2, #32
 8001062:	d005      	beq.n	8001070 <__aeabi_dadd+0x424>
 8001064:	4667      	mov	r7, ip
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	1bd2      	subs	r2, r2, r7
 800106a:	4647      	mov	r7, r8
 800106c:	4097      	lsls	r7, r2
 800106e:	4339      	orrs	r1, r7
 8001070:	1e4a      	subs	r2, r1, #1
 8001072:	4191      	sbcs	r1, r2
 8001074:	4321      	orrs	r1, r4
 8001076:	e635      	b.n	8000ce4 <__aeabi_dadd+0x98>
 8001078:	4303      	orrs	r3, r0
 800107a:	1e58      	subs	r0, r3, #1
 800107c:	4183      	sbcs	r3, r0
 800107e:	1acc      	subs	r4, r1, r3
 8001080:	42a1      	cmp	r1, r4
 8001082:	41bf      	sbcs	r7, r7
 8001084:	4643      	mov	r3, r8
 8001086:	427f      	negs	r7, r7
 8001088:	4655      	mov	r5, sl
 800108a:	464e      	mov	r6, r9
 800108c:	1bdf      	subs	r7, r3, r7
 800108e:	e62e      	b.n	8000cee <__aeabi_dadd+0xa2>
 8001090:	0002      	movs	r2, r0
 8001092:	431a      	orrs	r2, r3
 8001094:	d100      	bne.n	8001098 <__aeabi_dadd+0x44c>
 8001096:	e0bd      	b.n	8001214 <__aeabi_dadd+0x5c8>
 8001098:	4662      	mov	r2, ip
 800109a:	4664      	mov	r4, ip
 800109c:	3a01      	subs	r2, #1
 800109e:	2c01      	cmp	r4, #1
 80010a0:	d100      	bne.n	80010a4 <__aeabi_dadd+0x458>
 80010a2:	e0e5      	b.n	8001270 <__aeabi_dadd+0x624>
 80010a4:	4c85      	ldr	r4, [pc, #532]	; (80012bc <__aeabi_dadd+0x670>)
 80010a6:	45a4      	cmp	ip, r4
 80010a8:	d058      	beq.n	800115c <__aeabi_dadd+0x510>
 80010aa:	4694      	mov	ip, r2
 80010ac:	e749      	b.n	8000f42 <__aeabi_dadd+0x2f6>
 80010ae:	4664      	mov	r4, ip
 80010b0:	2220      	movs	r2, #32
 80010b2:	1b12      	subs	r2, r2, r4
 80010b4:	4644      	mov	r4, r8
 80010b6:	4094      	lsls	r4, r2
 80010b8:	000f      	movs	r7, r1
 80010ba:	46a1      	mov	r9, r4
 80010bc:	4664      	mov	r4, ip
 80010be:	4091      	lsls	r1, r2
 80010c0:	40e7      	lsrs	r7, r4
 80010c2:	464c      	mov	r4, r9
 80010c4:	1e4a      	subs	r2, r1, #1
 80010c6:	4191      	sbcs	r1, r2
 80010c8:	433c      	orrs	r4, r7
 80010ca:	4642      	mov	r2, r8
 80010cc:	430c      	orrs	r4, r1
 80010ce:	4661      	mov	r1, ip
 80010d0:	40ca      	lsrs	r2, r1
 80010d2:	1880      	adds	r0, r0, r2
 80010d4:	e6f4      	b.n	8000ec0 <__aeabi_dadd+0x274>
 80010d6:	4c79      	ldr	r4, [pc, #484]	; (80012bc <__aeabi_dadd+0x670>)
 80010d8:	42a2      	cmp	r2, r4
 80010da:	d100      	bne.n	80010de <__aeabi_dadd+0x492>
 80010dc:	e6fd      	b.n	8000eda <__aeabi_dadd+0x28e>
 80010de:	1859      	adds	r1, r3, r1
 80010e0:	4299      	cmp	r1, r3
 80010e2:	419b      	sbcs	r3, r3
 80010e4:	4440      	add	r0, r8
 80010e6:	425f      	negs	r7, r3
 80010e8:	19c7      	adds	r7, r0, r7
 80010ea:	07fc      	lsls	r4, r7, #31
 80010ec:	0849      	lsrs	r1, r1, #1
 80010ee:	0016      	movs	r6, r2
 80010f0:	430c      	orrs	r4, r1
 80010f2:	087f      	lsrs	r7, r7, #1
 80010f4:	e6cf      	b.n	8000e96 <__aeabi_dadd+0x24a>
 80010f6:	1acc      	subs	r4, r1, r3
 80010f8:	42a1      	cmp	r1, r4
 80010fa:	41bf      	sbcs	r7, r7
 80010fc:	4643      	mov	r3, r8
 80010fe:	427f      	negs	r7, r7
 8001100:	1a18      	subs	r0, r3, r0
 8001102:	4655      	mov	r5, sl
 8001104:	1bc7      	subs	r7, r0, r7
 8001106:	e5f7      	b.n	8000cf8 <__aeabi_dadd+0xac>
 8001108:	08c9      	lsrs	r1, r1, #3
 800110a:	077b      	lsls	r3, r7, #29
 800110c:	4655      	mov	r5, sl
 800110e:	430b      	orrs	r3, r1
 8001110:	08f8      	lsrs	r0, r7, #3
 8001112:	e6c8      	b.n	8000ea6 <__aeabi_dadd+0x25a>
 8001114:	2c00      	cmp	r4, #0
 8001116:	d000      	beq.n	800111a <__aeabi_dadd+0x4ce>
 8001118:	e081      	b.n	800121e <__aeabi_dadd+0x5d2>
 800111a:	4643      	mov	r3, r8
 800111c:	430b      	orrs	r3, r1
 800111e:	d115      	bne.n	800114c <__aeabi_dadd+0x500>
 8001120:	2080      	movs	r0, #128	; 0x80
 8001122:	2500      	movs	r5, #0
 8001124:	0300      	lsls	r0, r0, #12
 8001126:	e6e3      	b.n	8000ef0 <__aeabi_dadd+0x2a4>
 8001128:	1a5c      	subs	r4, r3, r1
 800112a:	42a3      	cmp	r3, r4
 800112c:	419b      	sbcs	r3, r3
 800112e:	1bc7      	subs	r7, r0, r7
 8001130:	425b      	negs	r3, r3
 8001132:	2601      	movs	r6, #1
 8001134:	1aff      	subs	r7, r7, r3
 8001136:	e5da      	b.n	8000cee <__aeabi_dadd+0xa2>
 8001138:	0742      	lsls	r2, r0, #29
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	4313      	orrs	r3, r2
 800113e:	08c0      	lsrs	r0, r0, #3
 8001140:	e6d2      	b.n	8000ee8 <__aeabi_dadd+0x29c>
 8001142:	0742      	lsls	r2, r0, #29
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	4313      	orrs	r3, r2
 8001148:	08c0      	lsrs	r0, r0, #3
 800114a:	e6ac      	b.n	8000ea6 <__aeabi_dadd+0x25a>
 800114c:	4643      	mov	r3, r8
 800114e:	4642      	mov	r2, r8
 8001150:	08c9      	lsrs	r1, r1, #3
 8001152:	075b      	lsls	r3, r3, #29
 8001154:	4655      	mov	r5, sl
 8001156:	430b      	orrs	r3, r1
 8001158:	08d0      	lsrs	r0, r2, #3
 800115a:	e6c5      	b.n	8000ee8 <__aeabi_dadd+0x29c>
 800115c:	4643      	mov	r3, r8
 800115e:	4642      	mov	r2, r8
 8001160:	075b      	lsls	r3, r3, #29
 8001162:	08c9      	lsrs	r1, r1, #3
 8001164:	430b      	orrs	r3, r1
 8001166:	08d0      	lsrs	r0, r2, #3
 8001168:	e6be      	b.n	8000ee8 <__aeabi_dadd+0x29c>
 800116a:	4303      	orrs	r3, r0
 800116c:	001c      	movs	r4, r3
 800116e:	1e63      	subs	r3, r4, #1
 8001170:	419c      	sbcs	r4, r3
 8001172:	e6fc      	b.n	8000f6e <__aeabi_dadd+0x322>
 8001174:	0002      	movs	r2, r0
 8001176:	3c20      	subs	r4, #32
 8001178:	40e2      	lsrs	r2, r4
 800117a:	0014      	movs	r4, r2
 800117c:	4662      	mov	r2, ip
 800117e:	2a20      	cmp	r2, #32
 8001180:	d003      	beq.n	800118a <__aeabi_dadd+0x53e>
 8001182:	2540      	movs	r5, #64	; 0x40
 8001184:	1aad      	subs	r5, r5, r2
 8001186:	40a8      	lsls	r0, r5
 8001188:	4303      	orrs	r3, r0
 800118a:	1e58      	subs	r0, r3, #1
 800118c:	4183      	sbcs	r3, r0
 800118e:	4323      	orrs	r3, r4
 8001190:	e775      	b.n	800107e <__aeabi_dadd+0x432>
 8001192:	2a00      	cmp	r2, #0
 8001194:	d0e2      	beq.n	800115c <__aeabi_dadd+0x510>
 8001196:	003a      	movs	r2, r7
 8001198:	430a      	orrs	r2, r1
 800119a:	d0cd      	beq.n	8001138 <__aeabi_dadd+0x4ec>
 800119c:	0742      	lsls	r2, r0, #29
 800119e:	08db      	lsrs	r3, r3, #3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	08c0      	lsrs	r0, r0, #3
 80011a6:	0312      	lsls	r2, r2, #12
 80011a8:	4210      	tst	r0, r2
 80011aa:	d006      	beq.n	80011ba <__aeabi_dadd+0x56e>
 80011ac:	08fc      	lsrs	r4, r7, #3
 80011ae:	4214      	tst	r4, r2
 80011b0:	d103      	bne.n	80011ba <__aeabi_dadd+0x56e>
 80011b2:	0020      	movs	r0, r4
 80011b4:	08cb      	lsrs	r3, r1, #3
 80011b6:	077a      	lsls	r2, r7, #29
 80011b8:	4313      	orrs	r3, r2
 80011ba:	0f5a      	lsrs	r2, r3, #29
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	0752      	lsls	r2, r2, #29
 80011c0:	08db      	lsrs	r3, r3, #3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	e690      	b.n	8000ee8 <__aeabi_dadd+0x29c>
 80011c6:	4643      	mov	r3, r8
 80011c8:	430b      	orrs	r3, r1
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x582>
 80011cc:	e709      	b.n	8000fe2 <__aeabi_dadd+0x396>
 80011ce:	4643      	mov	r3, r8
 80011d0:	4642      	mov	r2, r8
 80011d2:	08c9      	lsrs	r1, r1, #3
 80011d4:	075b      	lsls	r3, r3, #29
 80011d6:	4655      	mov	r5, sl
 80011d8:	430b      	orrs	r3, r1
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	e666      	b.n	8000eac <__aeabi_dadd+0x260>
 80011de:	1acc      	subs	r4, r1, r3
 80011e0:	42a1      	cmp	r1, r4
 80011e2:	4189      	sbcs	r1, r1
 80011e4:	1a3f      	subs	r7, r7, r0
 80011e6:	4249      	negs	r1, r1
 80011e8:	4655      	mov	r5, sl
 80011ea:	2601      	movs	r6, #1
 80011ec:	1a7f      	subs	r7, r7, r1
 80011ee:	e57e      	b.n	8000cee <__aeabi_dadd+0xa2>
 80011f0:	4642      	mov	r2, r8
 80011f2:	1a5c      	subs	r4, r3, r1
 80011f4:	1a87      	subs	r7, r0, r2
 80011f6:	42a3      	cmp	r3, r4
 80011f8:	4192      	sbcs	r2, r2
 80011fa:	4252      	negs	r2, r2
 80011fc:	1abf      	subs	r7, r7, r2
 80011fe:	023a      	lsls	r2, r7, #8
 8001200:	d53d      	bpl.n	800127e <__aeabi_dadd+0x632>
 8001202:	1acc      	subs	r4, r1, r3
 8001204:	42a1      	cmp	r1, r4
 8001206:	4189      	sbcs	r1, r1
 8001208:	4643      	mov	r3, r8
 800120a:	4249      	negs	r1, r1
 800120c:	1a1f      	subs	r7, r3, r0
 800120e:	4655      	mov	r5, sl
 8001210:	1a7f      	subs	r7, r7, r1
 8001212:	e595      	b.n	8000d40 <__aeabi_dadd+0xf4>
 8001214:	077b      	lsls	r3, r7, #29
 8001216:	08c9      	lsrs	r1, r1, #3
 8001218:	430b      	orrs	r3, r1
 800121a:	08f8      	lsrs	r0, r7, #3
 800121c:	e643      	b.n	8000ea6 <__aeabi_dadd+0x25a>
 800121e:	4644      	mov	r4, r8
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	430c      	orrs	r4, r1
 8001224:	d130      	bne.n	8001288 <__aeabi_dadd+0x63c>
 8001226:	0742      	lsls	r2, r0, #29
 8001228:	4313      	orrs	r3, r2
 800122a:	08c0      	lsrs	r0, r0, #3
 800122c:	e65c      	b.n	8000ee8 <__aeabi_dadd+0x29c>
 800122e:	077b      	lsls	r3, r7, #29
 8001230:	08c9      	lsrs	r1, r1, #3
 8001232:	430b      	orrs	r3, r1
 8001234:	08f8      	lsrs	r0, r7, #3
 8001236:	e639      	b.n	8000eac <__aeabi_dadd+0x260>
 8001238:	185c      	adds	r4, r3, r1
 800123a:	429c      	cmp	r4, r3
 800123c:	419b      	sbcs	r3, r3
 800123e:	4440      	add	r0, r8
 8001240:	425b      	negs	r3, r3
 8001242:	18c7      	adds	r7, r0, r3
 8001244:	023b      	lsls	r3, r7, #8
 8001246:	d400      	bmi.n	800124a <__aeabi_dadd+0x5fe>
 8001248:	e625      	b.n	8000e96 <__aeabi_dadd+0x24a>
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <__aeabi_dadd+0x674>)
 800124c:	2601      	movs	r6, #1
 800124e:	401f      	ands	r7, r3
 8001250:	e621      	b.n	8000e96 <__aeabi_dadd+0x24a>
 8001252:	0004      	movs	r4, r0
 8001254:	3a20      	subs	r2, #32
 8001256:	40d4      	lsrs	r4, r2
 8001258:	4662      	mov	r2, ip
 800125a:	2a20      	cmp	r2, #32
 800125c:	d004      	beq.n	8001268 <__aeabi_dadd+0x61c>
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	4666      	mov	r6, ip
 8001262:	1b92      	subs	r2, r2, r6
 8001264:	4090      	lsls	r0, r2
 8001266:	4303      	orrs	r3, r0
 8001268:	1e5a      	subs	r2, r3, #1
 800126a:	4193      	sbcs	r3, r2
 800126c:	431c      	orrs	r4, r3
 800126e:	e67e      	b.n	8000f6e <__aeabi_dadd+0x322>
 8001270:	185c      	adds	r4, r3, r1
 8001272:	428c      	cmp	r4, r1
 8001274:	4189      	sbcs	r1, r1
 8001276:	4440      	add	r0, r8
 8001278:	4249      	negs	r1, r1
 800127a:	1847      	adds	r7, r0, r1
 800127c:	e6dd      	b.n	800103a <__aeabi_dadd+0x3ee>
 800127e:	0023      	movs	r3, r4
 8001280:	433b      	orrs	r3, r7
 8001282:	d100      	bne.n	8001286 <__aeabi_dadd+0x63a>
 8001284:	e6ad      	b.n	8000fe2 <__aeabi_dadd+0x396>
 8001286:	e606      	b.n	8000e96 <__aeabi_dadd+0x24a>
 8001288:	0744      	lsls	r4, r0, #29
 800128a:	4323      	orrs	r3, r4
 800128c:	2480      	movs	r4, #128	; 0x80
 800128e:	08c0      	lsrs	r0, r0, #3
 8001290:	0324      	lsls	r4, r4, #12
 8001292:	4220      	tst	r0, r4
 8001294:	d008      	beq.n	80012a8 <__aeabi_dadd+0x65c>
 8001296:	4642      	mov	r2, r8
 8001298:	08d6      	lsrs	r6, r2, #3
 800129a:	4226      	tst	r6, r4
 800129c:	d104      	bne.n	80012a8 <__aeabi_dadd+0x65c>
 800129e:	4655      	mov	r5, sl
 80012a0:	0030      	movs	r0, r6
 80012a2:	08cb      	lsrs	r3, r1, #3
 80012a4:	0751      	lsls	r1, r2, #29
 80012a6:	430b      	orrs	r3, r1
 80012a8:	0f5a      	lsrs	r2, r3, #29
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	0752      	lsls	r2, r2, #29
 80012b0:	4313      	orrs	r3, r2
 80012b2:	e619      	b.n	8000ee8 <__aeabi_dadd+0x29c>
 80012b4:	2300      	movs	r3, #0
 80012b6:	4a01      	ldr	r2, [pc, #4]	; (80012bc <__aeabi_dadd+0x670>)
 80012b8:	001f      	movs	r7, r3
 80012ba:	e55e      	b.n	8000d7a <__aeabi_dadd+0x12e>
 80012bc:	000007ff 	.word	0x000007ff
 80012c0:	ff7fffff 	.word	0xff7fffff

080012c4 <__aeabi_ddiv>:
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	4657      	mov	r7, sl
 80012c8:	464e      	mov	r6, r9
 80012ca:	4645      	mov	r5, r8
 80012cc:	46de      	mov	lr, fp
 80012ce:	b5e0      	push	{r5, r6, r7, lr}
 80012d0:	4681      	mov	r9, r0
 80012d2:	0005      	movs	r5, r0
 80012d4:	030c      	lsls	r4, r1, #12
 80012d6:	0048      	lsls	r0, r1, #1
 80012d8:	4692      	mov	sl, r2
 80012da:	001f      	movs	r7, r3
 80012dc:	b085      	sub	sp, #20
 80012de:	0b24      	lsrs	r4, r4, #12
 80012e0:	0d40      	lsrs	r0, r0, #21
 80012e2:	0fce      	lsrs	r6, r1, #31
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d100      	bne.n	80012ea <__aeabi_ddiv+0x26>
 80012e8:	e156      	b.n	8001598 <__aeabi_ddiv+0x2d4>
 80012ea:	4bd4      	ldr	r3, [pc, #848]	; (800163c <__aeabi_ddiv+0x378>)
 80012ec:	4298      	cmp	r0, r3
 80012ee:	d100      	bne.n	80012f2 <__aeabi_ddiv+0x2e>
 80012f0:	e172      	b.n	80015d8 <__aeabi_ddiv+0x314>
 80012f2:	0f6b      	lsrs	r3, r5, #29
 80012f4:	00e4      	lsls	r4, r4, #3
 80012f6:	431c      	orrs	r4, r3
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	041b      	lsls	r3, r3, #16
 80012fc:	4323      	orrs	r3, r4
 80012fe:	4698      	mov	r8, r3
 8001300:	4bcf      	ldr	r3, [pc, #828]	; (8001640 <__aeabi_ddiv+0x37c>)
 8001302:	00ed      	lsls	r5, r5, #3
 8001304:	469b      	mov	fp, r3
 8001306:	2300      	movs	r3, #0
 8001308:	4699      	mov	r9, r3
 800130a:	4483      	add	fp, r0
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	033c      	lsls	r4, r7, #12
 8001310:	007b      	lsls	r3, r7, #1
 8001312:	4650      	mov	r0, sl
 8001314:	0b24      	lsrs	r4, r4, #12
 8001316:	0d5b      	lsrs	r3, r3, #21
 8001318:	0fff      	lsrs	r7, r7, #31
 800131a:	2b00      	cmp	r3, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_ddiv+0x5c>
 800131e:	e11f      	b.n	8001560 <__aeabi_ddiv+0x29c>
 8001320:	4ac6      	ldr	r2, [pc, #792]	; (800163c <__aeabi_ddiv+0x378>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d100      	bne.n	8001328 <__aeabi_ddiv+0x64>
 8001326:	e162      	b.n	80015ee <__aeabi_ddiv+0x32a>
 8001328:	49c5      	ldr	r1, [pc, #788]	; (8001640 <__aeabi_ddiv+0x37c>)
 800132a:	0f42      	lsrs	r2, r0, #29
 800132c:	468c      	mov	ip, r1
 800132e:	00e4      	lsls	r4, r4, #3
 8001330:	4659      	mov	r1, fp
 8001332:	4314      	orrs	r4, r2
 8001334:	2280      	movs	r2, #128	; 0x80
 8001336:	4463      	add	r3, ip
 8001338:	0412      	lsls	r2, r2, #16
 800133a:	1acb      	subs	r3, r1, r3
 800133c:	4314      	orrs	r4, r2
 800133e:	469b      	mov	fp, r3
 8001340:	00c2      	lsls	r2, r0, #3
 8001342:	2000      	movs	r0, #0
 8001344:	0033      	movs	r3, r6
 8001346:	407b      	eors	r3, r7
 8001348:	469a      	mov	sl, r3
 800134a:	464b      	mov	r3, r9
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d827      	bhi.n	80013a0 <__aeabi_ddiv+0xdc>
 8001350:	49bc      	ldr	r1, [pc, #752]	; (8001644 <__aeabi_ddiv+0x380>)
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	58cb      	ldr	r3, [r1, r3]
 8001356:	469f      	mov	pc, r3
 8001358:	46b2      	mov	sl, r6
 800135a:	9b00      	ldr	r3, [sp, #0]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d016      	beq.n	800138e <__aeabi_ddiv+0xca>
 8001360:	2b03      	cmp	r3, #3
 8001362:	d100      	bne.n	8001366 <__aeabi_ddiv+0xa2>
 8001364:	e28e      	b.n	8001884 <__aeabi_ddiv+0x5c0>
 8001366:	2b01      	cmp	r3, #1
 8001368:	d000      	beq.n	800136c <__aeabi_ddiv+0xa8>
 800136a:	e0d9      	b.n	8001520 <__aeabi_ddiv+0x25c>
 800136c:	2300      	movs	r3, #0
 800136e:	2400      	movs	r4, #0
 8001370:	2500      	movs	r5, #0
 8001372:	4652      	mov	r2, sl
 8001374:	051b      	lsls	r3, r3, #20
 8001376:	4323      	orrs	r3, r4
 8001378:	07d2      	lsls	r2, r2, #31
 800137a:	4313      	orrs	r3, r2
 800137c:	0028      	movs	r0, r5
 800137e:	0019      	movs	r1, r3
 8001380:	b005      	add	sp, #20
 8001382:	bcf0      	pop	{r4, r5, r6, r7}
 8001384:	46bb      	mov	fp, r7
 8001386:	46b2      	mov	sl, r6
 8001388:	46a9      	mov	r9, r5
 800138a:	46a0      	mov	r8, r4
 800138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800138e:	2400      	movs	r4, #0
 8001390:	2500      	movs	r5, #0
 8001392:	4baa      	ldr	r3, [pc, #680]	; (800163c <__aeabi_ddiv+0x378>)
 8001394:	e7ed      	b.n	8001372 <__aeabi_ddiv+0xae>
 8001396:	46ba      	mov	sl, r7
 8001398:	46a0      	mov	r8, r4
 800139a:	0015      	movs	r5, r2
 800139c:	9000      	str	r0, [sp, #0]
 800139e:	e7dc      	b.n	800135a <__aeabi_ddiv+0x96>
 80013a0:	4544      	cmp	r4, r8
 80013a2:	d200      	bcs.n	80013a6 <__aeabi_ddiv+0xe2>
 80013a4:	e1c7      	b.n	8001736 <__aeabi_ddiv+0x472>
 80013a6:	d100      	bne.n	80013aa <__aeabi_ddiv+0xe6>
 80013a8:	e1c2      	b.n	8001730 <__aeabi_ddiv+0x46c>
 80013aa:	2301      	movs	r3, #1
 80013ac:	425b      	negs	r3, r3
 80013ae:	469c      	mov	ip, r3
 80013b0:	002e      	movs	r6, r5
 80013b2:	4640      	mov	r0, r8
 80013b4:	2500      	movs	r5, #0
 80013b6:	44e3      	add	fp, ip
 80013b8:	0223      	lsls	r3, r4, #8
 80013ba:	0e14      	lsrs	r4, r2, #24
 80013bc:	431c      	orrs	r4, r3
 80013be:	0c1b      	lsrs	r3, r3, #16
 80013c0:	4699      	mov	r9, r3
 80013c2:	0423      	lsls	r3, r4, #16
 80013c4:	0c1f      	lsrs	r7, r3, #16
 80013c6:	0212      	lsls	r2, r2, #8
 80013c8:	4649      	mov	r1, r9
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	9701      	str	r7, [sp, #4]
 80013ce:	f7fe ff3d 	bl	800024c <__aeabi_uidivmod>
 80013d2:	0002      	movs	r2, r0
 80013d4:	437a      	muls	r2, r7
 80013d6:	040b      	lsls	r3, r1, #16
 80013d8:	0c31      	lsrs	r1, r6, #16
 80013da:	4680      	mov	r8, r0
 80013dc:	4319      	orrs	r1, r3
 80013de:	428a      	cmp	r2, r1
 80013e0:	d907      	bls.n	80013f2 <__aeabi_ddiv+0x12e>
 80013e2:	2301      	movs	r3, #1
 80013e4:	425b      	negs	r3, r3
 80013e6:	469c      	mov	ip, r3
 80013e8:	1909      	adds	r1, r1, r4
 80013ea:	44e0      	add	r8, ip
 80013ec:	428c      	cmp	r4, r1
 80013ee:	d800      	bhi.n	80013f2 <__aeabi_ddiv+0x12e>
 80013f0:	e207      	b.n	8001802 <__aeabi_ddiv+0x53e>
 80013f2:	1a88      	subs	r0, r1, r2
 80013f4:	4649      	mov	r1, r9
 80013f6:	f7fe ff29 	bl	800024c <__aeabi_uidivmod>
 80013fa:	0409      	lsls	r1, r1, #16
 80013fc:	468c      	mov	ip, r1
 80013fe:	0431      	lsls	r1, r6, #16
 8001400:	4666      	mov	r6, ip
 8001402:	9a01      	ldr	r2, [sp, #4]
 8001404:	0c09      	lsrs	r1, r1, #16
 8001406:	4342      	muls	r2, r0
 8001408:	0003      	movs	r3, r0
 800140a:	4331      	orrs	r1, r6
 800140c:	428a      	cmp	r2, r1
 800140e:	d904      	bls.n	800141a <__aeabi_ddiv+0x156>
 8001410:	1909      	adds	r1, r1, r4
 8001412:	3b01      	subs	r3, #1
 8001414:	428c      	cmp	r4, r1
 8001416:	d800      	bhi.n	800141a <__aeabi_ddiv+0x156>
 8001418:	e1ed      	b.n	80017f6 <__aeabi_ddiv+0x532>
 800141a:	1a88      	subs	r0, r1, r2
 800141c:	4642      	mov	r2, r8
 800141e:	0412      	lsls	r2, r2, #16
 8001420:	431a      	orrs	r2, r3
 8001422:	4690      	mov	r8, r2
 8001424:	4641      	mov	r1, r8
 8001426:	9b00      	ldr	r3, [sp, #0]
 8001428:	040e      	lsls	r6, r1, #16
 800142a:	0c1b      	lsrs	r3, r3, #16
 800142c:	001f      	movs	r7, r3
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	9b00      	ldr	r3, [sp, #0]
 8001432:	0c36      	lsrs	r6, r6, #16
 8001434:	041b      	lsls	r3, r3, #16
 8001436:	0c19      	lsrs	r1, r3, #16
 8001438:	000b      	movs	r3, r1
 800143a:	4373      	muls	r3, r6
 800143c:	0c12      	lsrs	r2, r2, #16
 800143e:	437e      	muls	r6, r7
 8001440:	9103      	str	r1, [sp, #12]
 8001442:	4351      	muls	r1, r2
 8001444:	437a      	muls	r2, r7
 8001446:	0c1f      	lsrs	r7, r3, #16
 8001448:	46bc      	mov	ip, r7
 800144a:	1876      	adds	r6, r6, r1
 800144c:	4466      	add	r6, ip
 800144e:	42b1      	cmp	r1, r6
 8001450:	d903      	bls.n	800145a <__aeabi_ddiv+0x196>
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	0249      	lsls	r1, r1, #9
 8001456:	468c      	mov	ip, r1
 8001458:	4462      	add	r2, ip
 800145a:	0c31      	lsrs	r1, r6, #16
 800145c:	188a      	adds	r2, r1, r2
 800145e:	0431      	lsls	r1, r6, #16
 8001460:	041e      	lsls	r6, r3, #16
 8001462:	0c36      	lsrs	r6, r6, #16
 8001464:	198e      	adds	r6, r1, r6
 8001466:	4290      	cmp	r0, r2
 8001468:	d302      	bcc.n	8001470 <__aeabi_ddiv+0x1ac>
 800146a:	d112      	bne.n	8001492 <__aeabi_ddiv+0x1ce>
 800146c:	42b5      	cmp	r5, r6
 800146e:	d210      	bcs.n	8001492 <__aeabi_ddiv+0x1ce>
 8001470:	4643      	mov	r3, r8
 8001472:	1e59      	subs	r1, r3, #1
 8001474:	9b00      	ldr	r3, [sp, #0]
 8001476:	469c      	mov	ip, r3
 8001478:	4465      	add	r5, ip
 800147a:	001f      	movs	r7, r3
 800147c:	429d      	cmp	r5, r3
 800147e:	419b      	sbcs	r3, r3
 8001480:	425b      	negs	r3, r3
 8001482:	191b      	adds	r3, r3, r4
 8001484:	18c0      	adds	r0, r0, r3
 8001486:	4284      	cmp	r4, r0
 8001488:	d200      	bcs.n	800148c <__aeabi_ddiv+0x1c8>
 800148a:	e1a0      	b.n	80017ce <__aeabi_ddiv+0x50a>
 800148c:	d100      	bne.n	8001490 <__aeabi_ddiv+0x1cc>
 800148e:	e19b      	b.n	80017c8 <__aeabi_ddiv+0x504>
 8001490:	4688      	mov	r8, r1
 8001492:	1bae      	subs	r6, r5, r6
 8001494:	42b5      	cmp	r5, r6
 8001496:	41ad      	sbcs	r5, r5
 8001498:	1a80      	subs	r0, r0, r2
 800149a:	426d      	negs	r5, r5
 800149c:	1b40      	subs	r0, r0, r5
 800149e:	4284      	cmp	r4, r0
 80014a0:	d100      	bne.n	80014a4 <__aeabi_ddiv+0x1e0>
 80014a2:	e1d5      	b.n	8001850 <__aeabi_ddiv+0x58c>
 80014a4:	4649      	mov	r1, r9
 80014a6:	f7fe fed1 	bl	800024c <__aeabi_uidivmod>
 80014aa:	9a01      	ldr	r2, [sp, #4]
 80014ac:	040b      	lsls	r3, r1, #16
 80014ae:	4342      	muls	r2, r0
 80014b0:	0c31      	lsrs	r1, r6, #16
 80014b2:	0005      	movs	r5, r0
 80014b4:	4319      	orrs	r1, r3
 80014b6:	428a      	cmp	r2, r1
 80014b8:	d900      	bls.n	80014bc <__aeabi_ddiv+0x1f8>
 80014ba:	e16c      	b.n	8001796 <__aeabi_ddiv+0x4d2>
 80014bc:	1a88      	subs	r0, r1, r2
 80014be:	4649      	mov	r1, r9
 80014c0:	f7fe fec4 	bl	800024c <__aeabi_uidivmod>
 80014c4:	9a01      	ldr	r2, [sp, #4]
 80014c6:	0436      	lsls	r6, r6, #16
 80014c8:	4342      	muls	r2, r0
 80014ca:	0409      	lsls	r1, r1, #16
 80014cc:	0c36      	lsrs	r6, r6, #16
 80014ce:	0003      	movs	r3, r0
 80014d0:	430e      	orrs	r6, r1
 80014d2:	42b2      	cmp	r2, r6
 80014d4:	d900      	bls.n	80014d8 <__aeabi_ddiv+0x214>
 80014d6:	e153      	b.n	8001780 <__aeabi_ddiv+0x4bc>
 80014d8:	9803      	ldr	r0, [sp, #12]
 80014da:	1ab6      	subs	r6, r6, r2
 80014dc:	0002      	movs	r2, r0
 80014de:	042d      	lsls	r5, r5, #16
 80014e0:	431d      	orrs	r5, r3
 80014e2:	9f02      	ldr	r7, [sp, #8]
 80014e4:	042b      	lsls	r3, r5, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	435a      	muls	r2, r3
 80014ea:	437b      	muls	r3, r7
 80014ec:	469c      	mov	ip, r3
 80014ee:	0c29      	lsrs	r1, r5, #16
 80014f0:	4348      	muls	r0, r1
 80014f2:	0c13      	lsrs	r3, r2, #16
 80014f4:	4484      	add	ip, r0
 80014f6:	4463      	add	r3, ip
 80014f8:	4379      	muls	r1, r7
 80014fa:	4298      	cmp	r0, r3
 80014fc:	d903      	bls.n	8001506 <__aeabi_ddiv+0x242>
 80014fe:	2080      	movs	r0, #128	; 0x80
 8001500:	0240      	lsls	r0, r0, #9
 8001502:	4684      	mov	ip, r0
 8001504:	4461      	add	r1, ip
 8001506:	0c18      	lsrs	r0, r3, #16
 8001508:	0412      	lsls	r2, r2, #16
 800150a:	041b      	lsls	r3, r3, #16
 800150c:	0c12      	lsrs	r2, r2, #16
 800150e:	1841      	adds	r1, r0, r1
 8001510:	189b      	adds	r3, r3, r2
 8001512:	428e      	cmp	r6, r1
 8001514:	d200      	bcs.n	8001518 <__aeabi_ddiv+0x254>
 8001516:	e0ff      	b.n	8001718 <__aeabi_ddiv+0x454>
 8001518:	d100      	bne.n	800151c <__aeabi_ddiv+0x258>
 800151a:	e0fa      	b.n	8001712 <__aeabi_ddiv+0x44e>
 800151c:	2301      	movs	r3, #1
 800151e:	431d      	orrs	r5, r3
 8001520:	4a49      	ldr	r2, [pc, #292]	; (8001648 <__aeabi_ddiv+0x384>)
 8001522:	445a      	add	r2, fp
 8001524:	2a00      	cmp	r2, #0
 8001526:	dc00      	bgt.n	800152a <__aeabi_ddiv+0x266>
 8001528:	e0aa      	b.n	8001680 <__aeabi_ddiv+0x3bc>
 800152a:	076b      	lsls	r3, r5, #29
 800152c:	d000      	beq.n	8001530 <__aeabi_ddiv+0x26c>
 800152e:	e13d      	b.n	80017ac <__aeabi_ddiv+0x4e8>
 8001530:	08ed      	lsrs	r5, r5, #3
 8001532:	4643      	mov	r3, r8
 8001534:	01db      	lsls	r3, r3, #7
 8001536:	d506      	bpl.n	8001546 <__aeabi_ddiv+0x282>
 8001538:	4642      	mov	r2, r8
 800153a:	4b44      	ldr	r3, [pc, #272]	; (800164c <__aeabi_ddiv+0x388>)
 800153c:	401a      	ands	r2, r3
 800153e:	4690      	mov	r8, r2
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	00d2      	lsls	r2, r2, #3
 8001544:	445a      	add	r2, fp
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <__aeabi_ddiv+0x38c>)
 8001548:	429a      	cmp	r2, r3
 800154a:	dd00      	ble.n	800154e <__aeabi_ddiv+0x28a>
 800154c:	e71f      	b.n	800138e <__aeabi_ddiv+0xca>
 800154e:	4643      	mov	r3, r8
 8001550:	075b      	lsls	r3, r3, #29
 8001552:	431d      	orrs	r5, r3
 8001554:	4643      	mov	r3, r8
 8001556:	0552      	lsls	r2, r2, #21
 8001558:	025c      	lsls	r4, r3, #9
 800155a:	0b24      	lsrs	r4, r4, #12
 800155c:	0d53      	lsrs	r3, r2, #21
 800155e:	e708      	b.n	8001372 <__aeabi_ddiv+0xae>
 8001560:	4652      	mov	r2, sl
 8001562:	4322      	orrs	r2, r4
 8001564:	d100      	bne.n	8001568 <__aeabi_ddiv+0x2a4>
 8001566:	e07b      	b.n	8001660 <__aeabi_ddiv+0x39c>
 8001568:	2c00      	cmp	r4, #0
 800156a:	d100      	bne.n	800156e <__aeabi_ddiv+0x2aa>
 800156c:	e0fa      	b.n	8001764 <__aeabi_ddiv+0x4a0>
 800156e:	0020      	movs	r0, r4
 8001570:	f001 f9d4 	bl	800291c <__clzsi2>
 8001574:	0002      	movs	r2, r0
 8001576:	3a0b      	subs	r2, #11
 8001578:	231d      	movs	r3, #29
 800157a:	0001      	movs	r1, r0
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	4652      	mov	r2, sl
 8001580:	3908      	subs	r1, #8
 8001582:	40da      	lsrs	r2, r3
 8001584:	408c      	lsls	r4, r1
 8001586:	4314      	orrs	r4, r2
 8001588:	4652      	mov	r2, sl
 800158a:	408a      	lsls	r2, r1
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <__aeabi_ddiv+0x390>)
 800158e:	4458      	add	r0, fp
 8001590:	469b      	mov	fp, r3
 8001592:	4483      	add	fp, r0
 8001594:	2000      	movs	r0, #0
 8001596:	e6d5      	b.n	8001344 <__aeabi_ddiv+0x80>
 8001598:	464b      	mov	r3, r9
 800159a:	4323      	orrs	r3, r4
 800159c:	4698      	mov	r8, r3
 800159e:	d044      	beq.n	800162a <__aeabi_ddiv+0x366>
 80015a0:	2c00      	cmp	r4, #0
 80015a2:	d100      	bne.n	80015a6 <__aeabi_ddiv+0x2e2>
 80015a4:	e0ce      	b.n	8001744 <__aeabi_ddiv+0x480>
 80015a6:	0020      	movs	r0, r4
 80015a8:	f001 f9b8 	bl	800291c <__clzsi2>
 80015ac:	0001      	movs	r1, r0
 80015ae:	0002      	movs	r2, r0
 80015b0:	390b      	subs	r1, #11
 80015b2:	231d      	movs	r3, #29
 80015b4:	1a5b      	subs	r3, r3, r1
 80015b6:	4649      	mov	r1, r9
 80015b8:	0010      	movs	r0, r2
 80015ba:	40d9      	lsrs	r1, r3
 80015bc:	3808      	subs	r0, #8
 80015be:	4084      	lsls	r4, r0
 80015c0:	000b      	movs	r3, r1
 80015c2:	464d      	mov	r5, r9
 80015c4:	4323      	orrs	r3, r4
 80015c6:	4698      	mov	r8, r3
 80015c8:	4085      	lsls	r5, r0
 80015ca:	4823      	ldr	r0, [pc, #140]	; (8001658 <__aeabi_ddiv+0x394>)
 80015cc:	1a83      	subs	r3, r0, r2
 80015ce:	469b      	mov	fp, r3
 80015d0:	2300      	movs	r3, #0
 80015d2:	4699      	mov	r9, r3
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	e69a      	b.n	800130e <__aeabi_ddiv+0x4a>
 80015d8:	464b      	mov	r3, r9
 80015da:	4323      	orrs	r3, r4
 80015dc:	4698      	mov	r8, r3
 80015de:	d11d      	bne.n	800161c <__aeabi_ddiv+0x358>
 80015e0:	2308      	movs	r3, #8
 80015e2:	4699      	mov	r9, r3
 80015e4:	3b06      	subs	r3, #6
 80015e6:	2500      	movs	r5, #0
 80015e8:	4683      	mov	fp, r0
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	e68f      	b.n	800130e <__aeabi_ddiv+0x4a>
 80015ee:	4652      	mov	r2, sl
 80015f0:	4322      	orrs	r2, r4
 80015f2:	d109      	bne.n	8001608 <__aeabi_ddiv+0x344>
 80015f4:	2302      	movs	r3, #2
 80015f6:	4649      	mov	r1, r9
 80015f8:	4319      	orrs	r1, r3
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <__aeabi_ddiv+0x398>)
 80015fc:	4689      	mov	r9, r1
 80015fe:	469c      	mov	ip, r3
 8001600:	2400      	movs	r4, #0
 8001602:	2002      	movs	r0, #2
 8001604:	44e3      	add	fp, ip
 8001606:	e69d      	b.n	8001344 <__aeabi_ddiv+0x80>
 8001608:	2303      	movs	r3, #3
 800160a:	464a      	mov	r2, r9
 800160c:	431a      	orrs	r2, r3
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <__aeabi_ddiv+0x398>)
 8001610:	4691      	mov	r9, r2
 8001612:	469c      	mov	ip, r3
 8001614:	4652      	mov	r2, sl
 8001616:	2003      	movs	r0, #3
 8001618:	44e3      	add	fp, ip
 800161a:	e693      	b.n	8001344 <__aeabi_ddiv+0x80>
 800161c:	230c      	movs	r3, #12
 800161e:	4699      	mov	r9, r3
 8001620:	3b09      	subs	r3, #9
 8001622:	46a0      	mov	r8, r4
 8001624:	4683      	mov	fp, r0
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	e671      	b.n	800130e <__aeabi_ddiv+0x4a>
 800162a:	2304      	movs	r3, #4
 800162c:	4699      	mov	r9, r3
 800162e:	2300      	movs	r3, #0
 8001630:	469b      	mov	fp, r3
 8001632:	3301      	adds	r3, #1
 8001634:	2500      	movs	r5, #0
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	e669      	b.n	800130e <__aeabi_ddiv+0x4a>
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	000007ff 	.word	0x000007ff
 8001640:	fffffc01 	.word	0xfffffc01
 8001644:	0800ae08 	.word	0x0800ae08
 8001648:	000003ff 	.word	0x000003ff
 800164c:	feffffff 	.word	0xfeffffff
 8001650:	000007fe 	.word	0x000007fe
 8001654:	000003f3 	.word	0x000003f3
 8001658:	fffffc0d 	.word	0xfffffc0d
 800165c:	fffff801 	.word	0xfffff801
 8001660:	4649      	mov	r1, r9
 8001662:	2301      	movs	r3, #1
 8001664:	4319      	orrs	r1, r3
 8001666:	4689      	mov	r9, r1
 8001668:	2400      	movs	r4, #0
 800166a:	2001      	movs	r0, #1
 800166c:	e66a      	b.n	8001344 <__aeabi_ddiv+0x80>
 800166e:	2300      	movs	r3, #0
 8001670:	2480      	movs	r4, #128	; 0x80
 8001672:	469a      	mov	sl, r3
 8001674:	2500      	movs	r5, #0
 8001676:	4b8a      	ldr	r3, [pc, #552]	; (80018a0 <__aeabi_ddiv+0x5dc>)
 8001678:	0324      	lsls	r4, r4, #12
 800167a:	e67a      	b.n	8001372 <__aeabi_ddiv+0xae>
 800167c:	2501      	movs	r5, #1
 800167e:	426d      	negs	r5, r5
 8001680:	2301      	movs	r3, #1
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	2b38      	cmp	r3, #56	; 0x38
 8001686:	dd00      	ble.n	800168a <__aeabi_ddiv+0x3c6>
 8001688:	e670      	b.n	800136c <__aeabi_ddiv+0xa8>
 800168a:	2b1f      	cmp	r3, #31
 800168c:	dc00      	bgt.n	8001690 <__aeabi_ddiv+0x3cc>
 800168e:	e0bf      	b.n	8001810 <__aeabi_ddiv+0x54c>
 8001690:	211f      	movs	r1, #31
 8001692:	4249      	negs	r1, r1
 8001694:	1a8a      	subs	r2, r1, r2
 8001696:	4641      	mov	r1, r8
 8001698:	40d1      	lsrs	r1, r2
 800169a:	000a      	movs	r2, r1
 800169c:	2b20      	cmp	r3, #32
 800169e:	d004      	beq.n	80016aa <__aeabi_ddiv+0x3e6>
 80016a0:	4641      	mov	r1, r8
 80016a2:	4b80      	ldr	r3, [pc, #512]	; (80018a4 <__aeabi_ddiv+0x5e0>)
 80016a4:	445b      	add	r3, fp
 80016a6:	4099      	lsls	r1, r3
 80016a8:	430d      	orrs	r5, r1
 80016aa:	1e6b      	subs	r3, r5, #1
 80016ac:	419d      	sbcs	r5, r3
 80016ae:	2307      	movs	r3, #7
 80016b0:	432a      	orrs	r2, r5
 80016b2:	001d      	movs	r5, r3
 80016b4:	2400      	movs	r4, #0
 80016b6:	4015      	ands	r5, r2
 80016b8:	4213      	tst	r3, r2
 80016ba:	d100      	bne.n	80016be <__aeabi_ddiv+0x3fa>
 80016bc:	e0d4      	b.n	8001868 <__aeabi_ddiv+0x5a4>
 80016be:	210f      	movs	r1, #15
 80016c0:	2300      	movs	r3, #0
 80016c2:	4011      	ands	r1, r2
 80016c4:	2904      	cmp	r1, #4
 80016c6:	d100      	bne.n	80016ca <__aeabi_ddiv+0x406>
 80016c8:	e0cb      	b.n	8001862 <__aeabi_ddiv+0x59e>
 80016ca:	1d11      	adds	r1, r2, #4
 80016cc:	4291      	cmp	r1, r2
 80016ce:	4192      	sbcs	r2, r2
 80016d0:	4252      	negs	r2, r2
 80016d2:	189b      	adds	r3, r3, r2
 80016d4:	000a      	movs	r2, r1
 80016d6:	0219      	lsls	r1, r3, #8
 80016d8:	d400      	bmi.n	80016dc <__aeabi_ddiv+0x418>
 80016da:	e0c2      	b.n	8001862 <__aeabi_ddiv+0x59e>
 80016dc:	2301      	movs	r3, #1
 80016de:	2400      	movs	r4, #0
 80016e0:	2500      	movs	r5, #0
 80016e2:	e646      	b.n	8001372 <__aeabi_ddiv+0xae>
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	4641      	mov	r1, r8
 80016e8:	031b      	lsls	r3, r3, #12
 80016ea:	4219      	tst	r1, r3
 80016ec:	d008      	beq.n	8001700 <__aeabi_ddiv+0x43c>
 80016ee:	421c      	tst	r4, r3
 80016f0:	d106      	bne.n	8001700 <__aeabi_ddiv+0x43c>
 80016f2:	431c      	orrs	r4, r3
 80016f4:	0324      	lsls	r4, r4, #12
 80016f6:	46ba      	mov	sl, r7
 80016f8:	0015      	movs	r5, r2
 80016fa:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <__aeabi_ddiv+0x5dc>)
 80016fc:	0b24      	lsrs	r4, r4, #12
 80016fe:	e638      	b.n	8001372 <__aeabi_ddiv+0xae>
 8001700:	2480      	movs	r4, #128	; 0x80
 8001702:	4643      	mov	r3, r8
 8001704:	0324      	lsls	r4, r4, #12
 8001706:	431c      	orrs	r4, r3
 8001708:	0324      	lsls	r4, r4, #12
 800170a:	46b2      	mov	sl, r6
 800170c:	4b64      	ldr	r3, [pc, #400]	; (80018a0 <__aeabi_ddiv+0x5dc>)
 800170e:	0b24      	lsrs	r4, r4, #12
 8001710:	e62f      	b.n	8001372 <__aeabi_ddiv+0xae>
 8001712:	2b00      	cmp	r3, #0
 8001714:	d100      	bne.n	8001718 <__aeabi_ddiv+0x454>
 8001716:	e703      	b.n	8001520 <__aeabi_ddiv+0x25c>
 8001718:	19a6      	adds	r6, r4, r6
 800171a:	1e68      	subs	r0, r5, #1
 800171c:	42a6      	cmp	r6, r4
 800171e:	d200      	bcs.n	8001722 <__aeabi_ddiv+0x45e>
 8001720:	e08d      	b.n	800183e <__aeabi_ddiv+0x57a>
 8001722:	428e      	cmp	r6, r1
 8001724:	d200      	bcs.n	8001728 <__aeabi_ddiv+0x464>
 8001726:	e0a3      	b.n	8001870 <__aeabi_ddiv+0x5ac>
 8001728:	d100      	bne.n	800172c <__aeabi_ddiv+0x468>
 800172a:	e0b3      	b.n	8001894 <__aeabi_ddiv+0x5d0>
 800172c:	0005      	movs	r5, r0
 800172e:	e6f5      	b.n	800151c <__aeabi_ddiv+0x258>
 8001730:	42aa      	cmp	r2, r5
 8001732:	d900      	bls.n	8001736 <__aeabi_ddiv+0x472>
 8001734:	e639      	b.n	80013aa <__aeabi_ddiv+0xe6>
 8001736:	4643      	mov	r3, r8
 8001738:	07de      	lsls	r6, r3, #31
 800173a:	0858      	lsrs	r0, r3, #1
 800173c:	086b      	lsrs	r3, r5, #1
 800173e:	431e      	orrs	r6, r3
 8001740:	07ed      	lsls	r5, r5, #31
 8001742:	e639      	b.n	80013b8 <__aeabi_ddiv+0xf4>
 8001744:	4648      	mov	r0, r9
 8001746:	f001 f8e9 	bl	800291c <__clzsi2>
 800174a:	0001      	movs	r1, r0
 800174c:	0002      	movs	r2, r0
 800174e:	3115      	adds	r1, #21
 8001750:	3220      	adds	r2, #32
 8001752:	291c      	cmp	r1, #28
 8001754:	dc00      	bgt.n	8001758 <__aeabi_ddiv+0x494>
 8001756:	e72c      	b.n	80015b2 <__aeabi_ddiv+0x2ee>
 8001758:	464b      	mov	r3, r9
 800175a:	3808      	subs	r0, #8
 800175c:	4083      	lsls	r3, r0
 800175e:	2500      	movs	r5, #0
 8001760:	4698      	mov	r8, r3
 8001762:	e732      	b.n	80015ca <__aeabi_ddiv+0x306>
 8001764:	f001 f8da 	bl	800291c <__clzsi2>
 8001768:	0003      	movs	r3, r0
 800176a:	001a      	movs	r2, r3
 800176c:	3215      	adds	r2, #21
 800176e:	3020      	adds	r0, #32
 8001770:	2a1c      	cmp	r2, #28
 8001772:	dc00      	bgt.n	8001776 <__aeabi_ddiv+0x4b2>
 8001774:	e700      	b.n	8001578 <__aeabi_ddiv+0x2b4>
 8001776:	4654      	mov	r4, sl
 8001778:	3b08      	subs	r3, #8
 800177a:	2200      	movs	r2, #0
 800177c:	409c      	lsls	r4, r3
 800177e:	e705      	b.n	800158c <__aeabi_ddiv+0x2c8>
 8001780:	1936      	adds	r6, r6, r4
 8001782:	3b01      	subs	r3, #1
 8001784:	42b4      	cmp	r4, r6
 8001786:	d900      	bls.n	800178a <__aeabi_ddiv+0x4c6>
 8001788:	e6a6      	b.n	80014d8 <__aeabi_ddiv+0x214>
 800178a:	42b2      	cmp	r2, r6
 800178c:	d800      	bhi.n	8001790 <__aeabi_ddiv+0x4cc>
 800178e:	e6a3      	b.n	80014d8 <__aeabi_ddiv+0x214>
 8001790:	1e83      	subs	r3, r0, #2
 8001792:	1936      	adds	r6, r6, r4
 8001794:	e6a0      	b.n	80014d8 <__aeabi_ddiv+0x214>
 8001796:	1909      	adds	r1, r1, r4
 8001798:	3d01      	subs	r5, #1
 800179a:	428c      	cmp	r4, r1
 800179c:	d900      	bls.n	80017a0 <__aeabi_ddiv+0x4dc>
 800179e:	e68d      	b.n	80014bc <__aeabi_ddiv+0x1f8>
 80017a0:	428a      	cmp	r2, r1
 80017a2:	d800      	bhi.n	80017a6 <__aeabi_ddiv+0x4e2>
 80017a4:	e68a      	b.n	80014bc <__aeabi_ddiv+0x1f8>
 80017a6:	1e85      	subs	r5, r0, #2
 80017a8:	1909      	adds	r1, r1, r4
 80017aa:	e687      	b.n	80014bc <__aeabi_ddiv+0x1f8>
 80017ac:	230f      	movs	r3, #15
 80017ae:	402b      	ands	r3, r5
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d100      	bne.n	80017b6 <__aeabi_ddiv+0x4f2>
 80017b4:	e6bc      	b.n	8001530 <__aeabi_ddiv+0x26c>
 80017b6:	2305      	movs	r3, #5
 80017b8:	425b      	negs	r3, r3
 80017ba:	42ab      	cmp	r3, r5
 80017bc:	419b      	sbcs	r3, r3
 80017be:	3504      	adds	r5, #4
 80017c0:	425b      	negs	r3, r3
 80017c2:	08ed      	lsrs	r5, r5, #3
 80017c4:	4498      	add	r8, r3
 80017c6:	e6b4      	b.n	8001532 <__aeabi_ddiv+0x26e>
 80017c8:	42af      	cmp	r7, r5
 80017ca:	d900      	bls.n	80017ce <__aeabi_ddiv+0x50a>
 80017cc:	e660      	b.n	8001490 <__aeabi_ddiv+0x1cc>
 80017ce:	4282      	cmp	r2, r0
 80017d0:	d804      	bhi.n	80017dc <__aeabi_ddiv+0x518>
 80017d2:	d000      	beq.n	80017d6 <__aeabi_ddiv+0x512>
 80017d4:	e65c      	b.n	8001490 <__aeabi_ddiv+0x1cc>
 80017d6:	42ae      	cmp	r6, r5
 80017d8:	d800      	bhi.n	80017dc <__aeabi_ddiv+0x518>
 80017da:	e659      	b.n	8001490 <__aeabi_ddiv+0x1cc>
 80017dc:	2302      	movs	r3, #2
 80017de:	425b      	negs	r3, r3
 80017e0:	469c      	mov	ip, r3
 80017e2:	9b00      	ldr	r3, [sp, #0]
 80017e4:	44e0      	add	r8, ip
 80017e6:	469c      	mov	ip, r3
 80017e8:	4465      	add	r5, ip
 80017ea:	429d      	cmp	r5, r3
 80017ec:	419b      	sbcs	r3, r3
 80017ee:	425b      	negs	r3, r3
 80017f0:	191b      	adds	r3, r3, r4
 80017f2:	18c0      	adds	r0, r0, r3
 80017f4:	e64d      	b.n	8001492 <__aeabi_ddiv+0x1ce>
 80017f6:	428a      	cmp	r2, r1
 80017f8:	d800      	bhi.n	80017fc <__aeabi_ddiv+0x538>
 80017fa:	e60e      	b.n	800141a <__aeabi_ddiv+0x156>
 80017fc:	1e83      	subs	r3, r0, #2
 80017fe:	1909      	adds	r1, r1, r4
 8001800:	e60b      	b.n	800141a <__aeabi_ddiv+0x156>
 8001802:	428a      	cmp	r2, r1
 8001804:	d800      	bhi.n	8001808 <__aeabi_ddiv+0x544>
 8001806:	e5f4      	b.n	80013f2 <__aeabi_ddiv+0x12e>
 8001808:	1e83      	subs	r3, r0, #2
 800180a:	4698      	mov	r8, r3
 800180c:	1909      	adds	r1, r1, r4
 800180e:	e5f0      	b.n	80013f2 <__aeabi_ddiv+0x12e>
 8001810:	4925      	ldr	r1, [pc, #148]	; (80018a8 <__aeabi_ddiv+0x5e4>)
 8001812:	0028      	movs	r0, r5
 8001814:	4459      	add	r1, fp
 8001816:	408d      	lsls	r5, r1
 8001818:	4642      	mov	r2, r8
 800181a:	408a      	lsls	r2, r1
 800181c:	1e69      	subs	r1, r5, #1
 800181e:	418d      	sbcs	r5, r1
 8001820:	4641      	mov	r1, r8
 8001822:	40d8      	lsrs	r0, r3
 8001824:	40d9      	lsrs	r1, r3
 8001826:	4302      	orrs	r2, r0
 8001828:	432a      	orrs	r2, r5
 800182a:	000b      	movs	r3, r1
 800182c:	0751      	lsls	r1, r2, #29
 800182e:	d100      	bne.n	8001832 <__aeabi_ddiv+0x56e>
 8001830:	e751      	b.n	80016d6 <__aeabi_ddiv+0x412>
 8001832:	210f      	movs	r1, #15
 8001834:	4011      	ands	r1, r2
 8001836:	2904      	cmp	r1, #4
 8001838:	d000      	beq.n	800183c <__aeabi_ddiv+0x578>
 800183a:	e746      	b.n	80016ca <__aeabi_ddiv+0x406>
 800183c:	e74b      	b.n	80016d6 <__aeabi_ddiv+0x412>
 800183e:	0005      	movs	r5, r0
 8001840:	428e      	cmp	r6, r1
 8001842:	d000      	beq.n	8001846 <__aeabi_ddiv+0x582>
 8001844:	e66a      	b.n	800151c <__aeabi_ddiv+0x258>
 8001846:	9a00      	ldr	r2, [sp, #0]
 8001848:	4293      	cmp	r3, r2
 800184a:	d000      	beq.n	800184e <__aeabi_ddiv+0x58a>
 800184c:	e666      	b.n	800151c <__aeabi_ddiv+0x258>
 800184e:	e667      	b.n	8001520 <__aeabi_ddiv+0x25c>
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <__aeabi_ddiv+0x5e8>)
 8001852:	445a      	add	r2, fp
 8001854:	2a00      	cmp	r2, #0
 8001856:	dc00      	bgt.n	800185a <__aeabi_ddiv+0x596>
 8001858:	e710      	b.n	800167c <__aeabi_ddiv+0x3b8>
 800185a:	2301      	movs	r3, #1
 800185c:	2500      	movs	r5, #0
 800185e:	4498      	add	r8, r3
 8001860:	e667      	b.n	8001532 <__aeabi_ddiv+0x26e>
 8001862:	075d      	lsls	r5, r3, #29
 8001864:	025b      	lsls	r3, r3, #9
 8001866:	0b1c      	lsrs	r4, r3, #12
 8001868:	08d2      	lsrs	r2, r2, #3
 800186a:	2300      	movs	r3, #0
 800186c:	4315      	orrs	r5, r2
 800186e:	e580      	b.n	8001372 <__aeabi_ddiv+0xae>
 8001870:	9800      	ldr	r0, [sp, #0]
 8001872:	3d02      	subs	r5, #2
 8001874:	0042      	lsls	r2, r0, #1
 8001876:	4282      	cmp	r2, r0
 8001878:	41bf      	sbcs	r7, r7
 800187a:	427f      	negs	r7, r7
 800187c:	193c      	adds	r4, r7, r4
 800187e:	1936      	adds	r6, r6, r4
 8001880:	9200      	str	r2, [sp, #0]
 8001882:	e7dd      	b.n	8001840 <__aeabi_ddiv+0x57c>
 8001884:	2480      	movs	r4, #128	; 0x80
 8001886:	4643      	mov	r3, r8
 8001888:	0324      	lsls	r4, r4, #12
 800188a:	431c      	orrs	r4, r3
 800188c:	0324      	lsls	r4, r4, #12
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__aeabi_ddiv+0x5dc>)
 8001890:	0b24      	lsrs	r4, r4, #12
 8001892:	e56e      	b.n	8001372 <__aeabi_ddiv+0xae>
 8001894:	9a00      	ldr	r2, [sp, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d3ea      	bcc.n	8001870 <__aeabi_ddiv+0x5ac>
 800189a:	0005      	movs	r5, r0
 800189c:	e7d3      	b.n	8001846 <__aeabi_ddiv+0x582>
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	000007ff 	.word	0x000007ff
 80018a4:	0000043e 	.word	0x0000043e
 80018a8:	0000041e 	.word	0x0000041e
 80018ac:	000003ff 	.word	0x000003ff

080018b0 <__eqdf2>:
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b2:	464e      	mov	r6, r9
 80018b4:	4645      	mov	r5, r8
 80018b6:	46de      	mov	lr, fp
 80018b8:	4657      	mov	r7, sl
 80018ba:	4690      	mov	r8, r2
 80018bc:	b5e0      	push	{r5, r6, r7, lr}
 80018be:	0017      	movs	r7, r2
 80018c0:	031a      	lsls	r2, r3, #12
 80018c2:	0b12      	lsrs	r2, r2, #12
 80018c4:	0005      	movs	r5, r0
 80018c6:	4684      	mov	ip, r0
 80018c8:	4819      	ldr	r0, [pc, #100]	; (8001930 <__eqdf2+0x80>)
 80018ca:	030e      	lsls	r6, r1, #12
 80018cc:	004c      	lsls	r4, r1, #1
 80018ce:	4691      	mov	r9, r2
 80018d0:	005a      	lsls	r2, r3, #1
 80018d2:	0fdb      	lsrs	r3, r3, #31
 80018d4:	469b      	mov	fp, r3
 80018d6:	0b36      	lsrs	r6, r6, #12
 80018d8:	0d64      	lsrs	r4, r4, #21
 80018da:	0fc9      	lsrs	r1, r1, #31
 80018dc:	0d52      	lsrs	r2, r2, #21
 80018de:	4284      	cmp	r4, r0
 80018e0:	d019      	beq.n	8001916 <__eqdf2+0x66>
 80018e2:	4282      	cmp	r2, r0
 80018e4:	d010      	beq.n	8001908 <__eqdf2+0x58>
 80018e6:	2001      	movs	r0, #1
 80018e8:	4294      	cmp	r4, r2
 80018ea:	d10e      	bne.n	800190a <__eqdf2+0x5a>
 80018ec:	454e      	cmp	r6, r9
 80018ee:	d10c      	bne.n	800190a <__eqdf2+0x5a>
 80018f0:	2001      	movs	r0, #1
 80018f2:	45c4      	cmp	ip, r8
 80018f4:	d109      	bne.n	800190a <__eqdf2+0x5a>
 80018f6:	4559      	cmp	r1, fp
 80018f8:	d017      	beq.n	800192a <__eqdf2+0x7a>
 80018fa:	2c00      	cmp	r4, #0
 80018fc:	d105      	bne.n	800190a <__eqdf2+0x5a>
 80018fe:	0030      	movs	r0, r6
 8001900:	4328      	orrs	r0, r5
 8001902:	1e43      	subs	r3, r0, #1
 8001904:	4198      	sbcs	r0, r3
 8001906:	e000      	b.n	800190a <__eqdf2+0x5a>
 8001908:	2001      	movs	r0, #1
 800190a:	bcf0      	pop	{r4, r5, r6, r7}
 800190c:	46bb      	mov	fp, r7
 800190e:	46b2      	mov	sl, r6
 8001910:	46a9      	mov	r9, r5
 8001912:	46a0      	mov	r8, r4
 8001914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001916:	0033      	movs	r3, r6
 8001918:	2001      	movs	r0, #1
 800191a:	432b      	orrs	r3, r5
 800191c:	d1f5      	bne.n	800190a <__eqdf2+0x5a>
 800191e:	42a2      	cmp	r2, r4
 8001920:	d1f3      	bne.n	800190a <__eqdf2+0x5a>
 8001922:	464b      	mov	r3, r9
 8001924:	433b      	orrs	r3, r7
 8001926:	d1f0      	bne.n	800190a <__eqdf2+0x5a>
 8001928:	e7e2      	b.n	80018f0 <__eqdf2+0x40>
 800192a:	2000      	movs	r0, #0
 800192c:	e7ed      	b.n	800190a <__eqdf2+0x5a>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	000007ff 	.word	0x000007ff

08001934 <__gedf2>:
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	4647      	mov	r7, r8
 8001938:	46ce      	mov	lr, r9
 800193a:	0004      	movs	r4, r0
 800193c:	0018      	movs	r0, r3
 800193e:	0016      	movs	r6, r2
 8001940:	031b      	lsls	r3, r3, #12
 8001942:	0b1b      	lsrs	r3, r3, #12
 8001944:	4d2d      	ldr	r5, [pc, #180]	; (80019fc <__gedf2+0xc8>)
 8001946:	004a      	lsls	r2, r1, #1
 8001948:	4699      	mov	r9, r3
 800194a:	b580      	push	{r7, lr}
 800194c:	0043      	lsls	r3, r0, #1
 800194e:	030f      	lsls	r7, r1, #12
 8001950:	46a4      	mov	ip, r4
 8001952:	46b0      	mov	r8, r6
 8001954:	0b3f      	lsrs	r7, r7, #12
 8001956:	0d52      	lsrs	r2, r2, #21
 8001958:	0fc9      	lsrs	r1, r1, #31
 800195a:	0d5b      	lsrs	r3, r3, #21
 800195c:	0fc0      	lsrs	r0, r0, #31
 800195e:	42aa      	cmp	r2, r5
 8001960:	d021      	beq.n	80019a6 <__gedf2+0x72>
 8001962:	42ab      	cmp	r3, r5
 8001964:	d013      	beq.n	800198e <__gedf2+0x5a>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d122      	bne.n	80019b0 <__gedf2+0x7c>
 800196a:	433c      	orrs	r4, r7
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <__gedf2+0x42>
 8001970:	464d      	mov	r5, r9
 8001972:	432e      	orrs	r6, r5
 8001974:	d022      	beq.n	80019bc <__gedf2+0x88>
 8001976:	2c00      	cmp	r4, #0
 8001978:	d010      	beq.n	800199c <__gedf2+0x68>
 800197a:	4281      	cmp	r1, r0
 800197c:	d022      	beq.n	80019c4 <__gedf2+0x90>
 800197e:	2002      	movs	r0, #2
 8001980:	3901      	subs	r1, #1
 8001982:	4008      	ands	r0, r1
 8001984:	3801      	subs	r0, #1
 8001986:	bcc0      	pop	{r6, r7}
 8001988:	46b9      	mov	r9, r7
 800198a:	46b0      	mov	r8, r6
 800198c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198e:	464d      	mov	r5, r9
 8001990:	432e      	orrs	r6, r5
 8001992:	d129      	bne.n	80019e8 <__gedf2+0xb4>
 8001994:	2a00      	cmp	r2, #0
 8001996:	d1f0      	bne.n	800197a <__gedf2+0x46>
 8001998:	433c      	orrs	r4, r7
 800199a:	d1ee      	bne.n	800197a <__gedf2+0x46>
 800199c:	2800      	cmp	r0, #0
 800199e:	d1f2      	bne.n	8001986 <__gedf2+0x52>
 80019a0:	2001      	movs	r0, #1
 80019a2:	4240      	negs	r0, r0
 80019a4:	e7ef      	b.n	8001986 <__gedf2+0x52>
 80019a6:	003d      	movs	r5, r7
 80019a8:	4325      	orrs	r5, r4
 80019aa:	d11d      	bne.n	80019e8 <__gedf2+0xb4>
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d0ee      	beq.n	800198e <__gedf2+0x5a>
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1e2      	bne.n	800197a <__gedf2+0x46>
 80019b4:	464c      	mov	r4, r9
 80019b6:	4326      	orrs	r6, r4
 80019b8:	d1df      	bne.n	800197a <__gedf2+0x46>
 80019ba:	e7e0      	b.n	800197e <__gedf2+0x4a>
 80019bc:	2000      	movs	r0, #0
 80019be:	2c00      	cmp	r4, #0
 80019c0:	d0e1      	beq.n	8001986 <__gedf2+0x52>
 80019c2:	e7dc      	b.n	800197e <__gedf2+0x4a>
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dc0a      	bgt.n	80019de <__gedf2+0xaa>
 80019c8:	dbe8      	blt.n	800199c <__gedf2+0x68>
 80019ca:	454f      	cmp	r7, r9
 80019cc:	d8d7      	bhi.n	800197e <__gedf2+0x4a>
 80019ce:	d00e      	beq.n	80019ee <__gedf2+0xba>
 80019d0:	2000      	movs	r0, #0
 80019d2:	454f      	cmp	r7, r9
 80019d4:	d2d7      	bcs.n	8001986 <__gedf2+0x52>
 80019d6:	2900      	cmp	r1, #0
 80019d8:	d0e2      	beq.n	80019a0 <__gedf2+0x6c>
 80019da:	0008      	movs	r0, r1
 80019dc:	e7d3      	b.n	8001986 <__gedf2+0x52>
 80019de:	4243      	negs	r3, r0
 80019e0:	4158      	adcs	r0, r3
 80019e2:	0040      	lsls	r0, r0, #1
 80019e4:	3801      	subs	r0, #1
 80019e6:	e7ce      	b.n	8001986 <__gedf2+0x52>
 80019e8:	2002      	movs	r0, #2
 80019ea:	4240      	negs	r0, r0
 80019ec:	e7cb      	b.n	8001986 <__gedf2+0x52>
 80019ee:	45c4      	cmp	ip, r8
 80019f0:	d8c5      	bhi.n	800197e <__gedf2+0x4a>
 80019f2:	2000      	movs	r0, #0
 80019f4:	45c4      	cmp	ip, r8
 80019f6:	d2c6      	bcs.n	8001986 <__gedf2+0x52>
 80019f8:	e7ed      	b.n	80019d6 <__gedf2+0xa2>
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	000007ff 	.word	0x000007ff

08001a00 <__ledf2>:
 8001a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a02:	4647      	mov	r7, r8
 8001a04:	46ce      	mov	lr, r9
 8001a06:	0004      	movs	r4, r0
 8001a08:	0018      	movs	r0, r3
 8001a0a:	0016      	movs	r6, r2
 8001a0c:	031b      	lsls	r3, r3, #12
 8001a0e:	0b1b      	lsrs	r3, r3, #12
 8001a10:	4d2c      	ldr	r5, [pc, #176]	; (8001ac4 <__ledf2+0xc4>)
 8001a12:	004a      	lsls	r2, r1, #1
 8001a14:	4699      	mov	r9, r3
 8001a16:	b580      	push	{r7, lr}
 8001a18:	0043      	lsls	r3, r0, #1
 8001a1a:	030f      	lsls	r7, r1, #12
 8001a1c:	46a4      	mov	ip, r4
 8001a1e:	46b0      	mov	r8, r6
 8001a20:	0b3f      	lsrs	r7, r7, #12
 8001a22:	0d52      	lsrs	r2, r2, #21
 8001a24:	0fc9      	lsrs	r1, r1, #31
 8001a26:	0d5b      	lsrs	r3, r3, #21
 8001a28:	0fc0      	lsrs	r0, r0, #31
 8001a2a:	42aa      	cmp	r2, r5
 8001a2c:	d00d      	beq.n	8001a4a <__ledf2+0x4a>
 8001a2e:	42ab      	cmp	r3, r5
 8001a30:	d010      	beq.n	8001a54 <__ledf2+0x54>
 8001a32:	2a00      	cmp	r2, #0
 8001a34:	d127      	bne.n	8001a86 <__ledf2+0x86>
 8001a36:	433c      	orrs	r4, r7
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d111      	bne.n	8001a60 <__ledf2+0x60>
 8001a3c:	464d      	mov	r5, r9
 8001a3e:	432e      	orrs	r6, r5
 8001a40:	d10e      	bne.n	8001a60 <__ledf2+0x60>
 8001a42:	2000      	movs	r0, #0
 8001a44:	2c00      	cmp	r4, #0
 8001a46:	d015      	beq.n	8001a74 <__ledf2+0x74>
 8001a48:	e00e      	b.n	8001a68 <__ledf2+0x68>
 8001a4a:	003d      	movs	r5, r7
 8001a4c:	4325      	orrs	r5, r4
 8001a4e:	d110      	bne.n	8001a72 <__ledf2+0x72>
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d118      	bne.n	8001a86 <__ledf2+0x86>
 8001a54:	464d      	mov	r5, r9
 8001a56:	432e      	orrs	r6, r5
 8001a58:	d10b      	bne.n	8001a72 <__ledf2+0x72>
 8001a5a:	2a00      	cmp	r2, #0
 8001a5c:	d102      	bne.n	8001a64 <__ledf2+0x64>
 8001a5e:	433c      	orrs	r4, r7
 8001a60:	2c00      	cmp	r4, #0
 8001a62:	d00b      	beq.n	8001a7c <__ledf2+0x7c>
 8001a64:	4281      	cmp	r1, r0
 8001a66:	d014      	beq.n	8001a92 <__ledf2+0x92>
 8001a68:	2002      	movs	r0, #2
 8001a6a:	3901      	subs	r1, #1
 8001a6c:	4008      	ands	r0, r1
 8001a6e:	3801      	subs	r0, #1
 8001a70:	e000      	b.n	8001a74 <__ledf2+0x74>
 8001a72:	2002      	movs	r0, #2
 8001a74:	bcc0      	pop	{r6, r7}
 8001a76:	46b9      	mov	r9, r7
 8001a78:	46b0      	mov	r8, r6
 8001a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	d1f9      	bne.n	8001a74 <__ledf2+0x74>
 8001a80:	2001      	movs	r0, #1
 8001a82:	4240      	negs	r0, r0
 8001a84:	e7f6      	b.n	8001a74 <__ledf2+0x74>
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ec      	bne.n	8001a64 <__ledf2+0x64>
 8001a8a:	464c      	mov	r4, r9
 8001a8c:	4326      	orrs	r6, r4
 8001a8e:	d1e9      	bne.n	8001a64 <__ledf2+0x64>
 8001a90:	e7ea      	b.n	8001a68 <__ledf2+0x68>
 8001a92:	429a      	cmp	r2, r3
 8001a94:	dd04      	ble.n	8001aa0 <__ledf2+0xa0>
 8001a96:	4243      	negs	r3, r0
 8001a98:	4158      	adcs	r0, r3
 8001a9a:	0040      	lsls	r0, r0, #1
 8001a9c:	3801      	subs	r0, #1
 8001a9e:	e7e9      	b.n	8001a74 <__ledf2+0x74>
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbeb      	blt.n	8001a7c <__ledf2+0x7c>
 8001aa4:	454f      	cmp	r7, r9
 8001aa6:	d8df      	bhi.n	8001a68 <__ledf2+0x68>
 8001aa8:	d006      	beq.n	8001ab8 <__ledf2+0xb8>
 8001aaa:	2000      	movs	r0, #0
 8001aac:	454f      	cmp	r7, r9
 8001aae:	d2e1      	bcs.n	8001a74 <__ledf2+0x74>
 8001ab0:	2900      	cmp	r1, #0
 8001ab2:	d0e5      	beq.n	8001a80 <__ledf2+0x80>
 8001ab4:	0008      	movs	r0, r1
 8001ab6:	e7dd      	b.n	8001a74 <__ledf2+0x74>
 8001ab8:	45c4      	cmp	ip, r8
 8001aba:	d8d5      	bhi.n	8001a68 <__ledf2+0x68>
 8001abc:	2000      	movs	r0, #0
 8001abe:	45c4      	cmp	ip, r8
 8001ac0:	d2d8      	bcs.n	8001a74 <__ledf2+0x74>
 8001ac2:	e7f5      	b.n	8001ab0 <__ledf2+0xb0>
 8001ac4:	000007ff 	.word	0x000007ff

08001ac8 <__aeabi_dmul>:
 8001ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aca:	4657      	mov	r7, sl
 8001acc:	464e      	mov	r6, r9
 8001ace:	4645      	mov	r5, r8
 8001ad0:	46de      	mov	lr, fp
 8001ad2:	b5e0      	push	{r5, r6, r7, lr}
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	030c      	lsls	r4, r1, #12
 8001ad8:	004b      	lsls	r3, r1, #1
 8001ada:	0006      	movs	r6, r0
 8001adc:	4692      	mov	sl, r2
 8001ade:	b087      	sub	sp, #28
 8001ae0:	0b24      	lsrs	r4, r4, #12
 8001ae2:	0d5b      	lsrs	r3, r3, #21
 8001ae4:	0fcf      	lsrs	r7, r1, #31
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dmul+0x24>
 8001aea:	e15c      	b.n	8001da6 <__aeabi_dmul+0x2de>
 8001aec:	4ad9      	ldr	r2, [pc, #868]	; (8001e54 <__aeabi_dmul+0x38c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dmul+0x2c>
 8001af2:	e175      	b.n	8001de0 <__aeabi_dmul+0x318>
 8001af4:	0f42      	lsrs	r2, r0, #29
 8001af6:	00e4      	lsls	r4, r4, #3
 8001af8:	4314      	orrs	r4, r2
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	0412      	lsls	r2, r2, #16
 8001afe:	4314      	orrs	r4, r2
 8001b00:	4ad5      	ldr	r2, [pc, #852]	; (8001e58 <__aeabi_dmul+0x390>)
 8001b02:	00c5      	lsls	r5, r0, #3
 8001b04:	4694      	mov	ip, r2
 8001b06:	4463      	add	r3, ip
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	4699      	mov	r9, r3
 8001b0e:	469b      	mov	fp, r3
 8001b10:	4643      	mov	r3, r8
 8001b12:	4642      	mov	r2, r8
 8001b14:	031e      	lsls	r6, r3, #12
 8001b16:	0fd2      	lsrs	r2, r2, #31
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4650      	mov	r0, sl
 8001b1c:	4690      	mov	r8, r2
 8001b1e:	0b36      	lsrs	r6, r6, #12
 8001b20:	0d5b      	lsrs	r3, r3, #21
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dmul+0x5e>
 8001b24:	e120      	b.n	8001d68 <__aeabi_dmul+0x2a0>
 8001b26:	4acb      	ldr	r2, [pc, #812]	; (8001e54 <__aeabi_dmul+0x38c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dmul+0x66>
 8001b2c:	e162      	b.n	8001df4 <__aeabi_dmul+0x32c>
 8001b2e:	49ca      	ldr	r1, [pc, #808]	; (8001e58 <__aeabi_dmul+0x390>)
 8001b30:	0f42      	lsrs	r2, r0, #29
 8001b32:	468c      	mov	ip, r1
 8001b34:	9900      	ldr	r1, [sp, #0]
 8001b36:	4463      	add	r3, ip
 8001b38:	00f6      	lsls	r6, r6, #3
 8001b3a:	468c      	mov	ip, r1
 8001b3c:	4316      	orrs	r6, r2
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	449c      	add	ip, r3
 8001b42:	0412      	lsls	r2, r2, #16
 8001b44:	4663      	mov	r3, ip
 8001b46:	4316      	orrs	r6, r2
 8001b48:	00c2      	lsls	r2, r0, #3
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	9900      	ldr	r1, [sp, #0]
 8001b50:	4643      	mov	r3, r8
 8001b52:	3101      	adds	r1, #1
 8001b54:	468c      	mov	ip, r1
 8001b56:	4649      	mov	r1, r9
 8001b58:	407b      	eors	r3, r7
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	290f      	cmp	r1, #15
 8001b5e:	d826      	bhi.n	8001bae <__aeabi_dmul+0xe6>
 8001b60:	4bbe      	ldr	r3, [pc, #760]	; (8001e5c <__aeabi_dmul+0x394>)
 8001b62:	0089      	lsls	r1, r1, #2
 8001b64:	5859      	ldr	r1, [r3, r1]
 8001b66:	468f      	mov	pc, r1
 8001b68:	4643      	mov	r3, r8
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	0034      	movs	r4, r6
 8001b6e:	0015      	movs	r5, r2
 8001b70:	4683      	mov	fp, r0
 8001b72:	465b      	mov	r3, fp
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d016      	beq.n	8001ba6 <__aeabi_dmul+0xde>
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dmul+0xb6>
 8001b7c:	e203      	b.n	8001f86 <__aeabi_dmul+0x4be>
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d000      	beq.n	8001b84 <__aeabi_dmul+0xbc>
 8001b82:	e0cd      	b.n	8001d20 <__aeabi_dmul+0x258>
 8001b84:	2200      	movs	r2, #0
 8001b86:	2400      	movs	r4, #0
 8001b88:	2500      	movs	r5, #0
 8001b8a:	9b01      	ldr	r3, [sp, #4]
 8001b8c:	0512      	lsls	r2, r2, #20
 8001b8e:	4322      	orrs	r2, r4
 8001b90:	07db      	lsls	r3, r3, #31
 8001b92:	431a      	orrs	r2, r3
 8001b94:	0028      	movs	r0, r5
 8001b96:	0011      	movs	r1, r2
 8001b98:	b007      	add	sp, #28
 8001b9a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b9c:	46bb      	mov	fp, r7
 8001b9e:	46b2      	mov	sl, r6
 8001ba0:	46a9      	mov	r9, r5
 8001ba2:	46a0      	mov	r8, r4
 8001ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba6:	2400      	movs	r4, #0
 8001ba8:	2500      	movs	r5, #0
 8001baa:	4aaa      	ldr	r2, [pc, #680]	; (8001e54 <__aeabi_dmul+0x38c>)
 8001bac:	e7ed      	b.n	8001b8a <__aeabi_dmul+0xc2>
 8001bae:	0c28      	lsrs	r0, r5, #16
 8001bb0:	042d      	lsls	r5, r5, #16
 8001bb2:	0c2d      	lsrs	r5, r5, #16
 8001bb4:	002b      	movs	r3, r5
 8001bb6:	0c11      	lsrs	r1, r2, #16
 8001bb8:	0412      	lsls	r2, r2, #16
 8001bba:	0c12      	lsrs	r2, r2, #16
 8001bbc:	4353      	muls	r3, r2
 8001bbe:	4698      	mov	r8, r3
 8001bc0:	0013      	movs	r3, r2
 8001bc2:	002f      	movs	r7, r5
 8001bc4:	4343      	muls	r3, r0
 8001bc6:	4699      	mov	r9, r3
 8001bc8:	434f      	muls	r7, r1
 8001bca:	444f      	add	r7, r9
 8001bcc:	46bb      	mov	fp, r7
 8001bce:	4647      	mov	r7, r8
 8001bd0:	000b      	movs	r3, r1
 8001bd2:	0c3f      	lsrs	r7, r7, #16
 8001bd4:	46ba      	mov	sl, r7
 8001bd6:	4343      	muls	r3, r0
 8001bd8:	44da      	add	sl, fp
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	45d1      	cmp	r9, sl
 8001bde:	d904      	bls.n	8001bea <__aeabi_dmul+0x122>
 8001be0:	2780      	movs	r7, #128	; 0x80
 8001be2:	027f      	lsls	r7, r7, #9
 8001be4:	46b9      	mov	r9, r7
 8001be6:	444b      	add	r3, r9
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	4653      	mov	r3, sl
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	469b      	mov	fp, r3
 8001bf0:	4653      	mov	r3, sl
 8001bf2:	041f      	lsls	r7, r3, #16
 8001bf4:	4643      	mov	r3, r8
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	4698      	mov	r8, r3
 8001bfc:	003b      	movs	r3, r7
 8001bfe:	4443      	add	r3, r8
 8001c00:	9304      	str	r3, [sp, #16]
 8001c02:	0c33      	lsrs	r3, r6, #16
 8001c04:	0436      	lsls	r6, r6, #16
 8001c06:	0c36      	lsrs	r6, r6, #16
 8001c08:	4698      	mov	r8, r3
 8001c0a:	0033      	movs	r3, r6
 8001c0c:	4343      	muls	r3, r0
 8001c0e:	4699      	mov	r9, r3
 8001c10:	4643      	mov	r3, r8
 8001c12:	4343      	muls	r3, r0
 8001c14:	002f      	movs	r7, r5
 8001c16:	469a      	mov	sl, r3
 8001c18:	4643      	mov	r3, r8
 8001c1a:	4377      	muls	r7, r6
 8001c1c:	435d      	muls	r5, r3
 8001c1e:	0c38      	lsrs	r0, r7, #16
 8001c20:	444d      	add	r5, r9
 8001c22:	1945      	adds	r5, r0, r5
 8001c24:	45a9      	cmp	r9, r5
 8001c26:	d903      	bls.n	8001c30 <__aeabi_dmul+0x168>
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	025b      	lsls	r3, r3, #9
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	44ca      	add	sl, r9
 8001c30:	043f      	lsls	r7, r7, #16
 8001c32:	0c28      	lsrs	r0, r5, #16
 8001c34:	0c3f      	lsrs	r7, r7, #16
 8001c36:	042d      	lsls	r5, r5, #16
 8001c38:	19ed      	adds	r5, r5, r7
 8001c3a:	0c27      	lsrs	r7, r4, #16
 8001c3c:	0424      	lsls	r4, r4, #16
 8001c3e:	0c24      	lsrs	r4, r4, #16
 8001c40:	0003      	movs	r3, r0
 8001c42:	0020      	movs	r0, r4
 8001c44:	4350      	muls	r0, r2
 8001c46:	437a      	muls	r2, r7
 8001c48:	4691      	mov	r9, r2
 8001c4a:	003a      	movs	r2, r7
 8001c4c:	4453      	add	r3, sl
 8001c4e:	9305      	str	r3, [sp, #20]
 8001c50:	0c03      	lsrs	r3, r0, #16
 8001c52:	469a      	mov	sl, r3
 8001c54:	434a      	muls	r2, r1
 8001c56:	4361      	muls	r1, r4
 8001c58:	4449      	add	r1, r9
 8001c5a:	4451      	add	r1, sl
 8001c5c:	44ab      	add	fp, r5
 8001c5e:	4589      	cmp	r9, r1
 8001c60:	d903      	bls.n	8001c6a <__aeabi_dmul+0x1a2>
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	025b      	lsls	r3, r3, #9
 8001c66:	4699      	mov	r9, r3
 8001c68:	444a      	add	r2, r9
 8001c6a:	0400      	lsls	r0, r0, #16
 8001c6c:	0c0b      	lsrs	r3, r1, #16
 8001c6e:	0c00      	lsrs	r0, r0, #16
 8001c70:	0409      	lsls	r1, r1, #16
 8001c72:	1809      	adds	r1, r1, r0
 8001c74:	0020      	movs	r0, r4
 8001c76:	4699      	mov	r9, r3
 8001c78:	4643      	mov	r3, r8
 8001c7a:	4370      	muls	r0, r6
 8001c7c:	435c      	muls	r4, r3
 8001c7e:	437e      	muls	r6, r7
 8001c80:	435f      	muls	r7, r3
 8001c82:	0c03      	lsrs	r3, r0, #16
 8001c84:	4698      	mov	r8, r3
 8001c86:	19a4      	adds	r4, r4, r6
 8001c88:	4444      	add	r4, r8
 8001c8a:	444a      	add	r2, r9
 8001c8c:	9703      	str	r7, [sp, #12]
 8001c8e:	42a6      	cmp	r6, r4
 8001c90:	d904      	bls.n	8001c9c <__aeabi_dmul+0x1d4>
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	025b      	lsls	r3, r3, #9
 8001c96:	4698      	mov	r8, r3
 8001c98:	4447      	add	r7, r8
 8001c9a:	9703      	str	r7, [sp, #12]
 8001c9c:	0423      	lsls	r3, r4, #16
 8001c9e:	9e02      	ldr	r6, [sp, #8]
 8001ca0:	469a      	mov	sl, r3
 8001ca2:	9b05      	ldr	r3, [sp, #20]
 8001ca4:	445e      	add	r6, fp
 8001ca6:	4698      	mov	r8, r3
 8001ca8:	42ae      	cmp	r6, r5
 8001caa:	41ad      	sbcs	r5, r5
 8001cac:	1876      	adds	r6, r6, r1
 8001cae:	428e      	cmp	r6, r1
 8001cb0:	4189      	sbcs	r1, r1
 8001cb2:	0400      	lsls	r0, r0, #16
 8001cb4:	0c00      	lsrs	r0, r0, #16
 8001cb6:	4450      	add	r0, sl
 8001cb8:	4440      	add	r0, r8
 8001cba:	426d      	negs	r5, r5
 8001cbc:	1947      	adds	r7, r0, r5
 8001cbe:	46b8      	mov	r8, r7
 8001cc0:	4693      	mov	fp, r2
 8001cc2:	4249      	negs	r1, r1
 8001cc4:	4689      	mov	r9, r1
 8001cc6:	44c3      	add	fp, r8
 8001cc8:	44d9      	add	r9, fp
 8001cca:	4298      	cmp	r0, r3
 8001ccc:	4180      	sbcs	r0, r0
 8001cce:	45a8      	cmp	r8, r5
 8001cd0:	41ad      	sbcs	r5, r5
 8001cd2:	4593      	cmp	fp, r2
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4589      	cmp	r9, r1
 8001cd8:	4189      	sbcs	r1, r1
 8001cda:	426d      	negs	r5, r5
 8001cdc:	4240      	negs	r0, r0
 8001cde:	4328      	orrs	r0, r5
 8001ce0:	0c24      	lsrs	r4, r4, #16
 8001ce2:	4252      	negs	r2, r2
 8001ce4:	4249      	negs	r1, r1
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	9b03      	ldr	r3, [sp, #12]
 8001cea:	1900      	adds	r0, r0, r4
 8001cec:	1880      	adds	r0, r0, r2
 8001cee:	18c7      	adds	r7, r0, r3
 8001cf0:	464b      	mov	r3, r9
 8001cf2:	0ddc      	lsrs	r4, r3, #23
 8001cf4:	9b04      	ldr	r3, [sp, #16]
 8001cf6:	0275      	lsls	r5, r6, #9
 8001cf8:	431d      	orrs	r5, r3
 8001cfa:	1e6a      	subs	r2, r5, #1
 8001cfc:	4195      	sbcs	r5, r2
 8001cfe:	464b      	mov	r3, r9
 8001d00:	0df6      	lsrs	r6, r6, #23
 8001d02:	027f      	lsls	r7, r7, #9
 8001d04:	4335      	orrs	r5, r6
 8001d06:	025a      	lsls	r2, r3, #9
 8001d08:	433c      	orrs	r4, r7
 8001d0a:	4315      	orrs	r5, r2
 8001d0c:	01fb      	lsls	r3, r7, #7
 8001d0e:	d400      	bmi.n	8001d12 <__aeabi_dmul+0x24a>
 8001d10:	e11c      	b.n	8001f4c <__aeabi_dmul+0x484>
 8001d12:	2101      	movs	r1, #1
 8001d14:	086a      	lsrs	r2, r5, #1
 8001d16:	400d      	ands	r5, r1
 8001d18:	4315      	orrs	r5, r2
 8001d1a:	07e2      	lsls	r2, r4, #31
 8001d1c:	4315      	orrs	r5, r2
 8001d1e:	0864      	lsrs	r4, r4, #1
 8001d20:	494f      	ldr	r1, [pc, #316]	; (8001e60 <__aeabi_dmul+0x398>)
 8001d22:	4461      	add	r1, ip
 8001d24:	2900      	cmp	r1, #0
 8001d26:	dc00      	bgt.n	8001d2a <__aeabi_dmul+0x262>
 8001d28:	e0b0      	b.n	8001e8c <__aeabi_dmul+0x3c4>
 8001d2a:	076b      	lsls	r3, r5, #29
 8001d2c:	d009      	beq.n	8001d42 <__aeabi_dmul+0x27a>
 8001d2e:	220f      	movs	r2, #15
 8001d30:	402a      	ands	r2, r5
 8001d32:	2a04      	cmp	r2, #4
 8001d34:	d005      	beq.n	8001d42 <__aeabi_dmul+0x27a>
 8001d36:	1d2a      	adds	r2, r5, #4
 8001d38:	42aa      	cmp	r2, r5
 8001d3a:	41ad      	sbcs	r5, r5
 8001d3c:	426d      	negs	r5, r5
 8001d3e:	1964      	adds	r4, r4, r5
 8001d40:	0015      	movs	r5, r2
 8001d42:	01e3      	lsls	r3, r4, #7
 8001d44:	d504      	bpl.n	8001d50 <__aeabi_dmul+0x288>
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	4a46      	ldr	r2, [pc, #280]	; (8001e64 <__aeabi_dmul+0x39c>)
 8001d4a:	00c9      	lsls	r1, r1, #3
 8001d4c:	4014      	ands	r4, r2
 8001d4e:	4461      	add	r1, ip
 8001d50:	4a45      	ldr	r2, [pc, #276]	; (8001e68 <__aeabi_dmul+0x3a0>)
 8001d52:	4291      	cmp	r1, r2
 8001d54:	dd00      	ble.n	8001d58 <__aeabi_dmul+0x290>
 8001d56:	e726      	b.n	8001ba6 <__aeabi_dmul+0xde>
 8001d58:	0762      	lsls	r2, r4, #29
 8001d5a:	08ed      	lsrs	r5, r5, #3
 8001d5c:	0264      	lsls	r4, r4, #9
 8001d5e:	0549      	lsls	r1, r1, #21
 8001d60:	4315      	orrs	r5, r2
 8001d62:	0b24      	lsrs	r4, r4, #12
 8001d64:	0d4a      	lsrs	r2, r1, #21
 8001d66:	e710      	b.n	8001b8a <__aeabi_dmul+0xc2>
 8001d68:	4652      	mov	r2, sl
 8001d6a:	4332      	orrs	r2, r6
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dmul+0x2a8>
 8001d6e:	e07f      	b.n	8001e70 <__aeabi_dmul+0x3a8>
 8001d70:	2e00      	cmp	r6, #0
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dmul+0x2ae>
 8001d74:	e0dc      	b.n	8001f30 <__aeabi_dmul+0x468>
 8001d76:	0030      	movs	r0, r6
 8001d78:	f000 fdd0 	bl	800291c <__clzsi2>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	3a0b      	subs	r2, #11
 8001d80:	231d      	movs	r3, #29
 8001d82:	0001      	movs	r1, r0
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	4652      	mov	r2, sl
 8001d88:	3908      	subs	r1, #8
 8001d8a:	40da      	lsrs	r2, r3
 8001d8c:	408e      	lsls	r6, r1
 8001d8e:	4316      	orrs	r6, r2
 8001d90:	4652      	mov	r2, sl
 8001d92:	408a      	lsls	r2, r1
 8001d94:	9b00      	ldr	r3, [sp, #0]
 8001d96:	4935      	ldr	r1, [pc, #212]	; (8001e6c <__aeabi_dmul+0x3a4>)
 8001d98:	1a18      	subs	r0, r3, r0
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	4463      	add	r3, ip
 8001da0:	2000      	movs	r0, #0
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	e6d3      	b.n	8001b4e <__aeabi_dmul+0x86>
 8001da6:	0025      	movs	r5, r4
 8001da8:	4305      	orrs	r5, r0
 8001daa:	d04a      	beq.n	8001e42 <__aeabi_dmul+0x37a>
 8001dac:	2c00      	cmp	r4, #0
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dmul+0x2ea>
 8001db0:	e0b0      	b.n	8001f14 <__aeabi_dmul+0x44c>
 8001db2:	0020      	movs	r0, r4
 8001db4:	f000 fdb2 	bl	800291c <__clzsi2>
 8001db8:	0001      	movs	r1, r0
 8001dba:	0002      	movs	r2, r0
 8001dbc:	390b      	subs	r1, #11
 8001dbe:	231d      	movs	r3, #29
 8001dc0:	0010      	movs	r0, r2
 8001dc2:	1a5b      	subs	r3, r3, r1
 8001dc4:	0031      	movs	r1, r6
 8001dc6:	0035      	movs	r5, r6
 8001dc8:	3808      	subs	r0, #8
 8001dca:	4084      	lsls	r4, r0
 8001dcc:	40d9      	lsrs	r1, r3
 8001dce:	4085      	lsls	r5, r0
 8001dd0:	430c      	orrs	r4, r1
 8001dd2:	4826      	ldr	r0, [pc, #152]	; (8001e6c <__aeabi_dmul+0x3a4>)
 8001dd4:	1a83      	subs	r3, r0, r2
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	4699      	mov	r9, r3
 8001ddc:	469b      	mov	fp, r3
 8001dde:	e697      	b.n	8001b10 <__aeabi_dmul+0x48>
 8001de0:	0005      	movs	r5, r0
 8001de2:	4325      	orrs	r5, r4
 8001de4:	d126      	bne.n	8001e34 <__aeabi_dmul+0x36c>
 8001de6:	2208      	movs	r2, #8
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	2302      	movs	r3, #2
 8001dec:	2400      	movs	r4, #0
 8001dee:	4691      	mov	r9, r2
 8001df0:	469b      	mov	fp, r3
 8001df2:	e68d      	b.n	8001b10 <__aeabi_dmul+0x48>
 8001df4:	4652      	mov	r2, sl
 8001df6:	9b00      	ldr	r3, [sp, #0]
 8001df8:	4332      	orrs	r2, r6
 8001dfa:	d110      	bne.n	8001e1e <__aeabi_dmul+0x356>
 8001dfc:	4915      	ldr	r1, [pc, #84]	; (8001e54 <__aeabi_dmul+0x38c>)
 8001dfe:	2600      	movs	r6, #0
 8001e00:	468c      	mov	ip, r1
 8001e02:	4463      	add	r3, ip
 8001e04:	4649      	mov	r1, r9
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2302      	movs	r3, #2
 8001e0a:	4319      	orrs	r1, r3
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	2002      	movs	r0, #2
 8001e10:	e69d      	b.n	8001b4e <__aeabi_dmul+0x86>
 8001e12:	465b      	mov	r3, fp
 8001e14:	9701      	str	r7, [sp, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d000      	beq.n	8001e1c <__aeabi_dmul+0x354>
 8001e1a:	e6ad      	b.n	8001b78 <__aeabi_dmul+0xb0>
 8001e1c:	e6c3      	b.n	8001ba6 <__aeabi_dmul+0xde>
 8001e1e:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <__aeabi_dmul+0x38c>)
 8001e20:	2003      	movs	r0, #3
 8001e22:	4694      	mov	ip, r2
 8001e24:	4463      	add	r3, ip
 8001e26:	464a      	mov	r2, r9
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	4691      	mov	r9, r2
 8001e30:	4652      	mov	r2, sl
 8001e32:	e68c      	b.n	8001b4e <__aeabi_dmul+0x86>
 8001e34:	220c      	movs	r2, #12
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2303      	movs	r3, #3
 8001e3a:	0005      	movs	r5, r0
 8001e3c:	4691      	mov	r9, r2
 8001e3e:	469b      	mov	fp, r3
 8001e40:	e666      	b.n	8001b10 <__aeabi_dmul+0x48>
 8001e42:	2304      	movs	r3, #4
 8001e44:	4699      	mov	r9, r3
 8001e46:	2300      	movs	r3, #0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	2400      	movs	r4, #0
 8001e4e:	469b      	mov	fp, r3
 8001e50:	e65e      	b.n	8001b10 <__aeabi_dmul+0x48>
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	000007ff 	.word	0x000007ff
 8001e58:	fffffc01 	.word	0xfffffc01
 8001e5c:	0800ae48 	.word	0x0800ae48
 8001e60:	000003ff 	.word	0x000003ff
 8001e64:	feffffff 	.word	0xfeffffff
 8001e68:	000007fe 	.word	0x000007fe
 8001e6c:	fffffc0d 	.word	0xfffffc0d
 8001e70:	4649      	mov	r1, r9
 8001e72:	2301      	movs	r3, #1
 8001e74:	4319      	orrs	r1, r3
 8001e76:	4689      	mov	r9, r1
 8001e78:	2600      	movs	r6, #0
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	e667      	b.n	8001b4e <__aeabi_dmul+0x86>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2480      	movs	r4, #128	; 0x80
 8001e82:	2500      	movs	r5, #0
 8001e84:	4a43      	ldr	r2, [pc, #268]	; (8001f94 <__aeabi_dmul+0x4cc>)
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	0324      	lsls	r4, r4, #12
 8001e8a:	e67e      	b.n	8001b8a <__aeabi_dmul+0xc2>
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	1a40      	subs	r0, r0, r1
 8001e90:	2838      	cmp	r0, #56	; 0x38
 8001e92:	dd00      	ble.n	8001e96 <__aeabi_dmul+0x3ce>
 8001e94:	e676      	b.n	8001b84 <__aeabi_dmul+0xbc>
 8001e96:	281f      	cmp	r0, #31
 8001e98:	dd5b      	ble.n	8001f52 <__aeabi_dmul+0x48a>
 8001e9a:	221f      	movs	r2, #31
 8001e9c:	0023      	movs	r3, r4
 8001e9e:	4252      	negs	r2, r2
 8001ea0:	1a51      	subs	r1, r2, r1
 8001ea2:	40cb      	lsrs	r3, r1
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	2820      	cmp	r0, #32
 8001ea8:	d003      	beq.n	8001eb2 <__aeabi_dmul+0x3ea>
 8001eaa:	4a3b      	ldr	r2, [pc, #236]	; (8001f98 <__aeabi_dmul+0x4d0>)
 8001eac:	4462      	add	r2, ip
 8001eae:	4094      	lsls	r4, r2
 8001eb0:	4325      	orrs	r5, r4
 8001eb2:	1e6a      	subs	r2, r5, #1
 8001eb4:	4195      	sbcs	r5, r2
 8001eb6:	002a      	movs	r2, r5
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	2107      	movs	r1, #7
 8001ebc:	000d      	movs	r5, r1
 8001ebe:	2400      	movs	r4, #0
 8001ec0:	4015      	ands	r5, r2
 8001ec2:	4211      	tst	r1, r2
 8001ec4:	d05b      	beq.n	8001f7e <__aeabi_dmul+0x4b6>
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	2400      	movs	r4, #0
 8001eca:	4011      	ands	r1, r2
 8001ecc:	2904      	cmp	r1, #4
 8001ece:	d053      	beq.n	8001f78 <__aeabi_dmul+0x4b0>
 8001ed0:	1d11      	adds	r1, r2, #4
 8001ed2:	4291      	cmp	r1, r2
 8001ed4:	4192      	sbcs	r2, r2
 8001ed6:	4252      	negs	r2, r2
 8001ed8:	18a4      	adds	r4, r4, r2
 8001eda:	000a      	movs	r2, r1
 8001edc:	0223      	lsls	r3, r4, #8
 8001ede:	d54b      	bpl.n	8001f78 <__aeabi_dmul+0x4b0>
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2400      	movs	r4, #0
 8001ee4:	2500      	movs	r5, #0
 8001ee6:	e650      	b.n	8001b8a <__aeabi_dmul+0xc2>
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	031b      	lsls	r3, r3, #12
 8001eec:	421c      	tst	r4, r3
 8001eee:	d009      	beq.n	8001f04 <__aeabi_dmul+0x43c>
 8001ef0:	421e      	tst	r6, r3
 8001ef2:	d107      	bne.n	8001f04 <__aeabi_dmul+0x43c>
 8001ef4:	4333      	orrs	r3, r6
 8001ef6:	031c      	lsls	r4, r3, #12
 8001ef8:	4643      	mov	r3, r8
 8001efa:	0015      	movs	r5, r2
 8001efc:	0b24      	lsrs	r4, r4, #12
 8001efe:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <__aeabi_dmul+0x4cc>)
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	e642      	b.n	8001b8a <__aeabi_dmul+0xc2>
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	0312      	lsls	r2, r2, #12
 8001f08:	4314      	orrs	r4, r2
 8001f0a:	0324      	lsls	r4, r4, #12
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <__aeabi_dmul+0x4cc>)
 8001f0e:	0b24      	lsrs	r4, r4, #12
 8001f10:	9701      	str	r7, [sp, #4]
 8001f12:	e63a      	b.n	8001b8a <__aeabi_dmul+0xc2>
 8001f14:	f000 fd02 	bl	800291c <__clzsi2>
 8001f18:	0001      	movs	r1, r0
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	3115      	adds	r1, #21
 8001f1e:	3220      	adds	r2, #32
 8001f20:	291c      	cmp	r1, #28
 8001f22:	dc00      	bgt.n	8001f26 <__aeabi_dmul+0x45e>
 8001f24:	e74b      	b.n	8001dbe <__aeabi_dmul+0x2f6>
 8001f26:	0034      	movs	r4, r6
 8001f28:	3808      	subs	r0, #8
 8001f2a:	2500      	movs	r5, #0
 8001f2c:	4084      	lsls	r4, r0
 8001f2e:	e750      	b.n	8001dd2 <__aeabi_dmul+0x30a>
 8001f30:	f000 fcf4 	bl	800291c <__clzsi2>
 8001f34:	0003      	movs	r3, r0
 8001f36:	001a      	movs	r2, r3
 8001f38:	3215      	adds	r2, #21
 8001f3a:	3020      	adds	r0, #32
 8001f3c:	2a1c      	cmp	r2, #28
 8001f3e:	dc00      	bgt.n	8001f42 <__aeabi_dmul+0x47a>
 8001f40:	e71e      	b.n	8001d80 <__aeabi_dmul+0x2b8>
 8001f42:	4656      	mov	r6, sl
 8001f44:	3b08      	subs	r3, #8
 8001f46:	2200      	movs	r2, #0
 8001f48:	409e      	lsls	r6, r3
 8001f4a:	e723      	b.n	8001d94 <__aeabi_dmul+0x2cc>
 8001f4c:	9b00      	ldr	r3, [sp, #0]
 8001f4e:	469c      	mov	ip, r3
 8001f50:	e6e6      	b.n	8001d20 <__aeabi_dmul+0x258>
 8001f52:	4912      	ldr	r1, [pc, #72]	; (8001f9c <__aeabi_dmul+0x4d4>)
 8001f54:	0022      	movs	r2, r4
 8001f56:	4461      	add	r1, ip
 8001f58:	002e      	movs	r6, r5
 8001f5a:	408d      	lsls	r5, r1
 8001f5c:	408a      	lsls	r2, r1
 8001f5e:	40c6      	lsrs	r6, r0
 8001f60:	1e69      	subs	r1, r5, #1
 8001f62:	418d      	sbcs	r5, r1
 8001f64:	4332      	orrs	r2, r6
 8001f66:	432a      	orrs	r2, r5
 8001f68:	40c4      	lsrs	r4, r0
 8001f6a:	0753      	lsls	r3, r2, #29
 8001f6c:	d0b6      	beq.n	8001edc <__aeabi_dmul+0x414>
 8001f6e:	210f      	movs	r1, #15
 8001f70:	4011      	ands	r1, r2
 8001f72:	2904      	cmp	r1, #4
 8001f74:	d1ac      	bne.n	8001ed0 <__aeabi_dmul+0x408>
 8001f76:	e7b1      	b.n	8001edc <__aeabi_dmul+0x414>
 8001f78:	0765      	lsls	r5, r4, #29
 8001f7a:	0264      	lsls	r4, r4, #9
 8001f7c:	0b24      	lsrs	r4, r4, #12
 8001f7e:	08d2      	lsrs	r2, r2, #3
 8001f80:	4315      	orrs	r5, r2
 8001f82:	2200      	movs	r2, #0
 8001f84:	e601      	b.n	8001b8a <__aeabi_dmul+0xc2>
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	0312      	lsls	r2, r2, #12
 8001f8a:	4314      	orrs	r4, r2
 8001f8c:	0324      	lsls	r4, r4, #12
 8001f8e:	4a01      	ldr	r2, [pc, #4]	; (8001f94 <__aeabi_dmul+0x4cc>)
 8001f90:	0b24      	lsrs	r4, r4, #12
 8001f92:	e5fa      	b.n	8001b8a <__aeabi_dmul+0xc2>
 8001f94:	000007ff 	.word	0x000007ff
 8001f98:	0000043e 	.word	0x0000043e
 8001f9c:	0000041e 	.word	0x0000041e

08001fa0 <__aeabi_dsub>:
 8001fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa2:	4657      	mov	r7, sl
 8001fa4:	464e      	mov	r6, r9
 8001fa6:	4645      	mov	r5, r8
 8001fa8:	46de      	mov	lr, fp
 8001faa:	b5e0      	push	{r5, r6, r7, lr}
 8001fac:	001e      	movs	r6, r3
 8001fae:	0017      	movs	r7, r2
 8001fb0:	004a      	lsls	r2, r1, #1
 8001fb2:	030b      	lsls	r3, r1, #12
 8001fb4:	0d52      	lsrs	r2, r2, #21
 8001fb6:	0a5b      	lsrs	r3, r3, #9
 8001fb8:	4690      	mov	r8, r2
 8001fba:	0f42      	lsrs	r2, r0, #29
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	0fcd      	lsrs	r5, r1, #31
 8001fc0:	4ccd      	ldr	r4, [pc, #820]	; (80022f8 <__aeabi_dsub+0x358>)
 8001fc2:	0331      	lsls	r1, r6, #12
 8001fc4:	00c3      	lsls	r3, r0, #3
 8001fc6:	4694      	mov	ip, r2
 8001fc8:	0070      	lsls	r0, r6, #1
 8001fca:	0f7a      	lsrs	r2, r7, #29
 8001fcc:	0a49      	lsrs	r1, r1, #9
 8001fce:	00ff      	lsls	r7, r7, #3
 8001fd0:	469a      	mov	sl, r3
 8001fd2:	46b9      	mov	r9, r7
 8001fd4:	0d40      	lsrs	r0, r0, #21
 8001fd6:	0ff6      	lsrs	r6, r6, #31
 8001fd8:	4311      	orrs	r1, r2
 8001fda:	42a0      	cmp	r0, r4
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dsub+0x40>
 8001fde:	e0b1      	b.n	8002144 <__aeabi_dsub+0x1a4>
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	4056      	eors	r6, r2
 8001fe4:	46b3      	mov	fp, r6
 8001fe6:	42b5      	cmp	r5, r6
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x4c>
 8001fea:	e088      	b.n	80020fe <__aeabi_dsub+0x15e>
 8001fec:	4642      	mov	r2, r8
 8001fee:	1a12      	subs	r2, r2, r0
 8001ff0:	2a00      	cmp	r2, #0
 8001ff2:	dc00      	bgt.n	8001ff6 <__aeabi_dsub+0x56>
 8001ff4:	e0ae      	b.n	8002154 <__aeabi_dsub+0x1b4>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d100      	bne.n	8001ffc <__aeabi_dsub+0x5c>
 8001ffa:	e0c1      	b.n	8002180 <__aeabi_dsub+0x1e0>
 8001ffc:	48be      	ldr	r0, [pc, #760]	; (80022f8 <__aeabi_dsub+0x358>)
 8001ffe:	4580      	cmp	r8, r0
 8002000:	d100      	bne.n	8002004 <__aeabi_dsub+0x64>
 8002002:	e151      	b.n	80022a8 <__aeabi_dsub+0x308>
 8002004:	2080      	movs	r0, #128	; 0x80
 8002006:	0400      	lsls	r0, r0, #16
 8002008:	4301      	orrs	r1, r0
 800200a:	2a38      	cmp	r2, #56	; 0x38
 800200c:	dd00      	ble.n	8002010 <__aeabi_dsub+0x70>
 800200e:	e17b      	b.n	8002308 <__aeabi_dsub+0x368>
 8002010:	2a1f      	cmp	r2, #31
 8002012:	dd00      	ble.n	8002016 <__aeabi_dsub+0x76>
 8002014:	e1ee      	b.n	80023f4 <__aeabi_dsub+0x454>
 8002016:	2020      	movs	r0, #32
 8002018:	003e      	movs	r6, r7
 800201a:	1a80      	subs	r0, r0, r2
 800201c:	000c      	movs	r4, r1
 800201e:	40d6      	lsrs	r6, r2
 8002020:	40d1      	lsrs	r1, r2
 8002022:	4087      	lsls	r7, r0
 8002024:	4662      	mov	r2, ip
 8002026:	4084      	lsls	r4, r0
 8002028:	1a52      	subs	r2, r2, r1
 800202a:	1e78      	subs	r0, r7, #1
 800202c:	4187      	sbcs	r7, r0
 800202e:	4694      	mov	ip, r2
 8002030:	4334      	orrs	r4, r6
 8002032:	4327      	orrs	r7, r4
 8002034:	1bdc      	subs	r4, r3, r7
 8002036:	42a3      	cmp	r3, r4
 8002038:	419b      	sbcs	r3, r3
 800203a:	4662      	mov	r2, ip
 800203c:	425b      	negs	r3, r3
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	4699      	mov	r9, r3
 8002042:	464b      	mov	r3, r9
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	d400      	bmi.n	800204a <__aeabi_dsub+0xaa>
 8002048:	e118      	b.n	800227c <__aeabi_dsub+0x2dc>
 800204a:	464b      	mov	r3, r9
 800204c:	0258      	lsls	r0, r3, #9
 800204e:	0a43      	lsrs	r3, r0, #9
 8002050:	4699      	mov	r9, r3
 8002052:	464b      	mov	r3, r9
 8002054:	2b00      	cmp	r3, #0
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0xba>
 8002058:	e137      	b.n	80022ca <__aeabi_dsub+0x32a>
 800205a:	4648      	mov	r0, r9
 800205c:	f000 fc5e 	bl	800291c <__clzsi2>
 8002060:	0001      	movs	r1, r0
 8002062:	3908      	subs	r1, #8
 8002064:	2320      	movs	r3, #32
 8002066:	0022      	movs	r2, r4
 8002068:	4648      	mov	r0, r9
 800206a:	1a5b      	subs	r3, r3, r1
 800206c:	40da      	lsrs	r2, r3
 800206e:	4088      	lsls	r0, r1
 8002070:	408c      	lsls	r4, r1
 8002072:	4643      	mov	r3, r8
 8002074:	4310      	orrs	r0, r2
 8002076:	4588      	cmp	r8, r1
 8002078:	dd00      	ble.n	800207c <__aeabi_dsub+0xdc>
 800207a:	e136      	b.n	80022ea <__aeabi_dsub+0x34a>
 800207c:	1ac9      	subs	r1, r1, r3
 800207e:	1c4b      	adds	r3, r1, #1
 8002080:	2b1f      	cmp	r3, #31
 8002082:	dd00      	ble.n	8002086 <__aeabi_dsub+0xe6>
 8002084:	e0ea      	b.n	800225c <__aeabi_dsub+0x2bc>
 8002086:	2220      	movs	r2, #32
 8002088:	0026      	movs	r6, r4
 800208a:	1ad2      	subs	r2, r2, r3
 800208c:	0001      	movs	r1, r0
 800208e:	4094      	lsls	r4, r2
 8002090:	40de      	lsrs	r6, r3
 8002092:	40d8      	lsrs	r0, r3
 8002094:	2300      	movs	r3, #0
 8002096:	4091      	lsls	r1, r2
 8002098:	1e62      	subs	r2, r4, #1
 800209a:	4194      	sbcs	r4, r2
 800209c:	4681      	mov	r9, r0
 800209e:	4698      	mov	r8, r3
 80020a0:	4331      	orrs	r1, r6
 80020a2:	430c      	orrs	r4, r1
 80020a4:	0763      	lsls	r3, r4, #29
 80020a6:	d009      	beq.n	80020bc <__aeabi_dsub+0x11c>
 80020a8:	230f      	movs	r3, #15
 80020aa:	4023      	ands	r3, r4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d005      	beq.n	80020bc <__aeabi_dsub+0x11c>
 80020b0:	1d23      	adds	r3, r4, #4
 80020b2:	42a3      	cmp	r3, r4
 80020b4:	41a4      	sbcs	r4, r4
 80020b6:	4264      	negs	r4, r4
 80020b8:	44a1      	add	r9, r4
 80020ba:	001c      	movs	r4, r3
 80020bc:	464b      	mov	r3, r9
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	d400      	bmi.n	80020c4 <__aeabi_dsub+0x124>
 80020c2:	e0de      	b.n	8002282 <__aeabi_dsub+0x2e2>
 80020c4:	4641      	mov	r1, r8
 80020c6:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <__aeabi_dsub+0x358>)
 80020c8:	3101      	adds	r1, #1
 80020ca:	4299      	cmp	r1, r3
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x130>
 80020ce:	e0e7      	b.n	80022a0 <__aeabi_dsub+0x300>
 80020d0:	464b      	mov	r3, r9
 80020d2:	488a      	ldr	r0, [pc, #552]	; (80022fc <__aeabi_dsub+0x35c>)
 80020d4:	08e4      	lsrs	r4, r4, #3
 80020d6:	4003      	ands	r3, r0
 80020d8:	0018      	movs	r0, r3
 80020da:	0549      	lsls	r1, r1, #21
 80020dc:	075b      	lsls	r3, r3, #29
 80020de:	0240      	lsls	r0, r0, #9
 80020e0:	4323      	orrs	r3, r4
 80020e2:	0d4a      	lsrs	r2, r1, #21
 80020e4:	0b04      	lsrs	r4, r0, #12
 80020e6:	0512      	lsls	r2, r2, #20
 80020e8:	07ed      	lsls	r5, r5, #31
 80020ea:	4322      	orrs	r2, r4
 80020ec:	432a      	orrs	r2, r5
 80020ee:	0018      	movs	r0, r3
 80020f0:	0011      	movs	r1, r2
 80020f2:	bcf0      	pop	{r4, r5, r6, r7}
 80020f4:	46bb      	mov	fp, r7
 80020f6:	46b2      	mov	sl, r6
 80020f8:	46a9      	mov	r9, r5
 80020fa:	46a0      	mov	r8, r4
 80020fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020fe:	4642      	mov	r2, r8
 8002100:	1a12      	subs	r2, r2, r0
 8002102:	2a00      	cmp	r2, #0
 8002104:	dd52      	ble.n	80021ac <__aeabi_dsub+0x20c>
 8002106:	2800      	cmp	r0, #0
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x16c>
 800210a:	e09c      	b.n	8002246 <__aeabi_dsub+0x2a6>
 800210c:	45a0      	cmp	r8, r4
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x172>
 8002110:	e0ca      	b.n	80022a8 <__aeabi_dsub+0x308>
 8002112:	2080      	movs	r0, #128	; 0x80
 8002114:	0400      	lsls	r0, r0, #16
 8002116:	4301      	orrs	r1, r0
 8002118:	2a38      	cmp	r2, #56	; 0x38
 800211a:	dd00      	ble.n	800211e <__aeabi_dsub+0x17e>
 800211c:	e149      	b.n	80023b2 <__aeabi_dsub+0x412>
 800211e:	2a1f      	cmp	r2, #31
 8002120:	dc00      	bgt.n	8002124 <__aeabi_dsub+0x184>
 8002122:	e197      	b.n	8002454 <__aeabi_dsub+0x4b4>
 8002124:	0010      	movs	r0, r2
 8002126:	000e      	movs	r6, r1
 8002128:	3820      	subs	r0, #32
 800212a:	40c6      	lsrs	r6, r0
 800212c:	2a20      	cmp	r2, #32
 800212e:	d004      	beq.n	800213a <__aeabi_dsub+0x19a>
 8002130:	2040      	movs	r0, #64	; 0x40
 8002132:	1a82      	subs	r2, r0, r2
 8002134:	4091      	lsls	r1, r2
 8002136:	430f      	orrs	r7, r1
 8002138:	46b9      	mov	r9, r7
 800213a:	464c      	mov	r4, r9
 800213c:	1e62      	subs	r2, r4, #1
 800213e:	4194      	sbcs	r4, r2
 8002140:	4334      	orrs	r4, r6
 8002142:	e13a      	b.n	80023ba <__aeabi_dsub+0x41a>
 8002144:	000a      	movs	r2, r1
 8002146:	433a      	orrs	r2, r7
 8002148:	d028      	beq.n	800219c <__aeabi_dsub+0x1fc>
 800214a:	46b3      	mov	fp, r6
 800214c:	42b5      	cmp	r5, r6
 800214e:	d02b      	beq.n	80021a8 <__aeabi_dsub+0x208>
 8002150:	4a6b      	ldr	r2, [pc, #428]	; (8002300 <__aeabi_dsub+0x360>)
 8002152:	4442      	add	r2, r8
 8002154:	2a00      	cmp	r2, #0
 8002156:	d05d      	beq.n	8002214 <__aeabi_dsub+0x274>
 8002158:	4642      	mov	r2, r8
 800215a:	4644      	mov	r4, r8
 800215c:	1a82      	subs	r2, r0, r2
 800215e:	2c00      	cmp	r4, #0
 8002160:	d000      	beq.n	8002164 <__aeabi_dsub+0x1c4>
 8002162:	e0f5      	b.n	8002350 <__aeabi_dsub+0x3b0>
 8002164:	4665      	mov	r5, ip
 8002166:	431d      	orrs	r5, r3
 8002168:	d100      	bne.n	800216c <__aeabi_dsub+0x1cc>
 800216a:	e19c      	b.n	80024a6 <__aeabi_dsub+0x506>
 800216c:	1e55      	subs	r5, r2, #1
 800216e:	2a01      	cmp	r2, #1
 8002170:	d100      	bne.n	8002174 <__aeabi_dsub+0x1d4>
 8002172:	e1fb      	b.n	800256c <__aeabi_dsub+0x5cc>
 8002174:	4c60      	ldr	r4, [pc, #384]	; (80022f8 <__aeabi_dsub+0x358>)
 8002176:	42a2      	cmp	r2, r4
 8002178:	d100      	bne.n	800217c <__aeabi_dsub+0x1dc>
 800217a:	e1bd      	b.n	80024f8 <__aeabi_dsub+0x558>
 800217c:	002a      	movs	r2, r5
 800217e:	e0f0      	b.n	8002362 <__aeabi_dsub+0x3c2>
 8002180:	0008      	movs	r0, r1
 8002182:	4338      	orrs	r0, r7
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x1e8>
 8002186:	e0c3      	b.n	8002310 <__aeabi_dsub+0x370>
 8002188:	1e50      	subs	r0, r2, #1
 800218a:	2a01      	cmp	r2, #1
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x1f0>
 800218e:	e1a8      	b.n	80024e2 <__aeabi_dsub+0x542>
 8002190:	4c59      	ldr	r4, [pc, #356]	; (80022f8 <__aeabi_dsub+0x358>)
 8002192:	42a2      	cmp	r2, r4
 8002194:	d100      	bne.n	8002198 <__aeabi_dsub+0x1f8>
 8002196:	e087      	b.n	80022a8 <__aeabi_dsub+0x308>
 8002198:	0002      	movs	r2, r0
 800219a:	e736      	b.n	800200a <__aeabi_dsub+0x6a>
 800219c:	2201      	movs	r2, #1
 800219e:	4056      	eors	r6, r2
 80021a0:	46b3      	mov	fp, r6
 80021a2:	42b5      	cmp	r5, r6
 80021a4:	d000      	beq.n	80021a8 <__aeabi_dsub+0x208>
 80021a6:	e721      	b.n	8001fec <__aeabi_dsub+0x4c>
 80021a8:	4a55      	ldr	r2, [pc, #340]	; (8002300 <__aeabi_dsub+0x360>)
 80021aa:	4442      	add	r2, r8
 80021ac:	2a00      	cmp	r2, #0
 80021ae:	d100      	bne.n	80021b2 <__aeabi_dsub+0x212>
 80021b0:	e0b5      	b.n	800231e <__aeabi_dsub+0x37e>
 80021b2:	4642      	mov	r2, r8
 80021b4:	4644      	mov	r4, r8
 80021b6:	1a82      	subs	r2, r0, r2
 80021b8:	2c00      	cmp	r4, #0
 80021ba:	d100      	bne.n	80021be <__aeabi_dsub+0x21e>
 80021bc:	e138      	b.n	8002430 <__aeabi_dsub+0x490>
 80021be:	4e4e      	ldr	r6, [pc, #312]	; (80022f8 <__aeabi_dsub+0x358>)
 80021c0:	42b0      	cmp	r0, r6
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dsub+0x226>
 80021c4:	e1de      	b.n	8002584 <__aeabi_dsub+0x5e4>
 80021c6:	2680      	movs	r6, #128	; 0x80
 80021c8:	4664      	mov	r4, ip
 80021ca:	0436      	lsls	r6, r6, #16
 80021cc:	4334      	orrs	r4, r6
 80021ce:	46a4      	mov	ip, r4
 80021d0:	2a38      	cmp	r2, #56	; 0x38
 80021d2:	dd00      	ble.n	80021d6 <__aeabi_dsub+0x236>
 80021d4:	e196      	b.n	8002504 <__aeabi_dsub+0x564>
 80021d6:	2a1f      	cmp	r2, #31
 80021d8:	dd00      	ble.n	80021dc <__aeabi_dsub+0x23c>
 80021da:	e224      	b.n	8002626 <__aeabi_dsub+0x686>
 80021dc:	2620      	movs	r6, #32
 80021de:	1ab4      	subs	r4, r6, r2
 80021e0:	46a2      	mov	sl, r4
 80021e2:	4664      	mov	r4, ip
 80021e4:	4656      	mov	r6, sl
 80021e6:	40b4      	lsls	r4, r6
 80021e8:	46a1      	mov	r9, r4
 80021ea:	001c      	movs	r4, r3
 80021ec:	464e      	mov	r6, r9
 80021ee:	40d4      	lsrs	r4, r2
 80021f0:	4326      	orrs	r6, r4
 80021f2:	0034      	movs	r4, r6
 80021f4:	4656      	mov	r6, sl
 80021f6:	40b3      	lsls	r3, r6
 80021f8:	1e5e      	subs	r6, r3, #1
 80021fa:	41b3      	sbcs	r3, r6
 80021fc:	431c      	orrs	r4, r3
 80021fe:	4663      	mov	r3, ip
 8002200:	40d3      	lsrs	r3, r2
 8002202:	18c9      	adds	r1, r1, r3
 8002204:	19e4      	adds	r4, r4, r7
 8002206:	42bc      	cmp	r4, r7
 8002208:	41bf      	sbcs	r7, r7
 800220a:	427f      	negs	r7, r7
 800220c:	46b9      	mov	r9, r7
 800220e:	4680      	mov	r8, r0
 8002210:	4489      	add	r9, r1
 8002212:	e0d8      	b.n	80023c6 <__aeabi_dsub+0x426>
 8002214:	4640      	mov	r0, r8
 8002216:	4c3b      	ldr	r4, [pc, #236]	; (8002304 <__aeabi_dsub+0x364>)
 8002218:	3001      	adds	r0, #1
 800221a:	4220      	tst	r0, r4
 800221c:	d000      	beq.n	8002220 <__aeabi_dsub+0x280>
 800221e:	e0b4      	b.n	800238a <__aeabi_dsub+0x3ea>
 8002220:	4640      	mov	r0, r8
 8002222:	2800      	cmp	r0, #0
 8002224:	d000      	beq.n	8002228 <__aeabi_dsub+0x288>
 8002226:	e144      	b.n	80024b2 <__aeabi_dsub+0x512>
 8002228:	4660      	mov	r0, ip
 800222a:	4318      	orrs	r0, r3
 800222c:	d100      	bne.n	8002230 <__aeabi_dsub+0x290>
 800222e:	e190      	b.n	8002552 <__aeabi_dsub+0x5b2>
 8002230:	0008      	movs	r0, r1
 8002232:	4338      	orrs	r0, r7
 8002234:	d000      	beq.n	8002238 <__aeabi_dsub+0x298>
 8002236:	e1aa      	b.n	800258e <__aeabi_dsub+0x5ee>
 8002238:	4661      	mov	r1, ip
 800223a:	08db      	lsrs	r3, r3, #3
 800223c:	0749      	lsls	r1, r1, #29
 800223e:	430b      	orrs	r3, r1
 8002240:	4661      	mov	r1, ip
 8002242:	08cc      	lsrs	r4, r1, #3
 8002244:	e027      	b.n	8002296 <__aeabi_dsub+0x2f6>
 8002246:	0008      	movs	r0, r1
 8002248:	4338      	orrs	r0, r7
 800224a:	d061      	beq.n	8002310 <__aeabi_dsub+0x370>
 800224c:	1e50      	subs	r0, r2, #1
 800224e:	2a01      	cmp	r2, #1
 8002250:	d100      	bne.n	8002254 <__aeabi_dsub+0x2b4>
 8002252:	e139      	b.n	80024c8 <__aeabi_dsub+0x528>
 8002254:	42a2      	cmp	r2, r4
 8002256:	d027      	beq.n	80022a8 <__aeabi_dsub+0x308>
 8002258:	0002      	movs	r2, r0
 800225a:	e75d      	b.n	8002118 <__aeabi_dsub+0x178>
 800225c:	0002      	movs	r2, r0
 800225e:	391f      	subs	r1, #31
 8002260:	40ca      	lsrs	r2, r1
 8002262:	0011      	movs	r1, r2
 8002264:	2b20      	cmp	r3, #32
 8002266:	d003      	beq.n	8002270 <__aeabi_dsub+0x2d0>
 8002268:	2240      	movs	r2, #64	; 0x40
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	4098      	lsls	r0, r3
 800226e:	4304      	orrs	r4, r0
 8002270:	1e63      	subs	r3, r4, #1
 8002272:	419c      	sbcs	r4, r3
 8002274:	2300      	movs	r3, #0
 8002276:	4699      	mov	r9, r3
 8002278:	4698      	mov	r8, r3
 800227a:	430c      	orrs	r4, r1
 800227c:	0763      	lsls	r3, r4, #29
 800227e:	d000      	beq.n	8002282 <__aeabi_dsub+0x2e2>
 8002280:	e712      	b.n	80020a8 <__aeabi_dsub+0x108>
 8002282:	464b      	mov	r3, r9
 8002284:	464a      	mov	r2, r9
 8002286:	08e4      	lsrs	r4, r4, #3
 8002288:	075b      	lsls	r3, r3, #29
 800228a:	4323      	orrs	r3, r4
 800228c:	08d4      	lsrs	r4, r2, #3
 800228e:	4642      	mov	r2, r8
 8002290:	4919      	ldr	r1, [pc, #100]	; (80022f8 <__aeabi_dsub+0x358>)
 8002292:	428a      	cmp	r2, r1
 8002294:	d00e      	beq.n	80022b4 <__aeabi_dsub+0x314>
 8002296:	0324      	lsls	r4, r4, #12
 8002298:	0552      	lsls	r2, r2, #21
 800229a:	0b24      	lsrs	r4, r4, #12
 800229c:	0d52      	lsrs	r2, r2, #21
 800229e:	e722      	b.n	80020e6 <__aeabi_dsub+0x146>
 80022a0:	000a      	movs	r2, r1
 80022a2:	2400      	movs	r4, #0
 80022a4:	2300      	movs	r3, #0
 80022a6:	e71e      	b.n	80020e6 <__aeabi_dsub+0x146>
 80022a8:	08db      	lsrs	r3, r3, #3
 80022aa:	4662      	mov	r2, ip
 80022ac:	0752      	lsls	r2, r2, #29
 80022ae:	4313      	orrs	r3, r2
 80022b0:	4662      	mov	r2, ip
 80022b2:	08d4      	lsrs	r4, r2, #3
 80022b4:	001a      	movs	r2, r3
 80022b6:	4322      	orrs	r2, r4
 80022b8:	d100      	bne.n	80022bc <__aeabi_dsub+0x31c>
 80022ba:	e1fc      	b.n	80026b6 <__aeabi_dsub+0x716>
 80022bc:	2280      	movs	r2, #128	; 0x80
 80022be:	0312      	lsls	r2, r2, #12
 80022c0:	4314      	orrs	r4, r2
 80022c2:	0324      	lsls	r4, r4, #12
 80022c4:	4a0c      	ldr	r2, [pc, #48]	; (80022f8 <__aeabi_dsub+0x358>)
 80022c6:	0b24      	lsrs	r4, r4, #12
 80022c8:	e70d      	b.n	80020e6 <__aeabi_dsub+0x146>
 80022ca:	0020      	movs	r0, r4
 80022cc:	f000 fb26 	bl	800291c <__clzsi2>
 80022d0:	0001      	movs	r1, r0
 80022d2:	3118      	adds	r1, #24
 80022d4:	291f      	cmp	r1, #31
 80022d6:	dc00      	bgt.n	80022da <__aeabi_dsub+0x33a>
 80022d8:	e6c4      	b.n	8002064 <__aeabi_dsub+0xc4>
 80022da:	3808      	subs	r0, #8
 80022dc:	4084      	lsls	r4, r0
 80022de:	4643      	mov	r3, r8
 80022e0:	0020      	movs	r0, r4
 80022e2:	2400      	movs	r4, #0
 80022e4:	4588      	cmp	r8, r1
 80022e6:	dc00      	bgt.n	80022ea <__aeabi_dsub+0x34a>
 80022e8:	e6c8      	b.n	800207c <__aeabi_dsub+0xdc>
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <__aeabi_dsub+0x35c>)
 80022ec:	1a5b      	subs	r3, r3, r1
 80022ee:	4010      	ands	r0, r2
 80022f0:	4698      	mov	r8, r3
 80022f2:	4681      	mov	r9, r0
 80022f4:	e6d6      	b.n	80020a4 <__aeabi_dsub+0x104>
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	000007ff 	.word	0x000007ff
 80022fc:	ff7fffff 	.word	0xff7fffff
 8002300:	fffff801 	.word	0xfffff801
 8002304:	000007fe 	.word	0x000007fe
 8002308:	430f      	orrs	r7, r1
 800230a:	1e7a      	subs	r2, r7, #1
 800230c:	4197      	sbcs	r7, r2
 800230e:	e691      	b.n	8002034 <__aeabi_dsub+0x94>
 8002310:	4661      	mov	r1, ip
 8002312:	08db      	lsrs	r3, r3, #3
 8002314:	0749      	lsls	r1, r1, #29
 8002316:	430b      	orrs	r3, r1
 8002318:	4661      	mov	r1, ip
 800231a:	08cc      	lsrs	r4, r1, #3
 800231c:	e7b8      	b.n	8002290 <__aeabi_dsub+0x2f0>
 800231e:	4640      	mov	r0, r8
 8002320:	4cd3      	ldr	r4, [pc, #844]	; (8002670 <__aeabi_dsub+0x6d0>)
 8002322:	3001      	adds	r0, #1
 8002324:	4220      	tst	r0, r4
 8002326:	d000      	beq.n	800232a <__aeabi_dsub+0x38a>
 8002328:	e0a2      	b.n	8002470 <__aeabi_dsub+0x4d0>
 800232a:	4640      	mov	r0, r8
 800232c:	2800      	cmp	r0, #0
 800232e:	d000      	beq.n	8002332 <__aeabi_dsub+0x392>
 8002330:	e101      	b.n	8002536 <__aeabi_dsub+0x596>
 8002332:	4660      	mov	r0, ip
 8002334:	4318      	orrs	r0, r3
 8002336:	d100      	bne.n	800233a <__aeabi_dsub+0x39a>
 8002338:	e15e      	b.n	80025f8 <__aeabi_dsub+0x658>
 800233a:	0008      	movs	r0, r1
 800233c:	4338      	orrs	r0, r7
 800233e:	d000      	beq.n	8002342 <__aeabi_dsub+0x3a2>
 8002340:	e15f      	b.n	8002602 <__aeabi_dsub+0x662>
 8002342:	4661      	mov	r1, ip
 8002344:	08db      	lsrs	r3, r3, #3
 8002346:	0749      	lsls	r1, r1, #29
 8002348:	430b      	orrs	r3, r1
 800234a:	4661      	mov	r1, ip
 800234c:	08cc      	lsrs	r4, r1, #3
 800234e:	e7a2      	b.n	8002296 <__aeabi_dsub+0x2f6>
 8002350:	4dc8      	ldr	r5, [pc, #800]	; (8002674 <__aeabi_dsub+0x6d4>)
 8002352:	42a8      	cmp	r0, r5
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x3b8>
 8002356:	e0cf      	b.n	80024f8 <__aeabi_dsub+0x558>
 8002358:	2580      	movs	r5, #128	; 0x80
 800235a:	4664      	mov	r4, ip
 800235c:	042d      	lsls	r5, r5, #16
 800235e:	432c      	orrs	r4, r5
 8002360:	46a4      	mov	ip, r4
 8002362:	2a38      	cmp	r2, #56	; 0x38
 8002364:	dc56      	bgt.n	8002414 <__aeabi_dsub+0x474>
 8002366:	2a1f      	cmp	r2, #31
 8002368:	dd00      	ble.n	800236c <__aeabi_dsub+0x3cc>
 800236a:	e0d1      	b.n	8002510 <__aeabi_dsub+0x570>
 800236c:	2520      	movs	r5, #32
 800236e:	001e      	movs	r6, r3
 8002370:	1aad      	subs	r5, r5, r2
 8002372:	4664      	mov	r4, ip
 8002374:	40ab      	lsls	r3, r5
 8002376:	40ac      	lsls	r4, r5
 8002378:	40d6      	lsrs	r6, r2
 800237a:	1e5d      	subs	r5, r3, #1
 800237c:	41ab      	sbcs	r3, r5
 800237e:	4334      	orrs	r4, r6
 8002380:	4323      	orrs	r3, r4
 8002382:	4664      	mov	r4, ip
 8002384:	40d4      	lsrs	r4, r2
 8002386:	1b09      	subs	r1, r1, r4
 8002388:	e049      	b.n	800241e <__aeabi_dsub+0x47e>
 800238a:	4660      	mov	r0, ip
 800238c:	1bdc      	subs	r4, r3, r7
 800238e:	1a46      	subs	r6, r0, r1
 8002390:	42a3      	cmp	r3, r4
 8002392:	4180      	sbcs	r0, r0
 8002394:	4240      	negs	r0, r0
 8002396:	4681      	mov	r9, r0
 8002398:	0030      	movs	r0, r6
 800239a:	464e      	mov	r6, r9
 800239c:	1b80      	subs	r0, r0, r6
 800239e:	4681      	mov	r9, r0
 80023a0:	0200      	lsls	r0, r0, #8
 80023a2:	d476      	bmi.n	8002492 <__aeabi_dsub+0x4f2>
 80023a4:	464b      	mov	r3, r9
 80023a6:	4323      	orrs	r3, r4
 80023a8:	d000      	beq.n	80023ac <__aeabi_dsub+0x40c>
 80023aa:	e652      	b.n	8002052 <__aeabi_dsub+0xb2>
 80023ac:	2400      	movs	r4, #0
 80023ae:	2500      	movs	r5, #0
 80023b0:	e771      	b.n	8002296 <__aeabi_dsub+0x2f6>
 80023b2:	4339      	orrs	r1, r7
 80023b4:	000c      	movs	r4, r1
 80023b6:	1e62      	subs	r2, r4, #1
 80023b8:	4194      	sbcs	r4, r2
 80023ba:	18e4      	adds	r4, r4, r3
 80023bc:	429c      	cmp	r4, r3
 80023be:	419b      	sbcs	r3, r3
 80023c0:	425b      	negs	r3, r3
 80023c2:	4463      	add	r3, ip
 80023c4:	4699      	mov	r9, r3
 80023c6:	464b      	mov	r3, r9
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	d400      	bmi.n	80023ce <__aeabi_dsub+0x42e>
 80023cc:	e756      	b.n	800227c <__aeabi_dsub+0x2dc>
 80023ce:	2301      	movs	r3, #1
 80023d0:	469c      	mov	ip, r3
 80023d2:	4ba8      	ldr	r3, [pc, #672]	; (8002674 <__aeabi_dsub+0x6d4>)
 80023d4:	44e0      	add	r8, ip
 80023d6:	4598      	cmp	r8, r3
 80023d8:	d038      	beq.n	800244c <__aeabi_dsub+0x4ac>
 80023da:	464b      	mov	r3, r9
 80023dc:	48a6      	ldr	r0, [pc, #664]	; (8002678 <__aeabi_dsub+0x6d8>)
 80023de:	2201      	movs	r2, #1
 80023e0:	4003      	ands	r3, r0
 80023e2:	0018      	movs	r0, r3
 80023e4:	0863      	lsrs	r3, r4, #1
 80023e6:	4014      	ands	r4, r2
 80023e8:	431c      	orrs	r4, r3
 80023ea:	07c3      	lsls	r3, r0, #31
 80023ec:	431c      	orrs	r4, r3
 80023ee:	0843      	lsrs	r3, r0, #1
 80023f0:	4699      	mov	r9, r3
 80023f2:	e657      	b.n	80020a4 <__aeabi_dsub+0x104>
 80023f4:	0010      	movs	r0, r2
 80023f6:	000e      	movs	r6, r1
 80023f8:	3820      	subs	r0, #32
 80023fa:	40c6      	lsrs	r6, r0
 80023fc:	2a20      	cmp	r2, #32
 80023fe:	d004      	beq.n	800240a <__aeabi_dsub+0x46a>
 8002400:	2040      	movs	r0, #64	; 0x40
 8002402:	1a82      	subs	r2, r0, r2
 8002404:	4091      	lsls	r1, r2
 8002406:	430f      	orrs	r7, r1
 8002408:	46b9      	mov	r9, r7
 800240a:	464f      	mov	r7, r9
 800240c:	1e7a      	subs	r2, r7, #1
 800240e:	4197      	sbcs	r7, r2
 8002410:	4337      	orrs	r7, r6
 8002412:	e60f      	b.n	8002034 <__aeabi_dsub+0x94>
 8002414:	4662      	mov	r2, ip
 8002416:	431a      	orrs	r2, r3
 8002418:	0013      	movs	r3, r2
 800241a:	1e5a      	subs	r2, r3, #1
 800241c:	4193      	sbcs	r3, r2
 800241e:	1afc      	subs	r4, r7, r3
 8002420:	42a7      	cmp	r7, r4
 8002422:	41bf      	sbcs	r7, r7
 8002424:	427f      	negs	r7, r7
 8002426:	1bcb      	subs	r3, r1, r7
 8002428:	4699      	mov	r9, r3
 800242a:	465d      	mov	r5, fp
 800242c:	4680      	mov	r8, r0
 800242e:	e608      	b.n	8002042 <__aeabi_dsub+0xa2>
 8002430:	4666      	mov	r6, ip
 8002432:	431e      	orrs	r6, r3
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x498>
 8002436:	e0be      	b.n	80025b6 <__aeabi_dsub+0x616>
 8002438:	1e56      	subs	r6, r2, #1
 800243a:	2a01      	cmp	r2, #1
 800243c:	d100      	bne.n	8002440 <__aeabi_dsub+0x4a0>
 800243e:	e109      	b.n	8002654 <__aeabi_dsub+0x6b4>
 8002440:	4c8c      	ldr	r4, [pc, #560]	; (8002674 <__aeabi_dsub+0x6d4>)
 8002442:	42a2      	cmp	r2, r4
 8002444:	d100      	bne.n	8002448 <__aeabi_dsub+0x4a8>
 8002446:	e119      	b.n	800267c <__aeabi_dsub+0x6dc>
 8002448:	0032      	movs	r2, r6
 800244a:	e6c1      	b.n	80021d0 <__aeabi_dsub+0x230>
 800244c:	4642      	mov	r2, r8
 800244e:	2400      	movs	r4, #0
 8002450:	2300      	movs	r3, #0
 8002452:	e648      	b.n	80020e6 <__aeabi_dsub+0x146>
 8002454:	2020      	movs	r0, #32
 8002456:	000c      	movs	r4, r1
 8002458:	1a80      	subs	r0, r0, r2
 800245a:	003e      	movs	r6, r7
 800245c:	4087      	lsls	r7, r0
 800245e:	4084      	lsls	r4, r0
 8002460:	40d6      	lsrs	r6, r2
 8002462:	1e78      	subs	r0, r7, #1
 8002464:	4187      	sbcs	r7, r0
 8002466:	40d1      	lsrs	r1, r2
 8002468:	4334      	orrs	r4, r6
 800246a:	433c      	orrs	r4, r7
 800246c:	448c      	add	ip, r1
 800246e:	e7a4      	b.n	80023ba <__aeabi_dsub+0x41a>
 8002470:	4a80      	ldr	r2, [pc, #512]	; (8002674 <__aeabi_dsub+0x6d4>)
 8002472:	4290      	cmp	r0, r2
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x4d8>
 8002476:	e0e9      	b.n	800264c <__aeabi_dsub+0x6ac>
 8002478:	19df      	adds	r7, r3, r7
 800247a:	429f      	cmp	r7, r3
 800247c:	419b      	sbcs	r3, r3
 800247e:	4461      	add	r1, ip
 8002480:	425b      	negs	r3, r3
 8002482:	18c9      	adds	r1, r1, r3
 8002484:	07cc      	lsls	r4, r1, #31
 8002486:	087f      	lsrs	r7, r7, #1
 8002488:	084b      	lsrs	r3, r1, #1
 800248a:	4699      	mov	r9, r3
 800248c:	4680      	mov	r8, r0
 800248e:	433c      	orrs	r4, r7
 8002490:	e6f4      	b.n	800227c <__aeabi_dsub+0x2dc>
 8002492:	1afc      	subs	r4, r7, r3
 8002494:	42a7      	cmp	r7, r4
 8002496:	41bf      	sbcs	r7, r7
 8002498:	4663      	mov	r3, ip
 800249a:	427f      	negs	r7, r7
 800249c:	1ac9      	subs	r1, r1, r3
 800249e:	1bcb      	subs	r3, r1, r7
 80024a0:	4699      	mov	r9, r3
 80024a2:	465d      	mov	r5, fp
 80024a4:	e5d5      	b.n	8002052 <__aeabi_dsub+0xb2>
 80024a6:	08ff      	lsrs	r7, r7, #3
 80024a8:	074b      	lsls	r3, r1, #29
 80024aa:	465d      	mov	r5, fp
 80024ac:	433b      	orrs	r3, r7
 80024ae:	08cc      	lsrs	r4, r1, #3
 80024b0:	e6ee      	b.n	8002290 <__aeabi_dsub+0x2f0>
 80024b2:	4662      	mov	r2, ip
 80024b4:	431a      	orrs	r2, r3
 80024b6:	d000      	beq.n	80024ba <__aeabi_dsub+0x51a>
 80024b8:	e082      	b.n	80025c0 <__aeabi_dsub+0x620>
 80024ba:	000b      	movs	r3, r1
 80024bc:	433b      	orrs	r3, r7
 80024be:	d11b      	bne.n	80024f8 <__aeabi_dsub+0x558>
 80024c0:	2480      	movs	r4, #128	; 0x80
 80024c2:	2500      	movs	r5, #0
 80024c4:	0324      	lsls	r4, r4, #12
 80024c6:	e6f9      	b.n	80022bc <__aeabi_dsub+0x31c>
 80024c8:	19dc      	adds	r4, r3, r7
 80024ca:	429c      	cmp	r4, r3
 80024cc:	419b      	sbcs	r3, r3
 80024ce:	4461      	add	r1, ip
 80024d0:	4689      	mov	r9, r1
 80024d2:	425b      	negs	r3, r3
 80024d4:	4499      	add	r9, r3
 80024d6:	464b      	mov	r3, r9
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	d444      	bmi.n	8002566 <__aeabi_dsub+0x5c6>
 80024dc:	2301      	movs	r3, #1
 80024de:	4698      	mov	r8, r3
 80024e0:	e6cc      	b.n	800227c <__aeabi_dsub+0x2dc>
 80024e2:	1bdc      	subs	r4, r3, r7
 80024e4:	4662      	mov	r2, ip
 80024e6:	42a3      	cmp	r3, r4
 80024e8:	419b      	sbcs	r3, r3
 80024ea:	1a51      	subs	r1, r2, r1
 80024ec:	425b      	negs	r3, r3
 80024ee:	1acb      	subs	r3, r1, r3
 80024f0:	4699      	mov	r9, r3
 80024f2:	2301      	movs	r3, #1
 80024f4:	4698      	mov	r8, r3
 80024f6:	e5a4      	b.n	8002042 <__aeabi_dsub+0xa2>
 80024f8:	08ff      	lsrs	r7, r7, #3
 80024fa:	074b      	lsls	r3, r1, #29
 80024fc:	465d      	mov	r5, fp
 80024fe:	433b      	orrs	r3, r7
 8002500:	08cc      	lsrs	r4, r1, #3
 8002502:	e6d7      	b.n	80022b4 <__aeabi_dsub+0x314>
 8002504:	4662      	mov	r2, ip
 8002506:	431a      	orrs	r2, r3
 8002508:	0014      	movs	r4, r2
 800250a:	1e63      	subs	r3, r4, #1
 800250c:	419c      	sbcs	r4, r3
 800250e:	e679      	b.n	8002204 <__aeabi_dsub+0x264>
 8002510:	0015      	movs	r5, r2
 8002512:	4664      	mov	r4, ip
 8002514:	3d20      	subs	r5, #32
 8002516:	40ec      	lsrs	r4, r5
 8002518:	46a0      	mov	r8, r4
 800251a:	2a20      	cmp	r2, #32
 800251c:	d005      	beq.n	800252a <__aeabi_dsub+0x58a>
 800251e:	2540      	movs	r5, #64	; 0x40
 8002520:	4664      	mov	r4, ip
 8002522:	1aaa      	subs	r2, r5, r2
 8002524:	4094      	lsls	r4, r2
 8002526:	4323      	orrs	r3, r4
 8002528:	469a      	mov	sl, r3
 800252a:	4654      	mov	r4, sl
 800252c:	1e63      	subs	r3, r4, #1
 800252e:	419c      	sbcs	r4, r3
 8002530:	4643      	mov	r3, r8
 8002532:	4323      	orrs	r3, r4
 8002534:	e773      	b.n	800241e <__aeabi_dsub+0x47e>
 8002536:	4662      	mov	r2, ip
 8002538:	431a      	orrs	r2, r3
 800253a:	d023      	beq.n	8002584 <__aeabi_dsub+0x5e4>
 800253c:	000a      	movs	r2, r1
 800253e:	433a      	orrs	r2, r7
 8002540:	d000      	beq.n	8002544 <__aeabi_dsub+0x5a4>
 8002542:	e0a0      	b.n	8002686 <__aeabi_dsub+0x6e6>
 8002544:	4662      	mov	r2, ip
 8002546:	08db      	lsrs	r3, r3, #3
 8002548:	0752      	lsls	r2, r2, #29
 800254a:	4313      	orrs	r3, r2
 800254c:	4662      	mov	r2, ip
 800254e:	08d4      	lsrs	r4, r2, #3
 8002550:	e6b0      	b.n	80022b4 <__aeabi_dsub+0x314>
 8002552:	000b      	movs	r3, r1
 8002554:	433b      	orrs	r3, r7
 8002556:	d100      	bne.n	800255a <__aeabi_dsub+0x5ba>
 8002558:	e728      	b.n	80023ac <__aeabi_dsub+0x40c>
 800255a:	08ff      	lsrs	r7, r7, #3
 800255c:	074b      	lsls	r3, r1, #29
 800255e:	465d      	mov	r5, fp
 8002560:	433b      	orrs	r3, r7
 8002562:	08cc      	lsrs	r4, r1, #3
 8002564:	e697      	b.n	8002296 <__aeabi_dsub+0x2f6>
 8002566:	2302      	movs	r3, #2
 8002568:	4698      	mov	r8, r3
 800256a:	e736      	b.n	80023da <__aeabi_dsub+0x43a>
 800256c:	1afc      	subs	r4, r7, r3
 800256e:	42a7      	cmp	r7, r4
 8002570:	41bf      	sbcs	r7, r7
 8002572:	4663      	mov	r3, ip
 8002574:	427f      	negs	r7, r7
 8002576:	1ac9      	subs	r1, r1, r3
 8002578:	1bcb      	subs	r3, r1, r7
 800257a:	4699      	mov	r9, r3
 800257c:	2301      	movs	r3, #1
 800257e:	465d      	mov	r5, fp
 8002580:	4698      	mov	r8, r3
 8002582:	e55e      	b.n	8002042 <__aeabi_dsub+0xa2>
 8002584:	074b      	lsls	r3, r1, #29
 8002586:	08ff      	lsrs	r7, r7, #3
 8002588:	433b      	orrs	r3, r7
 800258a:	08cc      	lsrs	r4, r1, #3
 800258c:	e692      	b.n	80022b4 <__aeabi_dsub+0x314>
 800258e:	1bdc      	subs	r4, r3, r7
 8002590:	4660      	mov	r0, ip
 8002592:	42a3      	cmp	r3, r4
 8002594:	41b6      	sbcs	r6, r6
 8002596:	1a40      	subs	r0, r0, r1
 8002598:	4276      	negs	r6, r6
 800259a:	1b80      	subs	r0, r0, r6
 800259c:	4681      	mov	r9, r0
 800259e:	0200      	lsls	r0, r0, #8
 80025a0:	d560      	bpl.n	8002664 <__aeabi_dsub+0x6c4>
 80025a2:	1afc      	subs	r4, r7, r3
 80025a4:	42a7      	cmp	r7, r4
 80025a6:	41bf      	sbcs	r7, r7
 80025a8:	4663      	mov	r3, ip
 80025aa:	427f      	negs	r7, r7
 80025ac:	1ac9      	subs	r1, r1, r3
 80025ae:	1bcb      	subs	r3, r1, r7
 80025b0:	4699      	mov	r9, r3
 80025b2:	465d      	mov	r5, fp
 80025b4:	e576      	b.n	80020a4 <__aeabi_dsub+0x104>
 80025b6:	08ff      	lsrs	r7, r7, #3
 80025b8:	074b      	lsls	r3, r1, #29
 80025ba:	433b      	orrs	r3, r7
 80025bc:	08cc      	lsrs	r4, r1, #3
 80025be:	e667      	b.n	8002290 <__aeabi_dsub+0x2f0>
 80025c0:	000a      	movs	r2, r1
 80025c2:	08db      	lsrs	r3, r3, #3
 80025c4:	433a      	orrs	r2, r7
 80025c6:	d100      	bne.n	80025ca <__aeabi_dsub+0x62a>
 80025c8:	e66f      	b.n	80022aa <__aeabi_dsub+0x30a>
 80025ca:	4662      	mov	r2, ip
 80025cc:	0752      	lsls	r2, r2, #29
 80025ce:	4313      	orrs	r3, r2
 80025d0:	4662      	mov	r2, ip
 80025d2:	08d4      	lsrs	r4, r2, #3
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	0312      	lsls	r2, r2, #12
 80025d8:	4214      	tst	r4, r2
 80025da:	d007      	beq.n	80025ec <__aeabi_dsub+0x64c>
 80025dc:	08c8      	lsrs	r0, r1, #3
 80025de:	4210      	tst	r0, r2
 80025e0:	d104      	bne.n	80025ec <__aeabi_dsub+0x64c>
 80025e2:	465d      	mov	r5, fp
 80025e4:	0004      	movs	r4, r0
 80025e6:	08fb      	lsrs	r3, r7, #3
 80025e8:	0749      	lsls	r1, r1, #29
 80025ea:	430b      	orrs	r3, r1
 80025ec:	0f5a      	lsrs	r2, r3, #29
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	0752      	lsls	r2, r2, #29
 80025f4:	4313      	orrs	r3, r2
 80025f6:	e65d      	b.n	80022b4 <__aeabi_dsub+0x314>
 80025f8:	074b      	lsls	r3, r1, #29
 80025fa:	08ff      	lsrs	r7, r7, #3
 80025fc:	433b      	orrs	r3, r7
 80025fe:	08cc      	lsrs	r4, r1, #3
 8002600:	e649      	b.n	8002296 <__aeabi_dsub+0x2f6>
 8002602:	19dc      	adds	r4, r3, r7
 8002604:	429c      	cmp	r4, r3
 8002606:	419b      	sbcs	r3, r3
 8002608:	4461      	add	r1, ip
 800260a:	4689      	mov	r9, r1
 800260c:	425b      	negs	r3, r3
 800260e:	4499      	add	r9, r3
 8002610:	464b      	mov	r3, r9
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	d400      	bmi.n	8002618 <__aeabi_dsub+0x678>
 8002616:	e631      	b.n	800227c <__aeabi_dsub+0x2dc>
 8002618:	464a      	mov	r2, r9
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <__aeabi_dsub+0x6d8>)
 800261c:	401a      	ands	r2, r3
 800261e:	2301      	movs	r3, #1
 8002620:	4691      	mov	r9, r2
 8002622:	4698      	mov	r8, r3
 8002624:	e62a      	b.n	800227c <__aeabi_dsub+0x2dc>
 8002626:	0016      	movs	r6, r2
 8002628:	4664      	mov	r4, ip
 800262a:	3e20      	subs	r6, #32
 800262c:	40f4      	lsrs	r4, r6
 800262e:	46a0      	mov	r8, r4
 8002630:	2a20      	cmp	r2, #32
 8002632:	d005      	beq.n	8002640 <__aeabi_dsub+0x6a0>
 8002634:	2640      	movs	r6, #64	; 0x40
 8002636:	4664      	mov	r4, ip
 8002638:	1ab2      	subs	r2, r6, r2
 800263a:	4094      	lsls	r4, r2
 800263c:	4323      	orrs	r3, r4
 800263e:	469a      	mov	sl, r3
 8002640:	4654      	mov	r4, sl
 8002642:	1e63      	subs	r3, r4, #1
 8002644:	419c      	sbcs	r4, r3
 8002646:	4643      	mov	r3, r8
 8002648:	431c      	orrs	r4, r3
 800264a:	e5db      	b.n	8002204 <__aeabi_dsub+0x264>
 800264c:	0002      	movs	r2, r0
 800264e:	2400      	movs	r4, #0
 8002650:	2300      	movs	r3, #0
 8002652:	e548      	b.n	80020e6 <__aeabi_dsub+0x146>
 8002654:	19dc      	adds	r4, r3, r7
 8002656:	42bc      	cmp	r4, r7
 8002658:	41bf      	sbcs	r7, r7
 800265a:	4461      	add	r1, ip
 800265c:	4689      	mov	r9, r1
 800265e:	427f      	negs	r7, r7
 8002660:	44b9      	add	r9, r7
 8002662:	e738      	b.n	80024d6 <__aeabi_dsub+0x536>
 8002664:	464b      	mov	r3, r9
 8002666:	4323      	orrs	r3, r4
 8002668:	d100      	bne.n	800266c <__aeabi_dsub+0x6cc>
 800266a:	e69f      	b.n	80023ac <__aeabi_dsub+0x40c>
 800266c:	e606      	b.n	800227c <__aeabi_dsub+0x2dc>
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	000007fe 	.word	0x000007fe
 8002674:	000007ff 	.word	0x000007ff
 8002678:	ff7fffff 	.word	0xff7fffff
 800267c:	08ff      	lsrs	r7, r7, #3
 800267e:	074b      	lsls	r3, r1, #29
 8002680:	433b      	orrs	r3, r7
 8002682:	08cc      	lsrs	r4, r1, #3
 8002684:	e616      	b.n	80022b4 <__aeabi_dsub+0x314>
 8002686:	4662      	mov	r2, ip
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	0752      	lsls	r2, r2, #29
 800268c:	4313      	orrs	r3, r2
 800268e:	4662      	mov	r2, ip
 8002690:	08d4      	lsrs	r4, r2, #3
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	0312      	lsls	r2, r2, #12
 8002696:	4214      	tst	r4, r2
 8002698:	d007      	beq.n	80026aa <__aeabi_dsub+0x70a>
 800269a:	08c8      	lsrs	r0, r1, #3
 800269c:	4210      	tst	r0, r2
 800269e:	d104      	bne.n	80026aa <__aeabi_dsub+0x70a>
 80026a0:	465d      	mov	r5, fp
 80026a2:	0004      	movs	r4, r0
 80026a4:	08fb      	lsrs	r3, r7, #3
 80026a6:	0749      	lsls	r1, r1, #29
 80026a8:	430b      	orrs	r3, r1
 80026aa:	0f5a      	lsrs	r2, r3, #29
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	0752      	lsls	r2, r2, #29
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	4313      	orrs	r3, r2
 80026b4:	e5fe      	b.n	80022b4 <__aeabi_dsub+0x314>
 80026b6:	2300      	movs	r3, #0
 80026b8:	4a01      	ldr	r2, [pc, #4]	; (80026c0 <__aeabi_dsub+0x720>)
 80026ba:	001c      	movs	r4, r3
 80026bc:	e513      	b.n	80020e6 <__aeabi_dsub+0x146>
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	000007ff 	.word	0x000007ff

080026c4 <__aeabi_dcmpun>:
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	0005      	movs	r5, r0
 80026c8:	480c      	ldr	r0, [pc, #48]	; (80026fc <__aeabi_dcmpun+0x38>)
 80026ca:	031c      	lsls	r4, r3, #12
 80026cc:	0016      	movs	r6, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	030a      	lsls	r2, r1, #12
 80026d2:	0049      	lsls	r1, r1, #1
 80026d4:	0b12      	lsrs	r2, r2, #12
 80026d6:	0d49      	lsrs	r1, r1, #21
 80026d8:	0b24      	lsrs	r4, r4, #12
 80026da:	0d5b      	lsrs	r3, r3, #21
 80026dc:	4281      	cmp	r1, r0
 80026de:	d008      	beq.n	80026f2 <__aeabi_dcmpun+0x2e>
 80026e0:	4a06      	ldr	r2, [pc, #24]	; (80026fc <__aeabi_dcmpun+0x38>)
 80026e2:	2000      	movs	r0, #0
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d103      	bne.n	80026f0 <__aeabi_dcmpun+0x2c>
 80026e8:	0020      	movs	r0, r4
 80026ea:	4330      	orrs	r0, r6
 80026ec:	1e43      	subs	r3, r0, #1
 80026ee:	4198      	sbcs	r0, r3
 80026f0:	bd70      	pop	{r4, r5, r6, pc}
 80026f2:	2001      	movs	r0, #1
 80026f4:	432a      	orrs	r2, r5
 80026f6:	d1fb      	bne.n	80026f0 <__aeabi_dcmpun+0x2c>
 80026f8:	e7f2      	b.n	80026e0 <__aeabi_dcmpun+0x1c>
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	000007ff 	.word	0x000007ff

08002700 <__aeabi_d2iz>:
 8002700:	000a      	movs	r2, r1
 8002702:	b530      	push	{r4, r5, lr}
 8002704:	4c13      	ldr	r4, [pc, #76]	; (8002754 <__aeabi_d2iz+0x54>)
 8002706:	0053      	lsls	r3, r2, #1
 8002708:	0309      	lsls	r1, r1, #12
 800270a:	0005      	movs	r5, r0
 800270c:	0b09      	lsrs	r1, r1, #12
 800270e:	2000      	movs	r0, #0
 8002710:	0d5b      	lsrs	r3, r3, #21
 8002712:	0fd2      	lsrs	r2, r2, #31
 8002714:	42a3      	cmp	r3, r4
 8002716:	dd04      	ble.n	8002722 <__aeabi_d2iz+0x22>
 8002718:	480f      	ldr	r0, [pc, #60]	; (8002758 <__aeabi_d2iz+0x58>)
 800271a:	4283      	cmp	r3, r0
 800271c:	dd02      	ble.n	8002724 <__aeabi_d2iz+0x24>
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <__aeabi_d2iz+0x5c>)
 8002720:	18d0      	adds	r0, r2, r3
 8002722:	bd30      	pop	{r4, r5, pc}
 8002724:	2080      	movs	r0, #128	; 0x80
 8002726:	0340      	lsls	r0, r0, #13
 8002728:	4301      	orrs	r1, r0
 800272a:	480d      	ldr	r0, [pc, #52]	; (8002760 <__aeabi_d2iz+0x60>)
 800272c:	1ac0      	subs	r0, r0, r3
 800272e:	281f      	cmp	r0, #31
 8002730:	dd08      	ble.n	8002744 <__aeabi_d2iz+0x44>
 8002732:	480c      	ldr	r0, [pc, #48]	; (8002764 <__aeabi_d2iz+0x64>)
 8002734:	1ac3      	subs	r3, r0, r3
 8002736:	40d9      	lsrs	r1, r3
 8002738:	000b      	movs	r3, r1
 800273a:	4258      	negs	r0, r3
 800273c:	2a00      	cmp	r2, #0
 800273e:	d1f0      	bne.n	8002722 <__aeabi_d2iz+0x22>
 8002740:	0018      	movs	r0, r3
 8002742:	e7ee      	b.n	8002722 <__aeabi_d2iz+0x22>
 8002744:	4c08      	ldr	r4, [pc, #32]	; (8002768 <__aeabi_d2iz+0x68>)
 8002746:	40c5      	lsrs	r5, r0
 8002748:	46a4      	mov	ip, r4
 800274a:	4463      	add	r3, ip
 800274c:	4099      	lsls	r1, r3
 800274e:	000b      	movs	r3, r1
 8002750:	432b      	orrs	r3, r5
 8002752:	e7f2      	b.n	800273a <__aeabi_d2iz+0x3a>
 8002754:	000003fe 	.word	0x000003fe
 8002758:	0000041d 	.word	0x0000041d
 800275c:	7fffffff 	.word	0x7fffffff
 8002760:	00000433 	.word	0x00000433
 8002764:	00000413 	.word	0x00000413
 8002768:	fffffbed 	.word	0xfffffbed

0800276c <__aeabi_i2d>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	2800      	cmp	r0, #0
 8002770:	d016      	beq.n	80027a0 <__aeabi_i2d+0x34>
 8002772:	17c3      	asrs	r3, r0, #31
 8002774:	18c5      	adds	r5, r0, r3
 8002776:	405d      	eors	r5, r3
 8002778:	0fc4      	lsrs	r4, r0, #31
 800277a:	0028      	movs	r0, r5
 800277c:	f000 f8ce 	bl	800291c <__clzsi2>
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <__aeabi_i2d+0x5c>)
 8002782:	1a12      	subs	r2, r2, r0
 8002784:	280a      	cmp	r0, #10
 8002786:	dc16      	bgt.n	80027b6 <__aeabi_i2d+0x4a>
 8002788:	0003      	movs	r3, r0
 800278a:	002e      	movs	r6, r5
 800278c:	3315      	adds	r3, #21
 800278e:	409e      	lsls	r6, r3
 8002790:	230b      	movs	r3, #11
 8002792:	1a18      	subs	r0, r3, r0
 8002794:	40c5      	lsrs	r5, r0
 8002796:	0552      	lsls	r2, r2, #21
 8002798:	032d      	lsls	r5, r5, #12
 800279a:	0b2d      	lsrs	r5, r5, #12
 800279c:	0d53      	lsrs	r3, r2, #21
 800279e:	e003      	b.n	80027a8 <__aeabi_i2d+0x3c>
 80027a0:	2400      	movs	r4, #0
 80027a2:	2300      	movs	r3, #0
 80027a4:	2500      	movs	r5, #0
 80027a6:	2600      	movs	r6, #0
 80027a8:	051b      	lsls	r3, r3, #20
 80027aa:	432b      	orrs	r3, r5
 80027ac:	07e4      	lsls	r4, r4, #31
 80027ae:	4323      	orrs	r3, r4
 80027b0:	0030      	movs	r0, r6
 80027b2:	0019      	movs	r1, r3
 80027b4:	bd70      	pop	{r4, r5, r6, pc}
 80027b6:	380b      	subs	r0, #11
 80027b8:	4085      	lsls	r5, r0
 80027ba:	0552      	lsls	r2, r2, #21
 80027bc:	032d      	lsls	r5, r5, #12
 80027be:	2600      	movs	r6, #0
 80027c0:	0b2d      	lsrs	r5, r5, #12
 80027c2:	0d53      	lsrs	r3, r2, #21
 80027c4:	e7f0      	b.n	80027a8 <__aeabi_i2d+0x3c>
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	0000041e 	.word	0x0000041e

080027cc <__aeabi_ui2d>:
 80027cc:	b510      	push	{r4, lr}
 80027ce:	1e04      	subs	r4, r0, #0
 80027d0:	d010      	beq.n	80027f4 <__aeabi_ui2d+0x28>
 80027d2:	f000 f8a3 	bl	800291c <__clzsi2>
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <__aeabi_ui2d+0x48>)
 80027d8:	1a1b      	subs	r3, r3, r0
 80027da:	280a      	cmp	r0, #10
 80027dc:	dc11      	bgt.n	8002802 <__aeabi_ui2d+0x36>
 80027de:	220b      	movs	r2, #11
 80027e0:	0021      	movs	r1, r4
 80027e2:	1a12      	subs	r2, r2, r0
 80027e4:	40d1      	lsrs	r1, r2
 80027e6:	3015      	adds	r0, #21
 80027e8:	030a      	lsls	r2, r1, #12
 80027ea:	055b      	lsls	r3, r3, #21
 80027ec:	4084      	lsls	r4, r0
 80027ee:	0b12      	lsrs	r2, r2, #12
 80027f0:	0d5b      	lsrs	r3, r3, #21
 80027f2:	e001      	b.n	80027f8 <__aeabi_ui2d+0x2c>
 80027f4:	2300      	movs	r3, #0
 80027f6:	2200      	movs	r2, #0
 80027f8:	051b      	lsls	r3, r3, #20
 80027fa:	4313      	orrs	r3, r2
 80027fc:	0020      	movs	r0, r4
 80027fe:	0019      	movs	r1, r3
 8002800:	bd10      	pop	{r4, pc}
 8002802:	0022      	movs	r2, r4
 8002804:	380b      	subs	r0, #11
 8002806:	4082      	lsls	r2, r0
 8002808:	055b      	lsls	r3, r3, #21
 800280a:	0312      	lsls	r2, r2, #12
 800280c:	2400      	movs	r4, #0
 800280e:	0b12      	lsrs	r2, r2, #12
 8002810:	0d5b      	lsrs	r3, r3, #21
 8002812:	e7f1      	b.n	80027f8 <__aeabi_ui2d+0x2c>
 8002814:	0000041e 	.word	0x0000041e

08002818 <__aeabi_f2d>:
 8002818:	b570      	push	{r4, r5, r6, lr}
 800281a:	0043      	lsls	r3, r0, #1
 800281c:	0246      	lsls	r6, r0, #9
 800281e:	0fc4      	lsrs	r4, r0, #31
 8002820:	20fe      	movs	r0, #254	; 0xfe
 8002822:	0e1b      	lsrs	r3, r3, #24
 8002824:	1c59      	adds	r1, r3, #1
 8002826:	0a75      	lsrs	r5, r6, #9
 8002828:	4208      	tst	r0, r1
 800282a:	d00c      	beq.n	8002846 <__aeabi_f2d+0x2e>
 800282c:	22e0      	movs	r2, #224	; 0xe0
 800282e:	0092      	lsls	r2, r2, #2
 8002830:	4694      	mov	ip, r2
 8002832:	076d      	lsls	r5, r5, #29
 8002834:	0b36      	lsrs	r6, r6, #12
 8002836:	4463      	add	r3, ip
 8002838:	051b      	lsls	r3, r3, #20
 800283a:	4333      	orrs	r3, r6
 800283c:	07e4      	lsls	r4, r4, #31
 800283e:	4323      	orrs	r3, r4
 8002840:	0028      	movs	r0, r5
 8002842:	0019      	movs	r1, r3
 8002844:	bd70      	pop	{r4, r5, r6, pc}
 8002846:	2b00      	cmp	r3, #0
 8002848:	d114      	bne.n	8002874 <__aeabi_f2d+0x5c>
 800284a:	2d00      	cmp	r5, #0
 800284c:	d01b      	beq.n	8002886 <__aeabi_f2d+0x6e>
 800284e:	0028      	movs	r0, r5
 8002850:	f000 f864 	bl	800291c <__clzsi2>
 8002854:	280a      	cmp	r0, #10
 8002856:	dc1c      	bgt.n	8002892 <__aeabi_f2d+0x7a>
 8002858:	230b      	movs	r3, #11
 800285a:	002e      	movs	r6, r5
 800285c:	1a1b      	subs	r3, r3, r0
 800285e:	40de      	lsrs	r6, r3
 8002860:	0003      	movs	r3, r0
 8002862:	3315      	adds	r3, #21
 8002864:	409d      	lsls	r5, r3
 8002866:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <__aeabi_f2d+0x88>)
 8002868:	0336      	lsls	r6, r6, #12
 800286a:	1a12      	subs	r2, r2, r0
 800286c:	0552      	lsls	r2, r2, #21
 800286e:	0b36      	lsrs	r6, r6, #12
 8002870:	0d53      	lsrs	r3, r2, #21
 8002872:	e7e1      	b.n	8002838 <__aeabi_f2d+0x20>
 8002874:	2d00      	cmp	r5, #0
 8002876:	d009      	beq.n	800288c <__aeabi_f2d+0x74>
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	0b36      	lsrs	r6, r6, #12
 800287c:	0312      	lsls	r2, r2, #12
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <__aeabi_f2d+0x8c>)
 8002880:	076d      	lsls	r5, r5, #29
 8002882:	4316      	orrs	r6, r2
 8002884:	e7d8      	b.n	8002838 <__aeabi_f2d+0x20>
 8002886:	2300      	movs	r3, #0
 8002888:	2600      	movs	r6, #0
 800288a:	e7d5      	b.n	8002838 <__aeabi_f2d+0x20>
 800288c:	2600      	movs	r6, #0
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <__aeabi_f2d+0x8c>)
 8002890:	e7d2      	b.n	8002838 <__aeabi_f2d+0x20>
 8002892:	0003      	movs	r3, r0
 8002894:	3b0b      	subs	r3, #11
 8002896:	409d      	lsls	r5, r3
 8002898:	002e      	movs	r6, r5
 800289a:	2500      	movs	r5, #0
 800289c:	e7e3      	b.n	8002866 <__aeabi_f2d+0x4e>
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	00000389 	.word	0x00000389
 80028a4:	000007ff 	.word	0x000007ff

080028a8 <__aeabi_cfrcmple>:
 80028a8:	4684      	mov	ip, r0
 80028aa:	0008      	movs	r0, r1
 80028ac:	4661      	mov	r1, ip
 80028ae:	e7ff      	b.n	80028b0 <__aeabi_cfcmpeq>

080028b0 <__aeabi_cfcmpeq>:
 80028b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80028b2:	f000 f8bd 	bl	8002a30 <__lesf2>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d401      	bmi.n	80028be <__aeabi_cfcmpeq+0xe>
 80028ba:	2100      	movs	r1, #0
 80028bc:	42c8      	cmn	r0, r1
 80028be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080028c0 <__aeabi_fcmpeq>:
 80028c0:	b510      	push	{r4, lr}
 80028c2:	f000 f849 	bl	8002958 <__eqsf2>
 80028c6:	4240      	negs	r0, r0
 80028c8:	3001      	adds	r0, #1
 80028ca:	bd10      	pop	{r4, pc}

080028cc <__aeabi_fcmplt>:
 80028cc:	b510      	push	{r4, lr}
 80028ce:	f000 f8af 	bl	8002a30 <__lesf2>
 80028d2:	2800      	cmp	r0, #0
 80028d4:	db01      	blt.n	80028da <__aeabi_fcmplt+0xe>
 80028d6:	2000      	movs	r0, #0
 80028d8:	bd10      	pop	{r4, pc}
 80028da:	2001      	movs	r0, #1
 80028dc:	bd10      	pop	{r4, pc}
 80028de:	46c0      	nop			; (mov r8, r8)

080028e0 <__aeabi_fcmple>:
 80028e0:	b510      	push	{r4, lr}
 80028e2:	f000 f8a5 	bl	8002a30 <__lesf2>
 80028e6:	2800      	cmp	r0, #0
 80028e8:	dd01      	ble.n	80028ee <__aeabi_fcmple+0xe>
 80028ea:	2000      	movs	r0, #0
 80028ec:	bd10      	pop	{r4, pc}
 80028ee:	2001      	movs	r0, #1
 80028f0:	bd10      	pop	{r4, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)

080028f4 <__aeabi_fcmpgt>:
 80028f4:	b510      	push	{r4, lr}
 80028f6:	f000 f855 	bl	80029a4 <__gesf2>
 80028fa:	2800      	cmp	r0, #0
 80028fc:	dc01      	bgt.n	8002902 <__aeabi_fcmpgt+0xe>
 80028fe:	2000      	movs	r0, #0
 8002900:	bd10      	pop	{r4, pc}
 8002902:	2001      	movs	r0, #1
 8002904:	bd10      	pop	{r4, pc}
 8002906:	46c0      	nop			; (mov r8, r8)

08002908 <__aeabi_fcmpge>:
 8002908:	b510      	push	{r4, lr}
 800290a:	f000 f84b 	bl	80029a4 <__gesf2>
 800290e:	2800      	cmp	r0, #0
 8002910:	da01      	bge.n	8002916 <__aeabi_fcmpge+0xe>
 8002912:	2000      	movs	r0, #0
 8002914:	bd10      	pop	{r4, pc}
 8002916:	2001      	movs	r0, #1
 8002918:	bd10      	pop	{r4, pc}
 800291a:	46c0      	nop			; (mov r8, r8)

0800291c <__clzsi2>:
 800291c:	211c      	movs	r1, #28
 800291e:	2301      	movs	r3, #1
 8002920:	041b      	lsls	r3, r3, #16
 8002922:	4298      	cmp	r0, r3
 8002924:	d301      	bcc.n	800292a <__clzsi2+0xe>
 8002926:	0c00      	lsrs	r0, r0, #16
 8002928:	3910      	subs	r1, #16
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	4298      	cmp	r0, r3
 800292e:	d301      	bcc.n	8002934 <__clzsi2+0x18>
 8002930:	0a00      	lsrs	r0, r0, #8
 8002932:	3908      	subs	r1, #8
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	4298      	cmp	r0, r3
 8002938:	d301      	bcc.n	800293e <__clzsi2+0x22>
 800293a:	0900      	lsrs	r0, r0, #4
 800293c:	3904      	subs	r1, #4
 800293e:	a202      	add	r2, pc, #8	; (adr r2, 8002948 <__clzsi2+0x2c>)
 8002940:	5c10      	ldrb	r0, [r2, r0]
 8002942:	1840      	adds	r0, r0, r1
 8002944:	4770      	bx	lr
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	02020304 	.word	0x02020304
 800294c:	01010101 	.word	0x01010101
	...

08002958 <__eqsf2>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	0042      	lsls	r2, r0, #1
 800295c:	0245      	lsls	r5, r0, #9
 800295e:	024e      	lsls	r6, r1, #9
 8002960:	004c      	lsls	r4, r1, #1
 8002962:	0fc3      	lsrs	r3, r0, #31
 8002964:	0a6d      	lsrs	r5, r5, #9
 8002966:	2001      	movs	r0, #1
 8002968:	0e12      	lsrs	r2, r2, #24
 800296a:	0a76      	lsrs	r6, r6, #9
 800296c:	0e24      	lsrs	r4, r4, #24
 800296e:	0fc9      	lsrs	r1, r1, #31
 8002970:	2aff      	cmp	r2, #255	; 0xff
 8002972:	d006      	beq.n	8002982 <__eqsf2+0x2a>
 8002974:	2cff      	cmp	r4, #255	; 0xff
 8002976:	d003      	beq.n	8002980 <__eqsf2+0x28>
 8002978:	42a2      	cmp	r2, r4
 800297a:	d101      	bne.n	8002980 <__eqsf2+0x28>
 800297c:	42b5      	cmp	r5, r6
 800297e:	d006      	beq.n	800298e <__eqsf2+0x36>
 8002980:	bd70      	pop	{r4, r5, r6, pc}
 8002982:	2d00      	cmp	r5, #0
 8002984:	d1fc      	bne.n	8002980 <__eqsf2+0x28>
 8002986:	2cff      	cmp	r4, #255	; 0xff
 8002988:	d1fa      	bne.n	8002980 <__eqsf2+0x28>
 800298a:	2e00      	cmp	r6, #0
 800298c:	d1f8      	bne.n	8002980 <__eqsf2+0x28>
 800298e:	428b      	cmp	r3, r1
 8002990:	d006      	beq.n	80029a0 <__eqsf2+0x48>
 8002992:	2001      	movs	r0, #1
 8002994:	2a00      	cmp	r2, #0
 8002996:	d1f3      	bne.n	8002980 <__eqsf2+0x28>
 8002998:	0028      	movs	r0, r5
 800299a:	1e43      	subs	r3, r0, #1
 800299c:	4198      	sbcs	r0, r3
 800299e:	e7ef      	b.n	8002980 <__eqsf2+0x28>
 80029a0:	2000      	movs	r0, #0
 80029a2:	e7ed      	b.n	8002980 <__eqsf2+0x28>

080029a4 <__gesf2>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	0042      	lsls	r2, r0, #1
 80029a8:	0245      	lsls	r5, r0, #9
 80029aa:	024e      	lsls	r6, r1, #9
 80029ac:	004c      	lsls	r4, r1, #1
 80029ae:	0fc3      	lsrs	r3, r0, #31
 80029b0:	0a6d      	lsrs	r5, r5, #9
 80029b2:	0e12      	lsrs	r2, r2, #24
 80029b4:	0a76      	lsrs	r6, r6, #9
 80029b6:	0e24      	lsrs	r4, r4, #24
 80029b8:	0fc8      	lsrs	r0, r1, #31
 80029ba:	2aff      	cmp	r2, #255	; 0xff
 80029bc:	d01b      	beq.n	80029f6 <__gesf2+0x52>
 80029be:	2cff      	cmp	r4, #255	; 0xff
 80029c0:	d00e      	beq.n	80029e0 <__gesf2+0x3c>
 80029c2:	2a00      	cmp	r2, #0
 80029c4:	d11b      	bne.n	80029fe <__gesf2+0x5a>
 80029c6:	2c00      	cmp	r4, #0
 80029c8:	d101      	bne.n	80029ce <__gesf2+0x2a>
 80029ca:	2e00      	cmp	r6, #0
 80029cc:	d01c      	beq.n	8002a08 <__gesf2+0x64>
 80029ce:	2d00      	cmp	r5, #0
 80029d0:	d00c      	beq.n	80029ec <__gesf2+0x48>
 80029d2:	4283      	cmp	r3, r0
 80029d4:	d01c      	beq.n	8002a10 <__gesf2+0x6c>
 80029d6:	2102      	movs	r1, #2
 80029d8:	1e58      	subs	r0, r3, #1
 80029da:	4008      	ands	r0, r1
 80029dc:	3801      	subs	r0, #1
 80029de:	bd70      	pop	{r4, r5, r6, pc}
 80029e0:	2e00      	cmp	r6, #0
 80029e2:	d122      	bne.n	8002a2a <__gesf2+0x86>
 80029e4:	2a00      	cmp	r2, #0
 80029e6:	d1f4      	bne.n	80029d2 <__gesf2+0x2e>
 80029e8:	2d00      	cmp	r5, #0
 80029ea:	d1f2      	bne.n	80029d2 <__gesf2+0x2e>
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d1f6      	bne.n	80029de <__gesf2+0x3a>
 80029f0:	2001      	movs	r0, #1
 80029f2:	4240      	negs	r0, r0
 80029f4:	e7f3      	b.n	80029de <__gesf2+0x3a>
 80029f6:	2d00      	cmp	r5, #0
 80029f8:	d117      	bne.n	8002a2a <__gesf2+0x86>
 80029fa:	2cff      	cmp	r4, #255	; 0xff
 80029fc:	d0f0      	beq.n	80029e0 <__gesf2+0x3c>
 80029fe:	2c00      	cmp	r4, #0
 8002a00:	d1e7      	bne.n	80029d2 <__gesf2+0x2e>
 8002a02:	2e00      	cmp	r6, #0
 8002a04:	d1e5      	bne.n	80029d2 <__gesf2+0x2e>
 8002a06:	e7e6      	b.n	80029d6 <__gesf2+0x32>
 8002a08:	2000      	movs	r0, #0
 8002a0a:	2d00      	cmp	r5, #0
 8002a0c:	d0e7      	beq.n	80029de <__gesf2+0x3a>
 8002a0e:	e7e2      	b.n	80029d6 <__gesf2+0x32>
 8002a10:	42a2      	cmp	r2, r4
 8002a12:	dc05      	bgt.n	8002a20 <__gesf2+0x7c>
 8002a14:	dbea      	blt.n	80029ec <__gesf2+0x48>
 8002a16:	42b5      	cmp	r5, r6
 8002a18:	d802      	bhi.n	8002a20 <__gesf2+0x7c>
 8002a1a:	d3e7      	bcc.n	80029ec <__gesf2+0x48>
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	e7de      	b.n	80029de <__gesf2+0x3a>
 8002a20:	4243      	negs	r3, r0
 8002a22:	4158      	adcs	r0, r3
 8002a24:	0040      	lsls	r0, r0, #1
 8002a26:	3801      	subs	r0, #1
 8002a28:	e7d9      	b.n	80029de <__gesf2+0x3a>
 8002a2a:	2002      	movs	r0, #2
 8002a2c:	4240      	negs	r0, r0
 8002a2e:	e7d6      	b.n	80029de <__gesf2+0x3a>

08002a30 <__lesf2>:
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	0042      	lsls	r2, r0, #1
 8002a34:	0245      	lsls	r5, r0, #9
 8002a36:	024e      	lsls	r6, r1, #9
 8002a38:	004c      	lsls	r4, r1, #1
 8002a3a:	0fc3      	lsrs	r3, r0, #31
 8002a3c:	0a6d      	lsrs	r5, r5, #9
 8002a3e:	0e12      	lsrs	r2, r2, #24
 8002a40:	0a76      	lsrs	r6, r6, #9
 8002a42:	0e24      	lsrs	r4, r4, #24
 8002a44:	0fc8      	lsrs	r0, r1, #31
 8002a46:	2aff      	cmp	r2, #255	; 0xff
 8002a48:	d00b      	beq.n	8002a62 <__lesf2+0x32>
 8002a4a:	2cff      	cmp	r4, #255	; 0xff
 8002a4c:	d00d      	beq.n	8002a6a <__lesf2+0x3a>
 8002a4e:	2a00      	cmp	r2, #0
 8002a50:	d11f      	bne.n	8002a92 <__lesf2+0x62>
 8002a52:	2c00      	cmp	r4, #0
 8002a54:	d116      	bne.n	8002a84 <__lesf2+0x54>
 8002a56:	2e00      	cmp	r6, #0
 8002a58:	d114      	bne.n	8002a84 <__lesf2+0x54>
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	2d00      	cmp	r5, #0
 8002a5e:	d010      	beq.n	8002a82 <__lesf2+0x52>
 8002a60:	e009      	b.n	8002a76 <__lesf2+0x46>
 8002a62:	2d00      	cmp	r5, #0
 8002a64:	d10c      	bne.n	8002a80 <__lesf2+0x50>
 8002a66:	2cff      	cmp	r4, #255	; 0xff
 8002a68:	d113      	bne.n	8002a92 <__lesf2+0x62>
 8002a6a:	2e00      	cmp	r6, #0
 8002a6c:	d108      	bne.n	8002a80 <__lesf2+0x50>
 8002a6e:	2a00      	cmp	r2, #0
 8002a70:	d008      	beq.n	8002a84 <__lesf2+0x54>
 8002a72:	4283      	cmp	r3, r0
 8002a74:	d012      	beq.n	8002a9c <__lesf2+0x6c>
 8002a76:	2102      	movs	r1, #2
 8002a78:	1e58      	subs	r0, r3, #1
 8002a7a:	4008      	ands	r0, r1
 8002a7c:	3801      	subs	r0, #1
 8002a7e:	e000      	b.n	8002a82 <__lesf2+0x52>
 8002a80:	2002      	movs	r0, #2
 8002a82:	bd70      	pop	{r4, r5, r6, pc}
 8002a84:	2d00      	cmp	r5, #0
 8002a86:	d1f4      	bne.n	8002a72 <__lesf2+0x42>
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	d1fa      	bne.n	8002a82 <__lesf2+0x52>
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	4240      	negs	r0, r0
 8002a90:	e7f7      	b.n	8002a82 <__lesf2+0x52>
 8002a92:	2c00      	cmp	r4, #0
 8002a94:	d1ed      	bne.n	8002a72 <__lesf2+0x42>
 8002a96:	2e00      	cmp	r6, #0
 8002a98:	d1eb      	bne.n	8002a72 <__lesf2+0x42>
 8002a9a:	e7ec      	b.n	8002a76 <__lesf2+0x46>
 8002a9c:	42a2      	cmp	r2, r4
 8002a9e:	dc05      	bgt.n	8002aac <__lesf2+0x7c>
 8002aa0:	dbf2      	blt.n	8002a88 <__lesf2+0x58>
 8002aa2:	42b5      	cmp	r5, r6
 8002aa4:	d802      	bhi.n	8002aac <__lesf2+0x7c>
 8002aa6:	d3ef      	bcc.n	8002a88 <__lesf2+0x58>
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	e7ea      	b.n	8002a82 <__lesf2+0x52>
 8002aac:	4243      	negs	r3, r0
 8002aae:	4158      	adcs	r0, r3
 8002ab0:	0040      	lsls	r0, r0, #1
 8002ab2:	3801      	subs	r0, #1
 8002ab4:	e7e5      	b.n	8002a82 <__lesf2+0x52>
 8002ab6:	46c0      	nop			; (mov r8, r8)

08002ab8 <debugPrintln.0>:
  //TO DO:
  //char buffer[16];
  //Create variables needed in while loop

  void debugPrintln(UART_HandleTypeDef *uart_handle,char _out[])
   {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	4663      	mov	r3, ip
 8002ac4:	607b      	str	r3, [r7, #4]
   	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <debugPrintln.0+0x50>)
 8002acc:	0019      	movs	r1, r3
 8002ace:	0010      	movs	r0, r2
 8002ad0:	f002 f873 	bl	8004bba <HAL_GPIO_TogglePin>
   	HAL_UART_Transmit(uart_handle, (uint8_t *) _out,strlen(_out), 60);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f7fd fb16 	bl	8000108 <strlen>
 8002adc:	0003      	movs	r3, r0
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	233c      	movs	r3, #60	; 0x3c
 8002ae6:	f004 fa21 	bl	8006f2c <HAL_UART_Transmit>
   	char newline[2] = "\r\n";
 8002aea:	2114      	movs	r1, #20
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <debugPrintln.0+0x54>)
 8002af0:	801a      	strh	r2, [r3, #0]
   	HAL_UART_Transmit(uart_handle, (uint8_t *)newline, 2, 10);
 8002af2:	1879      	adds	r1, r7, r1
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	230a      	movs	r3, #10
 8002af8:	2202      	movs	r2, #2
 8002afa:	f004 fa17 	bl	8006f2c <HAL_UART_Transmit>

   }
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b006      	add	sp, #24
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	48000800 	.word	0x48000800
 8002b0c:	00000a0d 	.word	0x00000a0d

08002b10 <main>:
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af02      	add	r7, sp, #8
int main(void)
 8002b16:	2328      	movs	r3, #40	; 0x28
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	61bb      	str	r3, [r7, #24]
  HAL_Init();
 8002b1c:	f001 fbd6 	bl	80042cc <HAL_Init>
  SystemClock_Config();
 8002b20:	f000 f866 	bl	8002bf0 <SystemClock_Config>
  MX_GPIO_Init();
 8002b24:	f000 f9ba 	bl	8002e9c <MX_GPIO_Init>
  MX_DMA_Init();
 8002b28:	f000 f99a 	bl	8002e60 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002b2c:	f000 f968 	bl	8002e00 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002b30:	f000 f8e6 	bl	8002d00 <MX_TIM3_Init>
  MX_SPI1_Init();
 8002b34:	f000 f8a6 	bl	8002c84 <MX_SPI1_Init>
  icm20948_init();
 8002b38:	f000 fa3c 	bl	8002fb4 <icm20948_init>
  ak09916_init();
 8002b3c:	f000 fa6a 	bl	8003014 <ak09916_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // EXTI0_1_IRQHandler();
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); // Toggle blue LED
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <main+0xbc>)
 8002b46:	0019      	movs	r1, r3
 8002b48:	0010      	movs	r0, r2
 8002b4a:	f002 f836 	bl	8004bba <HAL_GPIO_TogglePin>
	  //TASK 2
	  //Test your pollADC function and display via UART


	 			  // raw data
	 			        icm20948_gyro_read(&my_gyro);
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <main+0xc0>)
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 fa7a 	bl	800304a <icm20948_gyro_read>
	 			        accel_data[0] = my_gyro.x;
 8002b56:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <main+0xc0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1c18      	adds	r0, r3, #0
 8002b5c:	f7fd fca4 	bl	80004a8 <__aeabi_f2uiz>
 8002b60:	0003      	movs	r3, r0
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	2310      	movs	r3, #16
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	801a      	strh	r2, [r3, #0]
	 			        float x = my_gyro.x;
 8002b6a:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <main+0xc0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	61fb      	str	r3, [r7, #28]
	 			        sprintf(buffer, "%.*e", FLT_DECIMAL_DIG-1, x);
 8002b70:	69f8      	ldr	r0, [r7, #28]
 8002b72:	f7ff fe51 	bl	8002818 <__aeabi_f2d>
 8002b76:	0002      	movs	r2, r0
 8002b78:	000b      	movs	r3, r1
 8002b7a:	4916      	ldr	r1, [pc, #88]	; (8002bd4 <main+0xc4>)
 8002b7c:	4816      	ldr	r0, [pc, #88]	; (8002bd8 <main+0xc8>)
 8002b7e:	9200      	str	r2, [sp, #0]
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	2208      	movs	r2, #8
 8002b84:	f005 fdf0 	bl	8008768 <siprintf>
	 			       snprintf(buffer, sizeof(buffer), "%f",x );
 8002b88:	69f8      	ldr	r0, [r7, #28]
 8002b8a:	f7ff fe45 	bl	8002818 <__aeabi_f2d>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	000b      	movs	r3, r1
 8002b92:	4912      	ldr	r1, [pc, #72]	; (8002bdc <main+0xcc>)
 8002b94:	4810      	ldr	r0, [pc, #64]	; (8002bd8 <main+0xc8>)
 8002b96:	9200      	str	r2, [sp, #0]
 8002b98:	9301      	str	r3, [sp, #4]
 8002b9a:	000a      	movs	r2, r1
 8002b9c:	2120      	movs	r1, #32
 8002b9e:	f005 fdaf 	bl	8008700 <sniprintf>
	 			       //sprintf(buffer, "hello world");
	 			        icm20948_accel_read(&my_accel);
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <main+0xd0>)
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 fa91 	bl	80030cc <icm20948_accel_read>
	 			        ak09916_mag_read(&my_mag);
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <main+0xd4>)
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 fad9 	bl	8003164 <ak09916_mag_read>


	 			    debugPrintln(&huart2, buffer);
 8002bb2:	4909      	ldr	r1, [pc, #36]	; (8002bd8 <main+0xc8>)
 8002bb4:	4a0c      	ldr	r2, [pc, #48]	; (8002be8 <main+0xd8>)
 8002bb6:	2318      	movs	r3, #24
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	469c      	mov	ip, r3
 8002bbc:	0010      	movs	r0, r2
 8002bbe:	f7ff ff7b 	bl	8002ab8 <debugPrintln.0>
	 			        //icm20948_gyro_read_dps(&my_gyro);
	 			        //icm20948_accel_read_g(&my_accel);
	 			        //ak09916_mag_read_uT(&my_mag);
	 			        // Indicate End of Sequence with "Z"
	 			        //HAL_UART_Transmit(&huart2, (uint8_t*)"Z", sizeof("Z"), 1000);
	 			        HAL_Delay(1500); // Delay for 100ms
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <main+0xdc>)
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f001 fbe5 	bl	8004394 <HAL_Delay>
  {
 8002bca:	e7b9      	b.n	8002b40 <main+0x30>
 8002bcc:	48000800 	.word	0x48000800
 8002bd0:	20000394 	.word	0x20000394
 8002bd4:	0800add8 	.word	0x0800add8
 8002bd8:	2000036c 	.word	0x2000036c
 8002bdc:	0800ade0 	.word	0x0800ade0
 8002be0:	200003a0 	.word	0x200003a0
 8002be4:	200003ac 	.word	0x200003ac
 8002be8:	200002a4 	.word	0x200002a4
 8002bec:	000005dc 	.word	0x000005dc

08002bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b091      	sub	sp, #68	; 0x44
 8002bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bf6:	2410      	movs	r4, #16
 8002bf8:	193b      	adds	r3, r7, r4
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	2330      	movs	r3, #48	; 0x30
 8002bfe:	001a      	movs	r2, r3
 8002c00:	2100      	movs	r1, #0
 8002c02:	f005 f907 	bl	8007e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c06:	003b      	movs	r3, r7
 8002c08:	0018      	movs	r0, r3
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	2100      	movs	r1, #0
 8002c10:	f005 f900 	bl	8007e14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c14:	0021      	movs	r1, r4
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	2202      	movs	r2, #2
 8002c1a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c1c:	187b      	adds	r3, r7, r1
 8002c1e:	2201      	movs	r2, #1
 8002c20:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	2210      	movs	r2, #16
 8002c26:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c2e:	187b      	adds	r3, r7, r1
 8002c30:	2200      	movs	r2, #0
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	22a0      	movs	r2, #160	; 0xa0
 8002c38:	0392      	lsls	r2, r2, #14
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	2200      	movs	r2, #0
 8002c40:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	0018      	movs	r0, r3
 8002c46:	f001 fff9 	bl	8004c3c <HAL_RCC_OscConfig>
 8002c4a:	1e03      	subs	r3, r0, #0
 8002c4c:	d001      	beq.n	8002c52 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002c4e:	f001 f8c6 	bl	8003dde <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c52:	003b      	movs	r3, r7
 8002c54:	2207      	movs	r2, #7
 8002c56:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c58:	003b      	movs	r3, r7
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c5e:	003b      	movs	r3, r7
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c64:	003b      	movs	r3, r7
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c6a:	003b      	movs	r3, r7
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f002 fafe 	bl	8005270 <HAL_RCC_ClockConfig>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d001      	beq.n	8002c7c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002c78:	f001 f8b1 	bl	8003dde <Error_Handler>
  }
}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b011      	add	sp, #68	; 0x44
 8002c82:	bd90      	pop	{r4, r7, pc}

08002c84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002c8a:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <MX_SPI1_Init+0x78>)
 8002c8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002c90:	2282      	movs	r2, #130	; 0x82
 8002c92:	0052      	lsls	r2, r2, #1
 8002c94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c96:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002c9e:	22e0      	movs	r2, #224	; 0xe0
 8002ca0:	00d2      	lsls	r2, r2, #3
 8002ca2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	0092      	lsls	r2, r2, #2
 8002cb6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002cba:	2218      	movs	r2, #24
 8002cbc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002cd2:	2207      	movs	r2, #7
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <MX_SPI1_Init+0x74>)
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f002 fc15 	bl	8005514 <HAL_SPI_Init>
 8002cea:	1e03      	subs	r3, r0, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002cee:	f001 f876 	bl	8003dde <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	200001f8 	.word	0x200001f8
 8002cfc:	40013000 	.word	0x40013000

08002d00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08e      	sub	sp, #56	; 0x38
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d06:	2328      	movs	r3, #40	; 0x28
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	001a      	movs	r2, r3
 8002d10:	2100      	movs	r1, #0
 8002d12:	f005 f87f 	bl	8007e14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d16:	2320      	movs	r3, #32
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	2308      	movs	r3, #8
 8002d1e:	001a      	movs	r2, r3
 8002d20:	2100      	movs	r1, #0
 8002d22:	f005 f877 	bl	8007e14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d26:	1d3b      	adds	r3, r7, #4
 8002d28:	0018      	movs	r0, r3
 8002d2a:	231c      	movs	r3, #28
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	2100      	movs	r1, #0
 8002d30:	f005 f870 	bl	8007e14 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d34:	4b2f      	ldr	r3, [pc, #188]	; (8002df4 <MX_TIM3_Init+0xf4>)
 8002d36:	4a30      	ldr	r2, [pc, #192]	; (8002df8 <MX_TIM3_Init+0xf8>)
 8002d38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <MX_TIM3_Init+0xf4>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d40:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <MX_TIM3_Init+0xf4>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 47999;
 8002d46:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <MX_TIM3_Init+0xf4>)
 8002d48:	4a2c      	ldr	r2, [pc, #176]	; (8002dfc <MX_TIM3_Init+0xfc>)
 8002d4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d4c:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <MX_TIM3_Init+0xf4>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d52:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <MX_TIM3_Init+0xf4>)
 8002d54:	2280      	movs	r2, #128	; 0x80
 8002d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d58:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <MX_TIM3_Init+0xf4>)
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f003 fadc 	bl	8006318 <HAL_TIM_Base_Init>
 8002d60:	1e03      	subs	r3, r0, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002d64:	f001 f83b 	bl	8003dde <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d68:	2128      	movs	r1, #40	; 0x28
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	0152      	lsls	r2, r2, #5
 8002d70:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d72:	187a      	adds	r2, r7, r1
 8002d74:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <MX_TIM3_Init+0xf4>)
 8002d76:	0011      	movs	r1, r2
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f003 fc3b 	bl	80065f4 <HAL_TIM_ConfigClockSource>
 8002d7e:	1e03      	subs	r3, r0, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002d82:	f001 f82c 	bl	8003dde <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d86:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <MX_TIM3_Init+0xf4>)
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f003 fb15 	bl	80063b8 <HAL_TIM_PWM_Init>
 8002d8e:	1e03      	subs	r3, r0, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002d92:	f001 f824 	bl	8003dde <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d96:	2120      	movs	r1, #32
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	2200      	movs	r2, #0
 8002da2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002da4:	187a      	adds	r2, r7, r1
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <MX_TIM3_Init+0xf4>)
 8002da8:	0011      	movs	r1, r2
 8002daa:	0018      	movs	r0, r3
 8002dac:	f004 f80c 	bl	8006dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8002db4:	f001 f813 	bl	8003dde <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002db8:	1d3b      	adds	r3, r7, #4
 8002dba:	2260      	movs	r2, #96	; 0x60
 8002dbc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dca:	1d3b      	adds	r3, r7, #4
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002dd0:	1d39      	adds	r1, r7, #4
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <MX_TIM3_Init+0xf4>)
 8002dd4:	220c      	movs	r2, #12
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f003 fb46 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 8002ddc:	1e03      	subs	r3, r0, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002de0:	f000 fffd 	bl	8003dde <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <MX_TIM3_Init+0xf4>)
 8002de6:	0018      	movs	r0, r3
 8002de8:	f001 f88c 	bl	8003f04 <HAL_TIM_MspPostInit>

}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b00e      	add	sp, #56	; 0x38
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	2000025c 	.word	0x2000025c
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	0000bb7f 	.word	0x0000bb7f

08002e00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e06:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <MX_USART2_UART_Init+0x5c>)
 8002e08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e0c:	2296      	movs	r2, #150	; 0x96
 8002e0e:	0192      	lsls	r2, r2, #6
 8002e10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e26:	220c      	movs	r2, #12
 8002e28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <MX_USART2_UART_Init+0x58>)
 8002e44:	0018      	movs	r0, r3
 8002e46:	f004 f81d 	bl	8006e84 <HAL_UART_Init>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e4e:	f000 ffc6 	bl	8003dde <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	200002a4 	.word	0x200002a4
 8002e5c:	40004400 	.word	0x40004400

08002e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <MX_DMA_Init+0x38>)
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <MX_DMA_Init+0x38>)
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	615a      	str	r2, [r3, #20]
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <MX_DMA_Init+0x38>)
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	2201      	movs	r2, #1
 8002e78:	4013      	ands	r3, r2
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2100      	movs	r1, #0
 8002e82:	200b      	movs	r0, #11
 8002e84:	f001 fb56 	bl	8004534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8002e88:	200b      	movs	r0, #11
 8002e8a:	f001 fb68 	bl	800455e <HAL_NVIC_EnableIRQ>

}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b002      	add	sp, #8
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	40021000 	.word	0x40021000

08002e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea2:	240c      	movs	r4, #12
 8002ea4:	193b      	adds	r3, r7, r4
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	2314      	movs	r3, #20
 8002eaa:	001a      	movs	r2, r3
 8002eac:	2100      	movs	r1, #0
 8002eae:	f004 ffb1 	bl	8007e14 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb2:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <MX_GPIO_Init+0x110>)
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <MX_GPIO_Init+0x110>)
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	0309      	lsls	r1, r1, #12
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	615a      	str	r2, [r3, #20]
 8002ec0:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <MX_GPIO_Init+0x110>)
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	031b      	lsls	r3, r3, #12
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ece:	4b37      	ldr	r3, [pc, #220]	; (8002fac <MX_GPIO_Init+0x110>)
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	4b36      	ldr	r3, [pc, #216]	; (8002fac <MX_GPIO_Init+0x110>)
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	03c9      	lsls	r1, r1, #15
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	615a      	str	r2, [r3, #20]
 8002edc:	4b33      	ldr	r3, [pc, #204]	; (8002fac <MX_GPIO_Init+0x110>)
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	03db      	lsls	r3, r3, #15
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eea:	4b30      	ldr	r3, [pc, #192]	; (8002fac <MX_GPIO_Init+0x110>)
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <MX_GPIO_Init+0x110>)
 8002ef0:	2180      	movs	r1, #128	; 0x80
 8002ef2:	0289      	lsls	r1, r1, #10
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	615a      	str	r2, [r3, #20]
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <MX_GPIO_Init+0x110>)
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	029b      	lsls	r3, r3, #10
 8002f00:	4013      	ands	r3, r2
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f06:	2390      	movs	r3, #144	; 0x90
 8002f08:	05db      	lsls	r3, r3, #23
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2110      	movs	r1, #16
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f001 fe36 	bl	8004b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4825      	ldr	r0, [pc, #148]	; (8002fb0 <MX_GPIO_Init+0x114>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	f001 fe2f 	bl	8004b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f22:	193b      	adds	r3, r7, r4
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f28:	193b      	adds	r3, r7, r4
 8002f2a:	2284      	movs	r2, #132	; 0x84
 8002f2c:	0392      	lsls	r2, r2, #14
 8002f2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	193b      	adds	r3, r7, r4
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f36:	193a      	adds	r2, r7, r4
 8002f38:	2390      	movs	r3, #144	; 0x90
 8002f3a:	05db      	lsls	r3, r3, #23
 8002f3c:	0011      	movs	r1, r2
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f001 fcae 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	2210      	movs	r2, #16
 8002f48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4a:	193b      	adds	r3, r7, r4
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	193b      	adds	r3, r7, r4
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f56:	193b      	adds	r3, r7, r4
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002f5c:	193a      	adds	r2, r7, r4
 8002f5e:	2390      	movs	r3, #144	; 0x90
 8002f60:	05db      	lsls	r3, r3, #23
 8002f62:	0011      	movs	r1, r2
 8002f64:	0018      	movs	r0, r3
 8002f66:	f001 fc9b 	bl	80048a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8002f6a:	0021      	movs	r1, r4
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	2280      	movs	r2, #128	; 0x80
 8002f70:	0052      	lsls	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	2201      	movs	r2, #1
 8002f78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	2200      	movs	r2, #0
 8002f84:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8002f86:	187b      	adds	r3, r7, r1
 8002f88:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <MX_GPIO_Init+0x114>)
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	0010      	movs	r0, r2
 8002f8e:	f001 fc87 	bl	80048a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	2005      	movs	r0, #5
 8002f98:	f001 facc 	bl	8004534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002f9c:	2005      	movs	r0, #5
 8002f9e:	f001 fade 	bl	800455e <HAL_NVIC_EnableIRQ>

}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b009      	add	sp, #36	; 0x24
 8002fa8:	bd90      	pop	{r4, r7, pc}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	48000800 	.word	0x48000800

08002fb4 <icm20948_init>:

/* USER CODE BEGIN 4 */

/* Main Functions */
void icm20948_init()
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	f000 f934 	bl	8003226 <icm20948_who_am_i>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	001a      	movs	r2, r3
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	4053      	eors	r3, r2
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f6      	bne.n	8002fba <icm20948_init+0x6>

	icm20948_device_reset();
 8002fcc:	f000 f954 	bl	8003278 <icm20948_device_reset>
	icm20948_wakeup();
 8002fd0:	f000 f96b 	bl	80032aa <icm20948_wakeup>

	icm20948_clock_source(1);
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f000 f9fb 	bl	80033d0 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8002fda:	f000 fa1a 	bl	8003412 <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 8002fde:	f000 f982 	bl	80032e6 <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f000 fa1f 	bl	8003426 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f000 fa40 	bl	800346e <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f000 fa61 	bl	80034b6 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f000 fa6f 	bl	80034d8 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8002ffa:	f000 faa7 	bl	800354c <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8002ffe:	f000 fb6b 	bl	80036d8 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8003002:	2003      	movs	r0, #3
 8003004:	f000 fcbc 	bl	8003980 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8003008:	2003      	movs	r0, #3
 800300a:	f000 fd15 	bl	8003a38 <icm20948_accel_full_scale_select>
}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <ak09916_init>:

void ak09916_init()
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8003018:	f000 f980 	bl	800331c <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 800301c:	f000 f999 	bl	8003352 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8003020:	2007      	movs	r0, #7
 8003022:	f000 f9b4 	bl	800338e <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	f000 f912 	bl	8003250 <ak09916_who_am_i>
 800302c:	0003      	movs	r3, r0
 800302e:	001a      	movs	r2, r3
 8003030:	2301      	movs	r3, #1
 8003032:	4053      	eors	r3, r2
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f6      	bne.n	8003028 <ak09916_init+0x14>

	ak09916_soft_reset();
 800303a:	f000 f92a 	bl	8003292 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 800303e:	2008      	movs	r0, #8
 8003040:	f000 fa71 	bl	8003526 <ak09916_operation_mode_setting>
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8003052:	2206      	movs	r2, #6
 8003054:	2133      	movs	r1, #51	; 0x33
 8003056:	2000      	movs	r0, #0
 8003058:	f000 fddc 	bl	8003c14 <read_multiple_icm20948_reg>
 800305c:	0003      	movs	r3, r0
 800305e:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	b21a      	sxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3301      	adds	r3, #1
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	b21b      	sxth	r3, r3
 8003070:	4313      	orrs	r3, r2
 8003072:	b21b      	sxth	r3, r3
 8003074:	0018      	movs	r0, r3
 8003076:	f7fd fd9b 	bl	8000bb0 <__aeabi_i2f>
 800307a:	1c02      	adds	r2, r0, #0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3302      	adds	r3, #2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	b21a      	sxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3303      	adds	r3, #3
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b21b      	sxth	r3, r3
 8003092:	4313      	orrs	r3, r2
 8003094:	b21b      	sxth	r3, r3
 8003096:	0018      	movs	r0, r3
 8003098:	f7fd fd8a 	bl	8000bb0 <__aeabi_i2f>
 800309c:	1c02      	adds	r2, r0, #0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3304      	adds	r3, #4
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	b21a      	sxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3305      	adds	r3, #5
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b21b      	sxth	r3, r3
 80030b4:	4313      	orrs	r3, r2
 80030b6:	b21b      	sxth	r3, r3
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7fd fd79 	bl	8000bb0 <__aeabi_i2f>
 80030be:	1c02      	adds	r2, r0, #0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	609a      	str	r2, [r3, #8]
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b004      	add	sp, #16
 80030ca:	bd80      	pop	{r7, pc}

080030cc <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 80030d4:	2206      	movs	r2, #6
 80030d6:	212d      	movs	r1, #45	; 0x2d
 80030d8:	2000      	movs	r0, #0
 80030da:	f000 fd9b 	bl	8003c14 <read_multiple_icm20948_reg>
 80030de:	0003      	movs	r3, r0
 80030e0:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	b21a      	sxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3301      	adds	r3, #1
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b21b      	sxth	r3, r3
 80030f2:	4313      	orrs	r3, r2
 80030f4:	b21b      	sxth	r3, r3
 80030f6:	0018      	movs	r0, r3
 80030f8:	f7fd fd5a 	bl	8000bb0 <__aeabi_i2f>
 80030fc:	1c02      	adds	r2, r0, #0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3302      	adds	r3, #2
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	b21a      	sxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3303      	adds	r3, #3
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b21b      	sxth	r3, r3
 8003114:	4313      	orrs	r3, r2
 8003116:	b21b      	sxth	r3, r3
 8003118:	0018      	movs	r0, r3
 800311a:	f7fd fd49 	bl	8000bb0 <__aeabi_i2f>
 800311e:	1c02      	adds	r2, r0, #0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3304      	adds	r3, #4
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	b21a      	sxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	3305      	adds	r3, #5
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	b21b      	sxth	r3, r3
 8003136:	4313      	orrs	r3, r2
 8003138:	b21b      	sxth	r3, r3
 800313a:	0018      	movs	r0, r3
 800313c:	f7fd fd38 	bl	8000bb0 <__aeabi_i2f>
 8003140:	1c02      	adds	r2, r0, #0
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <icm20948_accel_read+0x94>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	1c19      	adds	r1, r3, #0
 8003148:	1c10      	adds	r0, r2, #0
 800314a:	f7fd f9c5 	bl	80004d8 <__aeabi_fadd>
 800314e:	1c03      	adds	r3, r0, #0
 8003150:	1c1a      	adds	r2, r3, #0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	609a      	str	r2, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b004      	add	sp, #16
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	20000390 	.word	0x20000390

08003164 <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 800316c:	2010      	movs	r0, #16
 800316e:	f000 fdbf 	bl	8003cf0 <read_single_ak09916_reg>
 8003172:	0003      	movs	r3, r0
 8003174:	0019      	movs	r1, r3
 8003176:	2017      	movs	r0, #23
 8003178:	183b      	adds	r3, r7, r0
 800317a:	2201      	movs	r2, #1
 800317c:	400a      	ands	r2, r1
 800317e:	701a      	strb	r2, [r3, #0]
	if(!drdy)	return false;
 8003180:	183b      	adds	r3, r7, r0
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <ak09916_mag_read+0x28>
 8003188:	2300      	movs	r3, #0
 800318a:	e048      	b.n	800321e <ak09916_mag_read+0xba>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 800318c:	2106      	movs	r1, #6
 800318e:	2011      	movs	r0, #17
 8003190:	f000 fdf6 	bl	8003d80 <read_multiple_ak09916_reg>
 8003194:	0003      	movs	r3, r0
 8003196:	613b      	str	r3, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8003198:	2018      	movs	r0, #24
 800319a:	f000 fda9 	bl	8003cf0 <read_single_ak09916_reg>
 800319e:	0003      	movs	r3, r0
 80031a0:	0019      	movs	r1, r3
 80031a2:	200f      	movs	r0, #15
 80031a4:	183b      	adds	r3, r7, r0
 80031a6:	2208      	movs	r2, #8
 80031a8:	400a      	ands	r2, r1
 80031aa:	701a      	strb	r2, [r3, #0]
	if(hofl)	return false;
 80031ac:	183b      	adds	r3, r7, r0
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <ak09916_mag_read+0x54>
 80031b4:	2300      	movs	r3, #0
 80031b6:	e032      	b.n	800321e <ak09916_mag_read+0xba>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	3301      	adds	r3, #1
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	b21a      	sxth	r2, r3
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b21b      	sxth	r3, r3
 80031c8:	4313      	orrs	r3, r2
 80031ca:	b21b      	sxth	r3, r3
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7fd fcef 	bl	8000bb0 <__aeabi_i2f>
 80031d2:	1c02      	adds	r2, r0, #0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	3303      	adds	r3, #3
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	b21a      	sxth	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	3302      	adds	r3, #2
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b21b      	sxth	r3, r3
 80031ea:	4313      	orrs	r3, r2
 80031ec:	b21b      	sxth	r3, r3
 80031ee:	0018      	movs	r0, r3
 80031f0:	f7fd fcde 	bl	8000bb0 <__aeabi_i2f>
 80031f4:	1c02      	adds	r2, r0, #0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3305      	adds	r3, #5
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	b21a      	sxth	r2, r3
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	3304      	adds	r3, #4
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b21b      	sxth	r3, r3
 800320c:	4313      	orrs	r3, r2
 800320e:	b21b      	sxth	r3, r3
 8003210:	0018      	movs	r0, r3
 8003212:	f7fd fccd 	bl	8000bb0 <__aeabi_i2f>
 8003216:	1c02      	adds	r2, r0, #0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	609a      	str	r2, [r3, #8]

	return true;
 800321c:	2301      	movs	r3, #1
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b006      	add	sp, #24
 8003224:	bd80      	pop	{r7, pc}

08003226 <icm20948_who_am_i>:
}


/* Sub Functions */
bool icm20948_who_am_i()
{
 8003226:	b590      	push	{r4, r7, lr}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 800322c:	1dfc      	adds	r4, r7, #7
 800322e:	2100      	movs	r1, #0
 8003230:	2000      	movs	r0, #0
 8003232:	f000 fc8f 	bl	8003b54 <read_single_icm20948_reg>
 8003236:	0003      	movs	r3, r0
 8003238:	7023      	strb	r3, [r4, #0]

	if(icm20948_id == ICM20948_ID)
 800323a:	1dfb      	adds	r3, r7, #7
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2bea      	cmp	r3, #234	; 0xea
 8003240:	d101      	bne.n	8003246 <icm20948_who_am_i+0x20>
		return true;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <icm20948_who_am_i+0x22>
	else
		return false;
 8003246:	2300      	movs	r3, #0
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b003      	add	sp, #12
 800324e:	bd90      	pop	{r4, r7, pc}

08003250 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8003256:	1dfc      	adds	r4, r7, #7
 8003258:	2001      	movs	r0, #1
 800325a:	f000 fd49 	bl	8003cf0 <read_single_ak09916_reg>
 800325e:	0003      	movs	r3, r0
 8003260:	7023      	strb	r3, [r4, #0]

	if(ak09916_id == AK09916_ID)
 8003262:	1dfb      	adds	r3, r7, #7
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b09      	cmp	r3, #9
 8003268:	d101      	bne.n	800326e <ak09916_who_am_i+0x1e>
		return true;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <ak09916_who_am_i+0x20>
	else
		return false;
 800326e:	2300      	movs	r3, #0
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	b003      	add	sp, #12
 8003276:	bd90      	pop	{r4, r7, pc}

08003278 <icm20948_device_reset>:

void icm20948_device_reset()
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 800327c:	22c1      	movs	r2, #193	; 0xc1
 800327e:	2106      	movs	r1, #6
 8003280:	2000      	movs	r0, #0
 8003282:	f000 fc99 	bl	8003bb8 <write_single_icm20948_reg>
	HAL_Delay(100);
 8003286:	2064      	movs	r0, #100	; 0x64
 8003288:	f001 f884 	bl	8004394 <HAL_Delay>
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8003292:	b580      	push	{r7, lr}
 8003294:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8003296:	2101      	movs	r1, #1
 8003298:	2032      	movs	r0, #50	; 0x32
 800329a:	f000 fd4c 	bl	8003d36 <write_single_ak09916_reg>
	HAL_Delay(100);
 800329e:	2064      	movs	r0, #100	; 0x64
 80032a0:	f001 f878 	bl	8004394 <HAL_Delay>
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <icm20948_wakeup>:

void icm20948_wakeup()
{
 80032aa:	b590      	push	{r4, r7, lr}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80032b0:	1dfc      	adds	r4, r7, #7
 80032b2:	2106      	movs	r1, #6
 80032b4:	2000      	movs	r0, #0
 80032b6:	f000 fc4d 	bl	8003b54 <read_single_icm20948_reg>
 80032ba:	0003      	movs	r3, r0
 80032bc:	7023      	strb	r3, [r4, #0]
	new_val &= 0xBF;
 80032be:	1dfb      	adds	r3, r7, #7
 80032c0:	1dfa      	adds	r2, r7, #7
 80032c2:	7812      	ldrb	r2, [r2, #0]
 80032c4:	2140      	movs	r1, #64	; 0x40
 80032c6:	438a      	bics	r2, r1
 80032c8:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 80032ca:	1dfb      	adds	r3, r7, #7
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	001a      	movs	r2, r3
 80032d0:	2106      	movs	r1, #6
 80032d2:	2000      	movs	r0, #0
 80032d4:	f000 fc70 	bl	8003bb8 <write_single_icm20948_reg>
	HAL_Delay(100);
 80032d8:	2064      	movs	r0, #100	; 0x64
 80032da:	f001 f85b 	bl	8004394 <HAL_Delay>
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b003      	add	sp, #12
 80032e4:	bd90      	pop	{r4, r7, pc}

080032e6 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 80032e6:	b590      	push	{r4, r7, lr}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80032ec:	1dfc      	adds	r4, r7, #7
 80032ee:	2103      	movs	r1, #3
 80032f0:	2000      	movs	r0, #0
 80032f2:	f000 fc2f 	bl	8003b54 <read_single_icm20948_reg>
 80032f6:	0003      	movs	r3, r0
 80032f8:	7023      	strb	r3, [r4, #0]
	new_val |= 0x10;
 80032fa:	1dfb      	adds	r3, r7, #7
 80032fc:	1dfa      	adds	r2, r7, #7
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	2110      	movs	r1, #16
 8003302:	430a      	orrs	r2, r1
 8003304:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8003306:	1dfb      	adds	r3, r7, #7
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	001a      	movs	r2, r3
 800330c:	2103      	movs	r1, #3
 800330e:	2000      	movs	r0, #0
 8003310:	f000 fc52 	bl	8003bb8 <write_single_icm20948_reg>
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b003      	add	sp, #12
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8003322:	1dfc      	adds	r4, r7, #7
 8003324:	2103      	movs	r1, #3
 8003326:	2000      	movs	r0, #0
 8003328:	f000 fc14 	bl	8003b54 <read_single_icm20948_reg>
 800332c:	0003      	movs	r3, r0
 800332e:	7023      	strb	r3, [r4, #0]
	new_val |= 0x02;
 8003330:	1dfb      	adds	r3, r7, #7
 8003332:	1dfa      	adds	r2, r7, #7
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	2102      	movs	r1, #2
 8003338:	430a      	orrs	r2, r1
 800333a:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 800333c:	1dfb      	adds	r3, r7, #7
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	001a      	movs	r2, r3
 8003342:	2103      	movs	r1, #3
 8003344:	2000      	movs	r0, #0
 8003346:	f000 fc37 	bl	8003bb8 <write_single_icm20948_reg>
}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	46bd      	mov	sp, r7
 800334e:	b003      	add	sp, #12
 8003350:	bd90      	pop	{r4, r7, pc}

08003352 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8003352:	b590      	push	{r4, r7, lr}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8003358:	1dfc      	adds	r4, r7, #7
 800335a:	2103      	movs	r1, #3
 800335c:	2000      	movs	r0, #0
 800335e:	f000 fbf9 	bl	8003b54 <read_single_icm20948_reg>
 8003362:	0003      	movs	r3, r0
 8003364:	7023      	strb	r3, [r4, #0]
	new_val |= 0x20;
 8003366:	1dfb      	adds	r3, r7, #7
 8003368:	1dfa      	adds	r2, r7, #7
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	2120      	movs	r1, #32
 800336e:	430a      	orrs	r2, r1
 8003370:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	001a      	movs	r2, r3
 8003378:	2103      	movs	r1, #3
 800337a:	2000      	movs	r0, #0
 800337c:	f000 fc1c 	bl	8003bb8 <write_single_icm20948_reg>
	HAL_Delay(100);
 8003380:	2064      	movs	r0, #100	; 0x64
 8003382:	f001 f807 	bl	8004394 <HAL_Delay>
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b003      	add	sp, #12
 800338c:	bd90      	pop	{r4, r7, pc}

0800338e <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 800338e:	b5b0      	push	{r4, r5, r7, lr}
 8003390:	b084      	sub	sp, #16
 8003392:	af00      	add	r7, sp, #0
 8003394:	0002      	movs	r2, r0
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 800339a:	250f      	movs	r5, #15
 800339c:	197c      	adds	r4, r7, r5
 800339e:	2101      	movs	r1, #1
 80033a0:	2030      	movs	r0, #48	; 0x30
 80033a2:	f000 fbd7 	bl	8003b54 <read_single_icm20948_reg>
 80033a6:	0003      	movs	r3, r0
 80033a8:	7023      	strb	r3, [r4, #0]
	new_val |= config;
 80033aa:	0028      	movs	r0, r5
 80033ac:	183b      	adds	r3, r7, r0
 80033ae:	1839      	adds	r1, r7, r0
 80033b0:	1dfa      	adds	r2, r7, #7
 80033b2:	7809      	ldrb	r1, [r1, #0]
 80033b4:	7812      	ldrb	r2, [r2, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 80033ba:	183b      	adds	r3, r7, r0
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	001a      	movs	r2, r3
 80033c0:	2101      	movs	r1, #1
 80033c2:	2030      	movs	r0, #48	; 0x30
 80033c4:	f000 fbf8 	bl	8003bb8 <write_single_icm20948_reg>
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b004      	add	sp, #16
 80033ce:	bdb0      	pop	{r4, r5, r7, pc}

080033d0 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 80033d0:	b5b0      	push	{r4, r5, r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	0002      	movs	r2, r0
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80033dc:	250f      	movs	r5, #15
 80033de:	197c      	adds	r4, r7, r5
 80033e0:	2106      	movs	r1, #6
 80033e2:	2000      	movs	r0, #0
 80033e4:	f000 fbb6 	bl	8003b54 <read_single_icm20948_reg>
 80033e8:	0003      	movs	r3, r0
 80033ea:	7023      	strb	r3, [r4, #0]
	new_val |= source;
 80033ec:	0028      	movs	r0, r5
 80033ee:	183b      	adds	r3, r7, r0
 80033f0:	1839      	adds	r1, r7, r0
 80033f2:	1dfa      	adds	r2, r7, #7
 80033f4:	7809      	ldrb	r1, [r1, #0]
 80033f6:	7812      	ldrb	r2, [r2, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 80033fc:	183b      	adds	r3, r7, r0
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	001a      	movs	r2, r3
 8003402:	2106      	movs	r1, #6
 8003404:	2000      	movs	r0, #0
 8003406:	f000 fbd7 	bl	8003bb8 <write_single_icm20948_reg>
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b004      	add	sp, #16
 8003410:	bdb0      	pop	{r4, r5, r7, pc}

08003412 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8003412:	b580      	push	{r7, lr}
 8003414:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8003416:	2201      	movs	r2, #1
 8003418:	2109      	movs	r1, #9
 800341a:	2020      	movs	r0, #32
 800341c:	f000 fbcc 	bl	8003bb8 <write_single_icm20948_reg>
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8003426:	b5b0      	push	{r4, r5, r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	0002      	movs	r2, r0
 800342e:	1dfb      	adds	r3, r7, #7
 8003430:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8003432:	250f      	movs	r5, #15
 8003434:	197c      	adds	r4, r7, r5
 8003436:	2101      	movs	r1, #1
 8003438:	2020      	movs	r0, #32
 800343a:	f000 fb8b 	bl	8003b54 <read_single_icm20948_reg>
 800343e:	0003      	movs	r3, r0
 8003440:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	b25a      	sxtb	r2, r3
 800344a:	197b      	adds	r3, r7, r5
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	b25b      	sxtb	r3, r3
 8003450:	4313      	orrs	r3, r2
 8003452:	b25a      	sxtb	r2, r3
 8003454:	197b      	adds	r3, r7, r5
 8003456:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8003458:	197b      	adds	r3, r7, r5
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	001a      	movs	r2, r3
 800345e:	2101      	movs	r1, #1
 8003460:	2020      	movs	r0, #32
 8003462:	f000 fba9 	bl	8003bb8 <write_single_icm20948_reg>
}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	46bd      	mov	sp, r7
 800346a:	b004      	add	sp, #16
 800346c:	bdb0      	pop	{r4, r5, r7, pc}

0800346e <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 800346e:	b5b0      	push	{r4, r5, r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	0002      	movs	r2, r0
 8003476:	1dfb      	adds	r3, r7, #7
 8003478:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800347a:	250f      	movs	r5, #15
 800347c:	197c      	adds	r4, r7, r5
 800347e:	2114      	movs	r1, #20
 8003480:	2020      	movs	r0, #32
 8003482:	f000 fb67 	bl	8003b54 <read_single_icm20948_reg>
 8003486:	0003      	movs	r3, r0
 8003488:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 800348a:	1dfb      	adds	r3, r7, #7
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	b25a      	sxtb	r2, r3
 8003492:	197b      	adds	r3, r7, r5
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b25b      	sxtb	r3, r3
 8003498:	4313      	orrs	r3, r2
 800349a:	b25a      	sxtb	r2, r3
 800349c:	197b      	adds	r3, r7, r5
 800349e:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80034a0:	197b      	adds	r3, r7, r5
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	001a      	movs	r2, r3
 80034a6:	2101      	movs	r1, #1
 80034a8:	2020      	movs	r0, #32
 80034aa:	f000 fb85 	bl	8003bb8 <write_single_icm20948_reg>
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bdb0      	pop	{r4, r5, r7, pc}

080034b6 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	0002      	movs	r2, r0
 80034be:	1dfb      	adds	r3, r7, #7
 80034c0:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80034c2:	1dfb      	adds	r3, r7, #7
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	001a      	movs	r2, r3
 80034c8:	2100      	movs	r1, #0
 80034ca:	2020      	movs	r0, #32
 80034cc:	f000 fb74 	bl	8003bb8 <write_single_icm20948_reg>
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	0002      	movs	r2, r0
 80034e0:	1dbb      	adds	r3, r7, #6
 80034e2:	801a      	strh	r2, [r3, #0]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80034e4:	1dbb      	adds	r3, r7, #6
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	200f      	movs	r0, #15
 80034ee:	183b      	adds	r3, r7, r0
 80034f0:	701a      	strb	r2, [r3, #0]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80034f2:	1dbb      	adds	r3, r7, #6
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	240e      	movs	r4, #14
 80034fa:	193b      	adds	r3, r7, r4
 80034fc:	210f      	movs	r1, #15
 80034fe:	400a      	ands	r2, r1
 8003500:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8003502:	183b      	adds	r3, r7, r0
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	001a      	movs	r2, r3
 8003508:	2110      	movs	r1, #16
 800350a:	2020      	movs	r0, #32
 800350c:	f000 fb54 	bl	8003bb8 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8003510:	193b      	adds	r3, r7, r4
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	001a      	movs	r2, r3
 8003516:	2111      	movs	r1, #17
 8003518:	2020      	movs	r0, #32
 800351a:	f000 fb4d 	bl	8003bb8 <write_single_icm20948_reg>
}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	46bd      	mov	sp, r7
 8003522:	b005      	add	sp, #20
 8003524:	bd90      	pop	{r4, r7, pc}

08003526 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	0002      	movs	r2, r0
 800352e:	1dfb      	adds	r3, r7, #7
 8003530:	701a      	strb	r2, [r3, #0]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8003532:	1dfb      	adds	r3, r7, #7
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	0019      	movs	r1, r3
 8003538:	2031      	movs	r0, #49	; 0x31
 800353a:	f000 fbfc 	bl	8003d36 <write_single_ak09916_reg>
	HAL_Delay(100);
 800353e:	2064      	movs	r0, #100	; 0x64
 8003540:	f000 ff28 	bl	8004394 <HAL_Delay>
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}

0800354c <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 800354c:	b5b0      	push	{r4, r5, r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8003552:	230c      	movs	r3, #12
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	0018      	movs	r0, r3
 8003558:	230c      	movs	r3, #12
 800355a:	001a      	movs	r2, r3
 800355c:	2100      	movs	r1, #0
 800355e:	f004 fc59 	bl	8007e14 <memset>
	uint8_t gyro_offset[6] = {0};
 8003562:	1d3b      	adds	r3, r7, #4
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	2200      	movs	r2, #0
 800356a:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 800356c:	2300      	movs	r3, #0
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
 8003570:	e041      	b.n	80035f6 <icm20948_gyro_calibration+0xaa>
	{
		icm20948_gyro_read(&temp);
 8003572:	2518      	movs	r5, #24
 8003574:	197b      	adds	r3, r7, r5
 8003576:	0018      	movs	r0, r3
 8003578:	f7ff fd67 	bl	800304a <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 800357c:	240c      	movs	r4, #12
 800357e:	193b      	adds	r3, r7, r4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	0018      	movs	r0, r3
 8003584:	f7fd fb14 	bl	8000bb0 <__aeabi_i2f>
 8003588:	1c02      	adds	r2, r0, #0
 800358a:	197b      	adds	r3, r7, r5
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	1c19      	adds	r1, r3, #0
 8003590:	1c10      	adds	r0, r2, #0
 8003592:	f7fc ffa1 	bl	80004d8 <__aeabi_fadd>
 8003596:	1c03      	adds	r3, r0, #0
 8003598:	1c18      	adds	r0, r3, #0
 800359a:	f7fd fae9 	bl	8000b70 <__aeabi_f2iz>
 800359e:	0002      	movs	r2, r0
 80035a0:	193b      	adds	r3, r7, r4
 80035a2:	601a      	str	r2, [r3, #0]
		gyro_bias[1] += temp.y;
 80035a4:	193b      	adds	r3, r7, r4
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7fd fb01 	bl	8000bb0 <__aeabi_i2f>
 80035ae:	1c02      	adds	r2, r0, #0
 80035b0:	197b      	adds	r3, r7, r5
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	1c19      	adds	r1, r3, #0
 80035b6:	1c10      	adds	r0, r2, #0
 80035b8:	f7fc ff8e 	bl	80004d8 <__aeabi_fadd>
 80035bc:	1c03      	adds	r3, r0, #0
 80035be:	1c18      	adds	r0, r3, #0
 80035c0:	f7fd fad6 	bl	8000b70 <__aeabi_f2iz>
 80035c4:	0002      	movs	r2, r0
 80035c6:	193b      	adds	r3, r7, r4
 80035c8:	605a      	str	r2, [r3, #4]
		gyro_bias[2] += temp.z;
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	0018      	movs	r0, r3
 80035d0:	f7fd faee 	bl	8000bb0 <__aeabi_i2f>
 80035d4:	1c02      	adds	r2, r0, #0
 80035d6:	197b      	adds	r3, r7, r5
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	1c19      	adds	r1, r3, #0
 80035dc:	1c10      	adds	r0, r2, #0
 80035de:	f7fc ff7b 	bl	80004d8 <__aeabi_fadd>
 80035e2:	1c03      	adds	r3, r0, #0
 80035e4:	1c18      	adds	r0, r3, #0
 80035e6:	f7fd fac3 	bl	8000b70 <__aeabi_f2iz>
 80035ea:	0002      	movs	r2, r0
 80035ec:	193b      	adds	r3, r7, r4
 80035ee:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	3301      	adds	r3, #1
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	2b63      	cmp	r3, #99	; 0x63
 80035fa:	ddba      	ble.n	8003572 <icm20948_gyro_calibration+0x26>
	}

	gyro_bias[0] /= 100;
 80035fc:	240c      	movs	r4, #12
 80035fe:	193b      	adds	r3, r7, r4
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2164      	movs	r1, #100	; 0x64
 8003604:	0018      	movs	r0, r3
 8003606:	f7fc fe25 	bl	8000254 <__divsi3>
 800360a:	0003      	movs	r3, r0
 800360c:	001a      	movs	r2, r3
 800360e:	193b      	adds	r3, r7, r4
 8003610:	601a      	str	r2, [r3, #0]
	gyro_bias[1] /= 100;
 8003612:	193b      	adds	r3, r7, r4
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2164      	movs	r1, #100	; 0x64
 8003618:	0018      	movs	r0, r3
 800361a:	f7fc fe1b 	bl	8000254 <__divsi3>
 800361e:	0003      	movs	r3, r0
 8003620:	001a      	movs	r2, r3
 8003622:	193b      	adds	r3, r7, r4
 8003624:	605a      	str	r2, [r3, #4]
	gyro_bias[2] /= 100;
 8003626:	193b      	adds	r3, r7, r4
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2164      	movs	r1, #100	; 0x64
 800362c:	0018      	movs	r0, r3
 800362e:	f7fc fe11 	bl	8000254 <__divsi3>
 8003632:	0003      	movs	r3, r0
 8003634:	001a      	movs	r2, r3
 8003636:	193b      	adds	r3, r7, r4
 8003638:	609a      	str	r2, [r3, #8]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 800363a:	193b      	adds	r3, r7, r4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	425b      	negs	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	da00      	bge.n	8003646 <icm20948_gyro_calibration+0xfa>
 8003644:	3303      	adds	r3, #3
 8003646:	109b      	asrs	r3, r3, #2
 8003648:	121b      	asrs	r3, r3, #8
 800364a:	b2da      	uxtb	r2, r3
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 8003650:	230c      	movs	r3, #12
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	425b      	negs	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	da00      	bge.n	800365e <icm20948_gyro_calibration+0x112>
 800365c:	3303      	adds	r3, #3
 800365e:	109b      	asrs	r3, r3, #2
 8003660:	b2da      	uxtb	r2, r3
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	705a      	strb	r2, [r3, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8003666:	230c      	movs	r3, #12
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	425b      	negs	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	da00      	bge.n	8003674 <icm20948_gyro_calibration+0x128>
 8003672:	3303      	adds	r3, #3
 8003674:	109b      	asrs	r3, r3, #2
 8003676:	121b      	asrs	r3, r3, #8
 8003678:	b2da      	uxtb	r2, r3
 800367a:	1d3b      	adds	r3, r7, #4
 800367c:	709a      	strb	r2, [r3, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 800367e:	230c      	movs	r3, #12
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	425b      	negs	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	da00      	bge.n	800368c <icm20948_gyro_calibration+0x140>
 800368a:	3303      	adds	r3, #3
 800368c:	109b      	asrs	r3, r3, #2
 800368e:	b2da      	uxtb	r2, r3
 8003690:	1d3b      	adds	r3, r7, #4
 8003692:	70da      	strb	r2, [r3, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8003694:	230c      	movs	r3, #12
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	425b      	negs	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	da00      	bge.n	80036a2 <icm20948_gyro_calibration+0x156>
 80036a0:	3303      	adds	r3, #3
 80036a2:	109b      	asrs	r3, r3, #2
 80036a4:	121b      	asrs	r3, r3, #8
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	1d3b      	adds	r3, r7, #4
 80036aa:	711a      	strb	r2, [r3, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 80036ac:	230c      	movs	r3, #12
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	425b      	negs	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	da00      	bge.n	80036ba <icm20948_gyro_calibration+0x16e>
 80036b8:	3303      	adds	r3, #3
 80036ba:	109b      	asrs	r3, r3, #2
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	1d3b      	adds	r3, r7, #4
 80036c0:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 80036c2:	1d3a      	adds	r2, r7, #4
 80036c4:	2306      	movs	r3, #6
 80036c6:	2103      	movs	r1, #3
 80036c8:	2020      	movs	r0, #32
 80036ca:	f000 fadd 	bl	8003c88 <write_multiple_icm20948_reg>
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b00a      	add	sp, #40	; 0x28
 80036d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080036d8 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 80036d8:	b5b0      	push	{r4, r5, r7, lr}
 80036da:	b090      	sub	sp, #64	; 0x40
 80036dc:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 80036de:	2318      	movs	r3, #24
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	0018      	movs	r0, r3
 80036e4:	230c      	movs	r3, #12
 80036e6:	001a      	movs	r2, r3
 80036e8:	2100      	movs	r1, #0
 80036ea:	f004 fb93 	bl	8007e14 <memset>
	int32_t accel_bias_reg[3] = {0};
 80036ee:	230c      	movs	r3, #12
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	0018      	movs	r0, r3
 80036f4:	230c      	movs	r3, #12
 80036f6:	001a      	movs	r2, r3
 80036f8:	2100      	movs	r1, #0
 80036fa:	f004 fb8b 	bl	8007e14 <memset>
	uint8_t accel_offset[6] = {0};
 80036fe:	1d3b      	adds	r3, r7, #4
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	2200      	movs	r2, #0
 8003706:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 8003708:	2300      	movs	r3, #0
 800370a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370c:	e041      	b.n	8003792 <icm20948_accel_calibration+0xba>
	{
		icm20948_accel_read(&temp);
 800370e:	2524      	movs	r5, #36	; 0x24
 8003710:	197b      	adds	r3, r7, r5
 8003712:	0018      	movs	r0, r3
 8003714:	f7ff fcda 	bl	80030cc <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8003718:	2418      	movs	r4, #24
 800371a:	193b      	adds	r3, r7, r4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	0018      	movs	r0, r3
 8003720:	f7fd fa46 	bl	8000bb0 <__aeabi_i2f>
 8003724:	1c02      	adds	r2, r0, #0
 8003726:	197b      	adds	r3, r7, r5
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	1c19      	adds	r1, r3, #0
 800372c:	1c10      	adds	r0, r2, #0
 800372e:	f7fc fed3 	bl	80004d8 <__aeabi_fadd>
 8003732:	1c03      	adds	r3, r0, #0
 8003734:	1c18      	adds	r0, r3, #0
 8003736:	f7fd fa1b 	bl	8000b70 <__aeabi_f2iz>
 800373a:	0002      	movs	r2, r0
 800373c:	193b      	adds	r3, r7, r4
 800373e:	601a      	str	r2, [r3, #0]
		accel_bias[1] += temp.y;
 8003740:	193b      	adds	r3, r7, r4
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	0018      	movs	r0, r3
 8003746:	f7fd fa33 	bl	8000bb0 <__aeabi_i2f>
 800374a:	1c02      	adds	r2, r0, #0
 800374c:	197b      	adds	r3, r7, r5
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	1c19      	adds	r1, r3, #0
 8003752:	1c10      	adds	r0, r2, #0
 8003754:	f7fc fec0 	bl	80004d8 <__aeabi_fadd>
 8003758:	1c03      	adds	r3, r0, #0
 800375a:	1c18      	adds	r0, r3, #0
 800375c:	f7fd fa08 	bl	8000b70 <__aeabi_f2iz>
 8003760:	0002      	movs	r2, r0
 8003762:	193b      	adds	r3, r7, r4
 8003764:	605a      	str	r2, [r3, #4]
		accel_bias[2] += temp.z;
 8003766:	193b      	adds	r3, r7, r4
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0018      	movs	r0, r3
 800376c:	f7fd fa20 	bl	8000bb0 <__aeabi_i2f>
 8003770:	1c02      	adds	r2, r0, #0
 8003772:	197b      	adds	r3, r7, r5
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	1c19      	adds	r1, r3, #0
 8003778:	1c10      	adds	r0, r2, #0
 800377a:	f7fc fead 	bl	80004d8 <__aeabi_fadd>
 800377e:	1c03      	adds	r3, r0, #0
 8003780:	1c18      	adds	r0, r3, #0
 8003782:	f7fd f9f5 	bl	8000b70 <__aeabi_f2iz>
 8003786:	0002      	movs	r2, r0
 8003788:	193b      	adds	r3, r7, r4
 800378a:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 800378c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378e:	3301      	adds	r3, #1
 8003790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003794:	2b63      	cmp	r3, #99	; 0x63
 8003796:	ddba      	ble.n	800370e <icm20948_accel_calibration+0x36>
	}

	accel_bias[0] /= 100;
 8003798:	2418      	movs	r4, #24
 800379a:	193b      	adds	r3, r7, r4
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2164      	movs	r1, #100	; 0x64
 80037a0:	0018      	movs	r0, r3
 80037a2:	f7fc fd57 	bl	8000254 <__divsi3>
 80037a6:	0003      	movs	r3, r0
 80037a8:	001a      	movs	r2, r3
 80037aa:	193b      	adds	r3, r7, r4
 80037ac:	601a      	str	r2, [r3, #0]
	accel_bias[1] /= 100;
 80037ae:	193b      	adds	r3, r7, r4
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2164      	movs	r1, #100	; 0x64
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7fc fd4d 	bl	8000254 <__divsi3>
 80037ba:	0003      	movs	r3, r0
 80037bc:	001a      	movs	r2, r3
 80037be:	193b      	adds	r3, r7, r4
 80037c0:	605a      	str	r2, [r3, #4]
	accel_bias[2] /= 100;
 80037c2:	193b      	adds	r3, r7, r4
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2164      	movs	r1, #100	; 0x64
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7fc fd43 	bl	8000254 <__divsi3>
 80037ce:	0003      	movs	r3, r0
 80037d0:	001a      	movs	r2, r3
 80037d2:	193b      	adds	r3, r7, r4
 80037d4:	609a      	str	r2, [r3, #8]

	uint8_t mask_bit[3] = {0, 0, 0};
 80037d6:	003b      	movs	r3, r7
 80037d8:	4a68      	ldr	r2, [pc, #416]	; (800397c <icm20948_accel_calibration+0x2a4>)
 80037da:	8811      	ldrh	r1, [r2, #0]
 80037dc:	8019      	strh	r1, [r3, #0]
 80037de:	7892      	ldrb	r2, [r2, #2]
 80037e0:	709a      	strb	r2, [r3, #2]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 80037e2:	2202      	movs	r2, #2
 80037e4:	2114      	movs	r1, #20
 80037e6:	2010      	movs	r0, #16
 80037e8:	f000 fa14 	bl	8003c14 <read_multiple_icm20948_reg>
 80037ec:	0003      	movs	r3, r0
 80037ee:	63bb      	str	r3, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 80037f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037f8:	3201      	adds	r2, #1
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	250c      	movs	r5, #12
 8003800:	197b      	adds	r3, r7, r5
 8003802:	601a      	str	r2, [r3, #0]
	mask_bit[0] = temp2[1] & 0x01;
 8003804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003806:	3301      	adds	r3, #1
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2201      	movs	r2, #1
 800380c:	4013      	ands	r3, r2
 800380e:	b2da      	uxtb	r2, r3
 8003810:	003b      	movs	r3, r7
 8003812:	701a      	strb	r2, [r3, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8003814:	2202      	movs	r2, #2
 8003816:	2117      	movs	r1, #23
 8003818:	2010      	movs	r0, #16
 800381a:	f000 f9fb 	bl	8003c14 <read_multiple_icm20948_reg>
 800381e:	0003      	movs	r3, r0
 8003820:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8003822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800382a:	3201      	adds	r2, #1
 800382c:	7812      	ldrb	r2, [r2, #0]
 800382e:	431a      	orrs	r2, r3
 8003830:	197b      	adds	r3, r7, r5
 8003832:	605a      	str	r2, [r3, #4]
	mask_bit[1] = temp3[1] & 0x01;
 8003834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003836:	3301      	adds	r3, #1
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2201      	movs	r2, #1
 800383c:	4013      	ands	r3, r2
 800383e:	b2da      	uxtb	r2, r3
 8003840:	003b      	movs	r3, r7
 8003842:	705a      	strb	r2, [r3, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8003844:	2202      	movs	r2, #2
 8003846:	211a      	movs	r1, #26
 8003848:	2010      	movs	r0, #16
 800384a:	f000 f9e3 	bl	8003c14 <read_multiple_icm20948_reg>
 800384e:	0003      	movs	r3, r0
 8003850:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385a:	3201      	adds	r2, #1
 800385c:	7812      	ldrb	r2, [r2, #0]
 800385e:	431a      	orrs	r2, r3
 8003860:	197b      	adds	r3, r7, r5
 8003862:	609a      	str	r2, [r3, #8]
	mask_bit[2] = temp4[1] & 0x01;
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	3301      	adds	r3, #1
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2201      	movs	r2, #1
 800386c:	4013      	ands	r3, r2
 800386e:	b2da      	uxtb	r2, r3
 8003870:	003b      	movs	r3, r7
 8003872:	709a      	strb	r2, [r3, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8003874:	197b      	adds	r3, r7, r5
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	193b      	adds	r3, r7, r4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	da00      	bge.n	8003882 <icm20948_accel_calibration+0x1aa>
 8003880:	3307      	adds	r3, #7
 8003882:	10db      	asrs	r3, r3, #3
 8003884:	425b      	negs	r3, r3
 8003886:	18d2      	adds	r2, r2, r3
 8003888:	210c      	movs	r1, #12
 800388a:	187b      	adds	r3, r7, r1
 800388c:	601a      	str	r2, [r3, #0]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 800388e:	187b      	adds	r3, r7, r1
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	2318      	movs	r3, #24
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	da00      	bge.n	800389e <icm20948_accel_calibration+0x1c6>
 800389c:	3307      	adds	r3, #7
 800389e:	10db      	asrs	r3, r3, #3
 80038a0:	425b      	negs	r3, r3
 80038a2:	18d2      	adds	r2, r2, r3
 80038a4:	210c      	movs	r1, #12
 80038a6:	187b      	adds	r3, r7, r1
 80038a8:	605a      	str	r2, [r3, #4]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 80038aa:	187b      	adds	r3, r7, r1
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	2318      	movs	r3, #24
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	da00      	bge.n	80038ba <icm20948_accel_calibration+0x1e2>
 80038b8:	3307      	adds	r3, #7
 80038ba:	10db      	asrs	r3, r3, #3
 80038bc:	425b      	negs	r3, r3
 80038be:	18d2      	adds	r2, r2, r3
 80038c0:	210c      	movs	r1, #12
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	609a      	str	r2, [r3, #8]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	121b      	asrs	r3, r3, #8
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	701a      	strb	r2, [r3, #0]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 80038d2:	187b      	adds	r3, r7, r1
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2201      	movs	r2, #1
 80038da:	4393      	bics	r3, r2
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	705a      	strb	r2, [r3, #1]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	785a      	ldrb	r2, [r3, #1]
 80038e6:	003b      	movs	r3, r7
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	705a      	strb	r2, [r3, #1]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	121b      	asrs	r3, r3, #8
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	1d3b      	adds	r3, r7, #4
 80038fc:	709a      	strb	r2, [r3, #2]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 80038fe:	187b      	adds	r3, r7, r1
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2201      	movs	r2, #1
 8003906:	4393      	bics	r3, r2
 8003908:	b2da      	uxtb	r2, r3
 800390a:	1d3b      	adds	r3, r7, #4
 800390c:	70da      	strb	r2, [r3, #3]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	78da      	ldrb	r2, [r3, #3]
 8003912:	003b      	movs	r3, r7
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	4313      	orrs	r3, r2
 8003918:	b2da      	uxtb	r2, r3
 800391a:	1d3b      	adds	r3, r7, #4
 800391c:	70da      	strb	r2, [r3, #3]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800391e:	187b      	adds	r3, r7, r1
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	121b      	asrs	r3, r3, #8
 8003924:	b2da      	uxtb	r2, r3
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	711a      	strb	r2, [r3, #4]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 800392a:	187b      	adds	r3, r7, r1
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2201      	movs	r2, #1
 8003932:	4393      	bics	r3, r2
 8003934:	b2da      	uxtb	r2, r3
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	715a      	strb	r2, [r3, #5]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 800393a:	1d3b      	adds	r3, r7, #4
 800393c:	795a      	ldrb	r2, [r3, #5]
 800393e:	003b      	movs	r3, r7
 8003940:	789b      	ldrb	r3, [r3, #2]
 8003942:	4313      	orrs	r3, r2
 8003944:	b2da      	uxtb	r2, r3
 8003946:	1d3b      	adds	r3, r7, #4
 8003948:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 800394a:	1d3a      	adds	r2, r7, #4
 800394c:	2302      	movs	r3, #2
 800394e:	2114      	movs	r1, #20
 8003950:	2010      	movs	r0, #16
 8003952:	f000 f999 	bl	8003c88 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	1c9a      	adds	r2, r3, #2
 800395a:	2302      	movs	r3, #2
 800395c:	2117      	movs	r1, #23
 800395e:	2010      	movs	r0, #16
 8003960:	f000 f992 	bl	8003c88 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	1d1a      	adds	r2, r3, #4
 8003968:	2302      	movs	r3, #2
 800396a:	211a      	movs	r1, #26
 800396c:	2010      	movs	r0, #16
 800396e:	f000 f98b 	bl	8003c88 <write_multiple_icm20948_reg>
}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	b010      	add	sp, #64	; 0x40
 8003978:	bdb0      	pop	{r4, r5, r7, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	0800ade4 	.word	0x0800ade4

08003980 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	0002      	movs	r2, r0
 8003988:	1dfb      	adds	r3, r7, #7
 800398a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800398c:	230f      	movs	r3, #15
 800398e:	18fc      	adds	r4, r7, r3
 8003990:	2101      	movs	r1, #1
 8003992:	2020      	movs	r0, #32
 8003994:	f000 f8de 	bl	8003b54 <read_single_icm20948_reg>
 8003998:	0003      	movs	r3, r0
 800399a:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 800399c:	1dfb      	adds	r3, r7, #7
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d027      	beq.n	80039f4 <icm20948_gyro_full_scale_select+0x74>
 80039a4:	dc31      	bgt.n	8003a0a <icm20948_gyro_full_scale_select+0x8a>
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d019      	beq.n	80039de <icm20948_gyro_full_scale_select+0x5e>
 80039aa:	dc2e      	bgt.n	8003a0a <icm20948_gyro_full_scale_select+0x8a>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <icm20948_gyro_full_scale_select+0x36>
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d009      	beq.n	80039c8 <icm20948_gyro_full_scale_select+0x48>
 80039b4:	e029      	b.n	8003a0a <icm20948_gyro_full_scale_select+0x8a>
	{
		case _250dps :
			new_val |= 0x00;
 80039b6:	220f      	movs	r2, #15
 80039b8:	18bb      	adds	r3, r7, r2
 80039ba:	18ba      	adds	r2, r7, r2
 80039bc:	7812      	ldrb	r2, [r2, #0]
 80039be:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 131.0;
 80039c0:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <icm20948_gyro_full_scale_select+0xa4>)
 80039c2:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <icm20948_gyro_full_scale_select+0xa8>)
 80039c4:	601a      	str	r2, [r3, #0]
			break;
 80039c6:	e020      	b.n	8003a0a <icm20948_gyro_full_scale_select+0x8a>
		case _500dps :
			new_val |= 0x02;
 80039c8:	220f      	movs	r2, #15
 80039ca:	18bb      	adds	r3, r7, r2
 80039cc:	18ba      	adds	r2, r7, r2
 80039ce:	7812      	ldrb	r2, [r2, #0]
 80039d0:	2102      	movs	r1, #2
 80039d2:	430a      	orrs	r2, r1
 80039d4:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 65.5;
 80039d6:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <icm20948_gyro_full_scale_select+0xa4>)
 80039d8:	4a14      	ldr	r2, [pc, #80]	; (8003a2c <icm20948_gyro_full_scale_select+0xac>)
 80039da:	601a      	str	r2, [r3, #0]
			break;
 80039dc:	e015      	b.n	8003a0a <icm20948_gyro_full_scale_select+0x8a>
		case _1000dps :
			new_val |= 0x04;
 80039de:	220f      	movs	r2, #15
 80039e0:	18bb      	adds	r3, r7, r2
 80039e2:	18ba      	adds	r2, r7, r2
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	2104      	movs	r1, #4
 80039e8:	430a      	orrs	r2, r1
 80039ea:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 32.8;
 80039ec:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <icm20948_gyro_full_scale_select+0xa4>)
 80039ee:	4a10      	ldr	r2, [pc, #64]	; (8003a30 <icm20948_gyro_full_scale_select+0xb0>)
 80039f0:	601a      	str	r2, [r3, #0]
			break;
 80039f2:	e00a      	b.n	8003a0a <icm20948_gyro_full_scale_select+0x8a>
		case _2000dps :
			new_val |= 0x06;
 80039f4:	220f      	movs	r2, #15
 80039f6:	18bb      	adds	r3, r7, r2
 80039f8:	18ba      	adds	r2, r7, r2
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	2106      	movs	r1, #6
 80039fe:	430a      	orrs	r2, r1
 8003a00:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 16.4;
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <icm20948_gyro_full_scale_select+0xa4>)
 8003a04:	4a0b      	ldr	r2, [pc, #44]	; (8003a34 <icm20948_gyro_full_scale_select+0xb4>)
 8003a06:	601a      	str	r2, [r3, #0]
			break;
 8003a08:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8003a0a:	230f      	movs	r3, #15
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	001a      	movs	r2, r3
 8003a12:	2101      	movs	r1, #1
 8003a14:	2020      	movs	r0, #32
 8003a16:	f000 f8cf 	bl	8003bb8 <write_single_icm20948_reg>
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b005      	add	sp, #20
 8003a20:	bd90      	pop	{r4, r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	2000038c 	.word	0x2000038c
 8003a28:	43030000 	.word	0x43030000
 8003a2c:	42830000 	.word	0x42830000
 8003a30:	42033333 	.word	0x42033333
 8003a34:	41833333 	.word	0x41833333

08003a38 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	0002      	movs	r2, r0
 8003a40:	1dfb      	adds	r3, r7, #7
 8003a42:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8003a44:	230f      	movs	r3, #15
 8003a46:	18fc      	adds	r4, r7, r3
 8003a48:	2114      	movs	r1, #20
 8003a4a:	2020      	movs	r0, #32
 8003a4c:	f000 f882 	bl	8003b54 <read_single_icm20948_reg>
 8003a50:	0003      	movs	r3, r0
 8003a52:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 8003a54:	1dfb      	adds	r3, r7, #7
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d02a      	beq.n	8003ab2 <icm20948_accel_full_scale_select+0x7a>
 8003a5c:	dc35      	bgt.n	8003aca <icm20948_accel_full_scale_select+0x92>
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d01b      	beq.n	8003a9a <icm20948_accel_full_scale_select+0x62>
 8003a62:	dc32      	bgt.n	8003aca <icm20948_accel_full_scale_select+0x92>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <icm20948_accel_full_scale_select+0x36>
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d00a      	beq.n	8003a82 <icm20948_accel_full_scale_select+0x4a>
 8003a6c:	e02d      	b.n	8003aca <icm20948_accel_full_scale_select+0x92>
	{
		case _2g :
			new_val |= 0x00;
 8003a6e:	220f      	movs	r2, #15
 8003a70:	18bb      	adds	r3, r7, r2
 8003a72:	18ba      	adds	r2, r7, r2
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 16384;
 8003a78:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <icm20948_accel_full_scale_select+0xac>)
 8003a7a:	228d      	movs	r2, #141	; 0x8d
 8003a7c:	05d2      	lsls	r2, r2, #23
 8003a7e:	601a      	str	r2, [r3, #0]
			break;
 8003a80:	e023      	b.n	8003aca <icm20948_accel_full_scale_select+0x92>
		case _4g :
			new_val |= 0x02;
 8003a82:	220f      	movs	r2, #15
 8003a84:	18bb      	adds	r3, r7, r2
 8003a86:	18ba      	adds	r2, r7, r2
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 8192;
 8003a90:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <icm20948_accel_full_scale_select+0xac>)
 8003a92:	228c      	movs	r2, #140	; 0x8c
 8003a94:	05d2      	lsls	r2, r2, #23
 8003a96:	601a      	str	r2, [r3, #0]
			break;
 8003a98:	e017      	b.n	8003aca <icm20948_accel_full_scale_select+0x92>
		case _8g :
			new_val |= 0x04;
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	18bb      	adds	r3, r7, r2
 8003a9e:	18ba      	adds	r2, r7, r2
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	2104      	movs	r1, #4
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 4096;
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <icm20948_accel_full_scale_select+0xac>)
 8003aaa:	228b      	movs	r2, #139	; 0x8b
 8003aac:	05d2      	lsls	r2, r2, #23
 8003aae:	601a      	str	r2, [r3, #0]
			break;
 8003ab0:	e00b      	b.n	8003aca <icm20948_accel_full_scale_select+0x92>
		case _16g :
			new_val |= 0x06;
 8003ab2:	220f      	movs	r2, #15
 8003ab4:	18bb      	adds	r3, r7, r2
 8003ab6:	18ba      	adds	r2, r7, r2
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	2106      	movs	r1, #6
 8003abc:	430a      	orrs	r2, r1
 8003abe:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 2048;
 8003ac0:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <icm20948_accel_full_scale_select+0xac>)
 8003ac2:	228a      	movs	r2, #138	; 0x8a
 8003ac4:	05d2      	lsls	r2, r2, #23
 8003ac6:	601a      	str	r2, [r3, #0]
			break;
 8003ac8:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8003aca:	230f      	movs	r3, #15
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	001a      	movs	r2, r3
 8003ad2:	2114      	movs	r1, #20
 8003ad4:	2020      	movs	r0, #32
 8003ad6:	f000 f86f 	bl	8003bb8 <write_single_icm20948_reg>
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b005      	add	sp, #20
 8003ae0:	bd90      	pop	{r4, r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	20000390 	.word	0x20000390

08003ae8 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
 8003aec:	2390      	movs	r3, #144	; 0x90
 8003aee:	05db      	lsls	r3, r3, #23
 8003af0:	2201      	movs	r2, #1
 8003af2:	2110      	movs	r1, #16
 8003af4:	0018      	movs	r0, r3
 8003af6:	f001 f843 	bl	8004b80 <HAL_GPIO_WritePin>
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <cs_low>:

static void cs_low()
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8003b04:	2390      	movs	r3, #144	; 0x90
 8003b06:	05db      	lsls	r3, r3, #23
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2110      	movs	r1, #16
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f001 f837 	bl	8004b80 <HAL_GPIO_WritePin>
}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	0002      	movs	r2, r0
 8003b20:	1dfb      	adds	r3, r7, #7
 8003b22:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8003b24:	240c      	movs	r4, #12
 8003b26:	193b      	adds	r3, r7, r4
 8003b28:	227f      	movs	r2, #127	; 0x7f
 8003b2a:	701a      	strb	r2, [r3, #0]
	write_reg[1] = ub;
 8003b2c:	193b      	adds	r3, r7, r4
 8003b2e:	1dfa      	adds	r2, r7, #7
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	705a      	strb	r2, [r3, #1]

	cs_low();
 8003b34:	f7ff ffe4 	bl	8003b00 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8003b38:	1939      	adds	r1, r7, r4
 8003b3a:	4805      	ldr	r0, [pc, #20]	; (8003b50 <select_user_bank+0x38>)
 8003b3c:	230a      	movs	r3, #10
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f001 fda0 	bl	8005684 <HAL_SPI_Transmit>
	cs_high();
 8003b44:	f7ff ffd0 	bl	8003ae8 <cs_high>
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b005      	add	sp, #20
 8003b4e:	bd90      	pop	{r4, r7, pc}
 8003b50:	200001f8 	.word	0x200001f8

08003b54 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8003b54:	b590      	push	{r4, r7, lr}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	0002      	movs	r2, r0
 8003b5c:	1dfb      	adds	r3, r7, #7
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	1dbb      	adds	r3, r7, #6
 8003b62:	1c0a      	adds	r2, r1, #0
 8003b64:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 8003b66:	1dbb      	adds	r3, r7, #6
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2280      	movs	r2, #128	; 0x80
 8003b6c:	4252      	negs	r2, r2
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	240f      	movs	r4, #15
 8003b74:	193b      	adds	r3, r7, r4
 8003b76:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val;
	select_user_bank(ub);
 8003b78:	1dfb      	adds	r3, r7, #7
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7ff ffcb 	bl	8003b18 <select_user_bank>

	cs_low();
 8003b82:	f7ff ffbd 	bl	8003b00 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8003b86:	23fa      	movs	r3, #250	; 0xfa
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	1939      	adds	r1, r7, r4
 8003b8c:	4809      	ldr	r0, [pc, #36]	; (8003bb4 <read_single_icm20948_reg+0x60>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f001 fd78 	bl	8005684 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8003b94:	23fa      	movs	r3, #250	; 0xfa
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	240e      	movs	r4, #14
 8003b9a:	1939      	adds	r1, r7, r4
 8003b9c:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <read_single_icm20948_reg+0x60>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f001 fec8 	bl	8005934 <HAL_SPI_Receive>
	cs_high();
 8003ba4:	f7ff ffa0 	bl	8003ae8 <cs_high>

	return reg_val;
 8003ba8:	193b      	adds	r3, r7, r4
 8003baa:	781b      	ldrb	r3, [r3, #0]
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b005      	add	sp, #20
 8003bb2:	bd90      	pop	{r4, r7, pc}
 8003bb4:	200001f8 	.word	0x200001f8

08003bb8 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8003bb8:	b590      	push	{r4, r7, lr}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	0004      	movs	r4, r0
 8003bc0:	0008      	movs	r0, r1
 8003bc2:	0011      	movs	r1, r2
 8003bc4:	1dfb      	adds	r3, r7, #7
 8003bc6:	1c22      	adds	r2, r4, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	1dbb      	adds	r3, r7, #6
 8003bcc:	1c02      	adds	r2, r0, #0
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	1d7b      	adds	r3, r7, #5
 8003bd2:	1c0a      	adds	r2, r1, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8003bd6:	240c      	movs	r4, #12
 8003bd8:	193b      	adds	r3, r7, r4
 8003bda:	1dba      	adds	r2, r7, #6
 8003bdc:	7812      	ldrb	r2, [r2, #0]
 8003bde:	701a      	strb	r2, [r3, #0]
	write_reg[1] = val;
 8003be0:	193b      	adds	r3, r7, r4
 8003be2:	1d7a      	adds	r2, r7, #5
 8003be4:	7812      	ldrb	r2, [r2, #0]
 8003be6:	705a      	strb	r2, [r3, #1]

	select_user_bank(ub);
 8003be8:	1dfb      	adds	r3, r7, #7
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7ff ff93 	bl	8003b18 <select_user_bank>

	cs_low();
 8003bf2:	f7ff ff85 	bl	8003b00 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8003bf6:	23fa      	movs	r3, #250	; 0xfa
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	1939      	adds	r1, r7, r4
 8003bfc:	4804      	ldr	r0, [pc, #16]	; (8003c10 <write_single_icm20948_reg+0x58>)
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f001 fd40 	bl	8005684 <HAL_SPI_Transmit>
	cs_high();
 8003c04:	f7ff ff70 	bl	8003ae8 <cs_high>
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b005      	add	sp, #20
 8003c0e:	bd90      	pop	{r4, r7, pc}
 8003c10:	200001f8 	.word	0x200001f8

08003c14 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	0004      	movs	r4, r0
 8003c1c:	0008      	movs	r0, r1
 8003c1e:	0011      	movs	r1, r2
 8003c20:	1dfb      	adds	r3, r7, #7
 8003c22:	1c22      	adds	r2, r4, #0
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	1dbb      	adds	r3, r7, #6
 8003c28:	1c02      	adds	r2, r0, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
 8003c2c:	1d7b      	adds	r3, r7, #5
 8003c2e:	1c0a      	adds	r2, r1, #0
 8003c30:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 8003c32:	1dbb      	adds	r3, r7, #6
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2280      	movs	r2, #128	; 0x80
 8003c38:	4252      	negs	r2, r2
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	240f      	movs	r4, #15
 8003c40:	193b      	adds	r3, r7, r4
 8003c42:	701a      	strb	r2, [r3, #0]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f7ff ff65 	bl	8003b18 <select_user_bank>

	cs_low();
 8003c4e:	f7ff ff57 	bl	8003b00 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8003c52:	23fa      	movs	r3, #250	; 0xfa
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	1939      	adds	r1, r7, r4
 8003c58:	4809      	ldr	r0, [pc, #36]	; (8003c80 <read_multiple_icm20948_reg+0x6c>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f001 fd12 	bl	8005684 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8003c60:	1d7b      	adds	r3, r7, #5
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	23fa      	movs	r3, #250	; 0xfa
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4906      	ldr	r1, [pc, #24]	; (8003c84 <read_multiple_icm20948_reg+0x70>)
 8003c6c:	4804      	ldr	r0, [pc, #16]	; (8003c80 <read_multiple_icm20948_reg+0x6c>)
 8003c6e:	f001 fe61 	bl	8005934 <HAL_SPI_Receive>
	cs_high();
 8003c72:	f7ff ff39 	bl	8003ae8 <cs_high>

	return reg_val;
 8003c76:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <read_multiple_icm20948_reg+0x70>)
}
 8003c78:	0018      	movs	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b005      	add	sp, #20
 8003c7e:	bd90      	pop	{r4, r7, pc}
 8003c80:	200001f8 	.word	0x200001f8
 8003c84:	200003b8 	.word	0x200003b8

08003c88 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	0004      	movs	r4, r0
 8003c90:	0008      	movs	r0, r1
 8003c92:	603a      	str	r2, [r7, #0]
 8003c94:	0019      	movs	r1, r3
 8003c96:	1dfb      	adds	r3, r7, #7
 8003c98:	1c22      	adds	r2, r4, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	1dbb      	adds	r3, r7, #6
 8003c9e:	1c02      	adds	r2, r0, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	1d7b      	adds	r3, r7, #5
 8003ca4:	1c0a      	adds	r2, r1, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg = WRITE | reg;
 8003ca8:	240f      	movs	r4, #15
 8003caa:	193b      	adds	r3, r7, r4
 8003cac:	1dba      	adds	r2, r7, #6
 8003cae:	7812      	ldrb	r2, [r2, #0]
 8003cb0:	701a      	strb	r2, [r3, #0]
	select_user_bank(ub);
 8003cb2:	1dfb      	adds	r3, r7, #7
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7ff ff2e 	bl	8003b18 <select_user_bank>

	cs_low();
 8003cbc:	f7ff ff20 	bl	8003b00 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8003cc0:	23fa      	movs	r3, #250	; 0xfa
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	1939      	adds	r1, r7, r4
 8003cc6:	4809      	ldr	r0, [pc, #36]	; (8003cec <write_multiple_icm20948_reg+0x64>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f001 fcdb 	bl	8005684 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8003cce:	1d7b      	adds	r3, r7, #5
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	23fa      	movs	r3, #250	; 0xfa
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	4804      	ldr	r0, [pc, #16]	; (8003cec <write_multiple_icm20948_reg+0x64>)
 8003cdc:	f001 fcd2 	bl	8005684 <HAL_SPI_Transmit>
	cs_high();
 8003ce0:	f7ff ff02 	bl	8003ae8 <cs_high>
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b005      	add	sp, #20
 8003cea:	bd90      	pop	{r4, r7, pc}
 8003cec:	200001f8 	.word	0x200001f8

08003cf0 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	1dfb      	adds	r3, r7, #7
 8003cfa:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8003cfc:	228c      	movs	r2, #140	; 0x8c
 8003cfe:	2103      	movs	r1, #3
 8003d00:	2030      	movs	r0, #48	; 0x30
 8003d02:	f7ff ff59 	bl	8003bb8 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8003d06:	1dfb      	adds	r3, r7, #7
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	001a      	movs	r2, r3
 8003d0c:	2104      	movs	r1, #4
 8003d0e:	2030      	movs	r0, #48	; 0x30
 8003d10:	f7ff ff52 	bl	8003bb8 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8003d14:	2281      	movs	r2, #129	; 0x81
 8003d16:	2105      	movs	r1, #5
 8003d18:	2030      	movs	r0, #48	; 0x30
 8003d1a:	f7ff ff4d 	bl	8003bb8 <write_single_icm20948_reg>

	HAL_Delay(1);
 8003d1e:	2001      	movs	r0, #1
 8003d20:	f000 fb38 	bl	8004394 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8003d24:	213b      	movs	r1, #59	; 0x3b
 8003d26:	2000      	movs	r0, #0
 8003d28:	f7ff ff14 	bl	8003b54 <read_single_icm20948_reg>
 8003d2c:	0003      	movs	r3, r0
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b002      	add	sp, #8
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	0002      	movs	r2, r0
 8003d3e:	1dfb      	adds	r3, r7, #7
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	1dbb      	adds	r3, r7, #6
 8003d44:	1c0a      	adds	r2, r1, #0
 8003d46:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8003d48:	220c      	movs	r2, #12
 8003d4a:	2103      	movs	r1, #3
 8003d4c:	2030      	movs	r0, #48	; 0x30
 8003d4e:	f7ff ff33 	bl	8003bb8 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8003d52:	1dfb      	adds	r3, r7, #7
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	001a      	movs	r2, r3
 8003d58:	2104      	movs	r1, #4
 8003d5a:	2030      	movs	r0, #48	; 0x30
 8003d5c:	f7ff ff2c 	bl	8003bb8 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8003d60:	1dbb      	adds	r3, r7, #6
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	001a      	movs	r2, r3
 8003d66:	2106      	movs	r1, #6
 8003d68:	2030      	movs	r0, #48	; 0x30
 8003d6a:	f7ff ff25 	bl	8003bb8 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8003d6e:	2281      	movs	r2, #129	; 0x81
 8003d70:	2105      	movs	r1, #5
 8003d72:	2030      	movs	r0, #48	; 0x30
 8003d74:	f7ff ff20 	bl	8003bb8 <write_single_icm20948_reg>
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b002      	add	sp, #8
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	0002      	movs	r2, r0
 8003d88:	1dfb      	adds	r3, r7, #7
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	1dbb      	adds	r3, r7, #6
 8003d8e:	1c0a      	adds	r2, r1, #0
 8003d90:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8003d92:	228c      	movs	r2, #140	; 0x8c
 8003d94:	2103      	movs	r1, #3
 8003d96:	2030      	movs	r0, #48	; 0x30
 8003d98:	f7ff ff0e 	bl	8003bb8 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8003d9c:	1dfb      	adds	r3, r7, #7
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	001a      	movs	r2, r3
 8003da2:	2104      	movs	r1, #4
 8003da4:	2030      	movs	r0, #48	; 0x30
 8003da6:	f7ff ff07 	bl	8003bb8 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8003daa:	1dbb      	adds	r3, r7, #6
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	4252      	negs	r2, r2
 8003db2:	4313      	orrs	r3, r2
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	001a      	movs	r2, r3
 8003db8:	2105      	movs	r1, #5
 8003dba:	2030      	movs	r0, #48	; 0x30
 8003dbc:	f7ff fefc 	bl	8003bb8 <write_single_icm20948_reg>

	HAL_Delay(1);
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f000 fae7 	bl	8004394 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8003dc6:	1dbb      	adds	r3, r7, #6
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	001a      	movs	r2, r3
 8003dcc:	213b      	movs	r1, #59	; 0x3b
 8003dce:	2000      	movs	r0, #0
 8003dd0:	f7ff ff20 	bl	8003c14 <read_multiple_icm20948_reg>
 8003dd4:	0003      	movs	r3, r0
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b002      	add	sp, #8
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003de2:	b672      	cpsid	i
}
 8003de4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003de6:	e7fe      	b.n	8003de6 <Error_Handler+0x8>

08003de8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <HAL_MspInit+0x44>)
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <HAL_MspInit+0x44>)
 8003df4:	2101      	movs	r1, #1
 8003df6:	430a      	orrs	r2, r1
 8003df8:	619a      	str	r2, [r3, #24]
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <HAL_MspInit+0x44>)
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	4013      	ands	r3, r2
 8003e02:	607b      	str	r3, [r7, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_MspInit+0x44>)
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_MspInit+0x44>)
 8003e0c:	2180      	movs	r1, #128	; 0x80
 8003e0e:	0549      	lsls	r1, r1, #21
 8003e10:	430a      	orrs	r2, r1
 8003e12:	61da      	str	r2, [r3, #28]
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_MspInit+0x44>)
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	055b      	lsls	r3, r3, #21
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b002      	add	sp, #8
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	40021000 	.word	0x40021000

08003e30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b08b      	sub	sp, #44	; 0x2c
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e38:	2414      	movs	r4, #20
 8003e3a:	193b      	adds	r3, r7, r4
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	2314      	movs	r3, #20
 8003e40:	001a      	movs	r2, r3
 8003e42:	2100      	movs	r1, #0
 8003e44:	f003 ffe6 	bl	8007e14 <memset>
  if(hspi->Instance==SPI1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <HAL_SPI_MspInit+0x90>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d132      	bne.n	8003eb8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e52:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <HAL_SPI_MspInit+0x94>)
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_SPI_MspInit+0x94>)
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	0149      	lsls	r1, r1, #5
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	619a      	str	r2, [r3, #24]
 8003e60:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <HAL_SPI_MspInit+0x94>)
 8003e62:	699a      	ldr	r2, [r3, #24]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	015b      	lsls	r3, r3, #5
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <HAL_SPI_MspInit+0x94>)
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_SPI_MspInit+0x94>)
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	0289      	lsls	r1, r1, #10
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	615a      	str	r2, [r3, #20]
 8003e7c:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <HAL_SPI_MspInit+0x94>)
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	029b      	lsls	r3, r3, #10
 8003e84:	4013      	ands	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e8a:	0021      	movs	r1, r4
 8003e8c:	187b      	adds	r3, r7, r1
 8003e8e:	22e0      	movs	r2, #224	; 0xe0
 8003e90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	2202      	movs	r2, #2
 8003e96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e9e:	187b      	adds	r3, r7, r1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eaa:	187a      	adds	r2, r7, r1
 8003eac:	2390      	movs	r3, #144	; 0x90
 8003eae:	05db      	lsls	r3, r3, #23
 8003eb0:	0011      	movs	r1, r2
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f000 fcf4 	bl	80048a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b00b      	add	sp, #44	; 0x2c
 8003ebe:	bd90      	pop	{r4, r7, pc}
 8003ec0:	40013000 	.word	0x40013000
 8003ec4:	40021000 	.word	0x40021000

08003ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a09      	ldr	r2, [pc, #36]	; (8003efc <HAL_TIM_Base_MspInit+0x34>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_TIM_Base_MspInit+0x38>)
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <HAL_TIM_Base_MspInit+0x38>)
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	61da      	str	r2, [r3, #28]
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_TIM_Base_MspInit+0x38>)
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	2202      	movs	r2, #2
 8003eec:	4013      	ands	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40021000 	.word	0x40021000

08003f04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b089      	sub	sp, #36	; 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0c:	240c      	movs	r4, #12
 8003f0e:	193b      	adds	r3, r7, r4
 8003f10:	0018      	movs	r0, r3
 8003f12:	2314      	movs	r3, #20
 8003f14:	001a      	movs	r2, r3
 8003f16:	2100      	movs	r1, #0
 8003f18:	f003 ff7c 	bl	8007e14 <memset>
  if(htim->Instance==TIM3)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <HAL_TIM_MspPostInit+0x74>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d124      	bne.n	8003f70 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <HAL_TIM_MspPostInit+0x78>)
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <HAL_TIM_MspPostInit+0x78>)
 8003f2c:	2180      	movs	r1, #128	; 0x80
 8003f2e:	0309      	lsls	r1, r1, #12
 8003f30:	430a      	orrs	r2, r1
 8003f32:	615a      	str	r2, [r3, #20]
 8003f34:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <HAL_TIM_MspPostInit+0x78>)
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	031b      	lsls	r3, r3, #12
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f42:	193b      	adds	r3, r7, r4
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	0092      	lsls	r2, r2, #2
 8003f48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4a:	0021      	movs	r1, r4
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	2202      	movs	r2, #2
 8003f50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f52:	187b      	adds	r3, r7, r1
 8003f54:	2200      	movs	r2, #0
 8003f56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003f5e:	187b      	adds	r3, r7, r1
 8003f60:	2200      	movs	r2, #0
 8003f62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	4a06      	ldr	r2, [pc, #24]	; (8003f80 <HAL_TIM_MspPostInit+0x7c>)
 8003f68:	0019      	movs	r1, r3
 8003f6a:	0010      	movs	r0, r2
 8003f6c:	f000 fc98 	bl	80048a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b009      	add	sp, #36	; 0x24
 8003f76:	bd90      	pop	{r4, r7, pc}
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	48000800 	.word	0x48000800

08003f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b08b      	sub	sp, #44	; 0x2c
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8c:	2414      	movs	r4, #20
 8003f8e:	193b      	adds	r3, r7, r4
 8003f90:	0018      	movs	r0, r3
 8003f92:	2314      	movs	r3, #20
 8003f94:	001a      	movs	r2, r3
 8003f96:	2100      	movs	r1, #0
 8003f98:	f003 ff3c 	bl	8007e14 <memset>
  if(huart->Instance==USART2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a33      	ldr	r2, [pc, #204]	; (8004070 <HAL_UART_MspInit+0xec>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d160      	bne.n	8004068 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fa6:	4b33      	ldr	r3, [pc, #204]	; (8004074 <HAL_UART_MspInit+0xf0>)
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	4b32      	ldr	r3, [pc, #200]	; (8004074 <HAL_UART_MspInit+0xf0>)
 8003fac:	2180      	movs	r1, #128	; 0x80
 8003fae:	0289      	lsls	r1, r1, #10
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	61da      	str	r2, [r3, #28]
 8003fb4:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <HAL_UART_MspInit+0xf0>)
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	029b      	lsls	r3, r3, #10
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc2:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <HAL_UART_MspInit+0xf0>)
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <HAL_UART_MspInit+0xf0>)
 8003fc8:	2180      	movs	r1, #128	; 0x80
 8003fca:	0289      	lsls	r1, r1, #10
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	615a      	str	r2, [r3, #20]
 8003fd0:	4b28      	ldr	r3, [pc, #160]	; (8004074 <HAL_UART_MspInit+0xf0>)
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	029b      	lsls	r3, r3, #10
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003fde:	0021      	movs	r1, r4
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	220c      	movs	r2, #12
 8003fe4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	2202      	movs	r2, #2
 8003fea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffe:	187a      	adds	r2, r7, r1
 8004000:	2390      	movs	r3, #144	; 0x90
 8004002:	05db      	lsls	r3, r3, #23
 8004004:	0011      	movs	r1, r2
 8004006:	0018      	movs	r0, r3
 8004008:	f000 fc4a 	bl	80048a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <HAL_UART_MspInit+0xf4>)
 800400e:	4a1b      	ldr	r2, [pc, #108]	; (800407c <HAL_UART_MspInit+0xf8>)
 8004010:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004012:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_UART_MspInit+0xf4>)
 8004014:	2210      	movs	r2, #16
 8004016:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004018:	4b17      	ldr	r3, [pc, #92]	; (8004078 <HAL_UART_MspInit+0xf4>)
 800401a:	2200      	movs	r2, #0
 800401c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800401e:	4b16      	ldr	r3, [pc, #88]	; (8004078 <HAL_UART_MspInit+0xf4>)
 8004020:	2280      	movs	r2, #128	; 0x80
 8004022:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004024:	4b14      	ldr	r3, [pc, #80]	; (8004078 <HAL_UART_MspInit+0xf4>)
 8004026:	2200      	movs	r2, #0
 8004028:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800402a:	4b13      	ldr	r3, [pc, #76]	; (8004078 <HAL_UART_MspInit+0xf4>)
 800402c:	2200      	movs	r2, #0
 800402e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004030:	4b11      	ldr	r3, [pc, #68]	; (8004078 <HAL_UART_MspInit+0xf4>)
 8004032:	2200      	movs	r2, #0
 8004034:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <HAL_UART_MspInit+0xf4>)
 8004038:	2200      	movs	r2, #0
 800403a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_UART_MspInit+0xf4>)
 800403e:	0018      	movs	r0, r3
 8004040:	f000 faaa 	bl	8004598 <HAL_DMA_Init>
 8004044:	1e03      	subs	r3, r0, #0
 8004046:	d001      	beq.n	800404c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8004048:	f7ff fec9 	bl	8003dde <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <HAL_UART_MspInit+0xf4>)
 8004050:	66da      	str	r2, [r3, #108]	; 0x6c
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_UART_MspInit+0xf4>)
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004058:	2200      	movs	r2, #0
 800405a:	2100      	movs	r1, #0
 800405c:	201c      	movs	r0, #28
 800405e:	f000 fa69 	bl	8004534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004062:	201c      	movs	r0, #28
 8004064:	f000 fa7b 	bl	800455e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004068:	46c0      	nop			; (mov r8, r8)
 800406a:	46bd      	mov	sp, r7
 800406c:	b00b      	add	sp, #44	; 0x2c
 800406e:	bd90      	pop	{r4, r7, pc}
 8004070:	40004400 	.word	0x40004400
 8004074:	40021000 	.word	0x40021000
 8004078:	20000328 	.word	0x20000328
 800407c:	40020044 	.word	0x40020044

08004080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004084:	e7fe      	b.n	8004084 <NMI_Handler+0x4>

08004086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800408a:	e7fe      	b.n	800408a <HardFault_Handler+0x4>

0800408c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004090:	46c0      	nop			; (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040a4:	f000 f95a 	bl	800435c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80040b2:	2001      	movs	r0, #1
 80040b4:	f000 fd9c 	bl	8004bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80040b8:	46c0      	nop			; (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <DMA1_Channel4_5_IRQHandler+0x14>)
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 fb2b 	bl	8004722 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	20000328 	.word	0x20000328

080040d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <USART2_IRQHandler+0x14>)
 80040de:	0018      	movs	r0, r3
 80040e0:	f002 ffce 	bl	8007080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	200002a4 	.word	0x200002a4

080040f0 <_getpid>:
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	2301      	movs	r3, #1
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_kill>:
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
 8004106:	f003 fe5b 	bl	8007dc0 <__errno>
 800410a:	0003      	movs	r3, r0
 800410c:	2216      	movs	r2, #22
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	2301      	movs	r3, #1
 8004112:	425b      	negs	r3, r3
 8004114:	0018      	movs	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	b002      	add	sp, #8
 800411a:	bd80      	pop	{r7, pc}

0800411c <_exit>:
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	2301      	movs	r3, #1
 8004126:	425a      	negs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	0011      	movs	r1, r2
 800412c:	0018      	movs	r0, r3
 800412e:	f7ff ffe5 	bl	80040fc <_kill>
 8004132:	e7fe      	b.n	8004132 <_exit+0x16>

08004134 <_read>:
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e00a      	b.n	800415c <_read+0x28>
 8004146:	e000      	b.n	800414a <_read+0x16>
 8004148:	bf00      	nop
 800414a:	0001      	movs	r1, r0
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	60ba      	str	r2, [r7, #8]
 8004152:	b2ca      	uxtb	r2, r1
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	3301      	adds	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	dbf0      	blt.n	8004146 <_read+0x12>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	0018      	movs	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	b006      	add	sp, #24
 800416c:	bd80      	pop	{r7, pc}

0800416e <_write>:
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e009      	b.n	8004194 <_write+0x26>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	60ba      	str	r2, [r7, #8]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	0018      	movs	r0, r3
 800418a:	e000      	b.n	800418e <_write+0x20>
 800418c:	bf00      	nop
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3301      	adds	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	dbf1      	blt.n	8004180 <_write+0x12>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	0018      	movs	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b006      	add	sp, #24
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <_close>:
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	2301      	movs	r3, #1
 80041b0:	425b      	negs	r3, r3
 80041b2:	0018      	movs	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b002      	add	sp, #8
 80041b8:	bd80      	pop	{r7, pc}

080041ba <_fstat>:
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2280      	movs	r2, #128	; 0x80
 80041c8:	0192      	lsls	r2, r2, #6
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	2300      	movs	r3, #0
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b002      	add	sp, #8
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <_isatty>:
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	2301      	movs	r3, #1
 80041e0:	0018      	movs	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b002      	add	sp, #8
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <_lseek>:
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	2300      	movs	r3, #0
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b004      	add	sp, #16
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <_sbrk>:
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	4a14      	ldr	r2, [pc, #80]	; (800425c <_sbrk+0x5c>)
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <_sbrk+0x60>)
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	4b13      	ldr	r3, [pc, #76]	; (8004264 <_sbrk+0x64>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <_sbrk+0x22>
 800421c:	4b11      	ldr	r3, [pc, #68]	; (8004264 <_sbrk+0x64>)
 800421e:	4a12      	ldr	r2, [pc, #72]	; (8004268 <_sbrk+0x68>)
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <_sbrk+0x64>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	18d3      	adds	r3, r2, r3
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	429a      	cmp	r2, r3
 800422e:	d207      	bcs.n	8004240 <_sbrk+0x40>
 8004230:	f003 fdc6 	bl	8007dc0 <__errno>
 8004234:	0003      	movs	r3, r0
 8004236:	220c      	movs	r2, #12
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	2301      	movs	r3, #1
 800423c:	425b      	negs	r3, r3
 800423e:	e009      	b.n	8004254 <_sbrk+0x54>
 8004240:	4b08      	ldr	r3, [pc, #32]	; (8004264 <_sbrk+0x64>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	4b07      	ldr	r3, [pc, #28]	; (8004264 <_sbrk+0x64>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	18d2      	adds	r2, r2, r3
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <_sbrk+0x64>)
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	0018      	movs	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	b006      	add	sp, #24
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20002000 	.word	0x20002000
 8004260:	00000400 	.word	0x00000400
 8004264:	200003c0 	.word	0x200003c0
 8004268:	200003d8 	.word	0x200003d8

0800426c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <Reset_Handler>:
 8004278:	480d      	ldr	r0, [pc, #52]	; (80042b0 <LoopForever+0x2>)
 800427a:	4685      	mov	sp, r0
 800427c:	480d      	ldr	r0, [pc, #52]	; (80042b4 <LoopForever+0x6>)
 800427e:	490e      	ldr	r1, [pc, #56]	; (80042b8 <LoopForever+0xa>)
 8004280:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <LoopForever+0xe>)
 8004282:	2300      	movs	r3, #0
 8004284:	e002      	b.n	800428c <LoopCopyDataInit>

08004286 <CopyDataInit>:
 8004286:	58d4      	ldr	r4, [r2, r3]
 8004288:	50c4      	str	r4, [r0, r3]
 800428a:	3304      	adds	r3, #4

0800428c <LoopCopyDataInit>:
 800428c:	18c4      	adds	r4, r0, r3
 800428e:	428c      	cmp	r4, r1
 8004290:	d3f9      	bcc.n	8004286 <CopyDataInit>
 8004292:	4a0b      	ldr	r2, [pc, #44]	; (80042c0 <LoopForever+0x12>)
 8004294:	4c0b      	ldr	r4, [pc, #44]	; (80042c4 <LoopForever+0x16>)
 8004296:	2300      	movs	r3, #0
 8004298:	e001      	b.n	800429e <LoopFillZerobss>

0800429a <FillZerobss>:
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	3204      	adds	r2, #4

0800429e <LoopFillZerobss>:
 800429e:	42a2      	cmp	r2, r4
 80042a0:	d3fb      	bcc.n	800429a <FillZerobss>
 80042a2:	f7ff ffe3 	bl	800426c <SystemInit>
 80042a6:	f003 fd91 	bl	8007dcc <__libc_init_array>
 80042aa:	f7fe fc31 	bl	8002b10 <main>

080042ae <LoopForever>:
 80042ae:	e7fe      	b.n	80042ae <LoopForever>
 80042b0:	20002000 	.word	0x20002000
 80042b4:	20000000 	.word	0x20000000
 80042b8:	200001dc 	.word	0x200001dc
 80042bc:	0800b284 	.word	0x0800b284
 80042c0:	200001dc 	.word	0x200001dc
 80042c4:	200003d8 	.word	0x200003d8

080042c8 <ADC1_COMP_IRQHandler>:
 80042c8:	e7fe      	b.n	80042c8 <ADC1_COMP_IRQHandler>
	...

080042cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <HAL_Init+0x24>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_Init+0x24>)
 80042d6:	2110      	movs	r1, #16
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80042dc:	2000      	movs	r0, #0
 80042de:	f000 f809 	bl	80042f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042e2:	f7ff fd81 	bl	8003de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	0018      	movs	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	40022000 	.word	0x40022000

080042f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <HAL_InitTick+0x5c>)
 80042fe:	681c      	ldr	r4, [r3, #0]
 8004300:	4b14      	ldr	r3, [pc, #80]	; (8004354 <HAL_InitTick+0x60>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	0019      	movs	r1, r3
 8004306:	23fa      	movs	r3, #250	; 0xfa
 8004308:	0098      	lsls	r0, r3, #2
 800430a:	f7fb ff19 	bl	8000140 <__udivsi3>
 800430e:	0003      	movs	r3, r0
 8004310:	0019      	movs	r1, r3
 8004312:	0020      	movs	r0, r4
 8004314:	f7fb ff14 	bl	8000140 <__udivsi3>
 8004318:	0003      	movs	r3, r0
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f92f 	bl	800457e <HAL_SYSTICK_Config>
 8004320:	1e03      	subs	r3, r0, #0
 8004322:	d001      	beq.n	8004328 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e00f      	b.n	8004348 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d80b      	bhi.n	8004346 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	2301      	movs	r3, #1
 8004332:	425b      	negs	r3, r3
 8004334:	2200      	movs	r2, #0
 8004336:	0018      	movs	r0, r3
 8004338:	f000 f8fc 	bl	8004534 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <HAL_InitTick+0x64>)
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	e000      	b.n	8004348 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b003      	add	sp, #12
 800434e:	bd90      	pop	{r4, r7, pc}
 8004350:	20000000 	.word	0x20000000
 8004354:	20000008 	.word	0x20000008
 8004358:	20000004 	.word	0x20000004

0800435c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_IncTick+0x1c>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	001a      	movs	r2, r3
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_IncTick+0x20>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	18d2      	adds	r2, r2, r3
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <HAL_IncTick+0x20>)
 800436e:	601a      	str	r2, [r3, #0]
}
 8004370:	46c0      	nop			; (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	20000008 	.word	0x20000008
 800437c:	200003c4 	.word	0x200003c4

08004380 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  return uwTick;
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <HAL_GetTick+0x10>)
 8004386:	681b      	ldr	r3, [r3, #0]
}
 8004388:	0018      	movs	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	200003c4 	.word	0x200003c4

08004394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800439c:	f7ff fff0 	bl	8004380 <HAL_GetTick>
 80043a0:	0003      	movs	r3, r0
 80043a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3301      	adds	r3, #1
 80043ac:	d005      	beq.n	80043ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043ae:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <HAL_Delay+0x44>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	001a      	movs	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	189b      	adds	r3, r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	f7ff ffe0 	bl	8004380 <HAL_GetTick>
 80043c0:	0002      	movs	r2, r0
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d8f7      	bhi.n	80043bc <HAL_Delay+0x28>
  {
  }
}
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b004      	add	sp, #16
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	20000008 	.word	0x20000008

080043dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	0002      	movs	r2, r0
 80043e4:	1dfb      	adds	r3, r7, #7
 80043e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043e8:	1dfb      	adds	r3, r7, #7
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b7f      	cmp	r3, #127	; 0x7f
 80043ee:	d809      	bhi.n	8004404 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043f0:	1dfb      	adds	r3, r7, #7
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	001a      	movs	r2, r3
 80043f6:	231f      	movs	r3, #31
 80043f8:	401a      	ands	r2, r3
 80043fa:	4b04      	ldr	r3, [pc, #16]	; (800440c <__NVIC_EnableIRQ+0x30>)
 80043fc:	2101      	movs	r1, #1
 80043fe:	4091      	lsls	r1, r2
 8004400:	000a      	movs	r2, r1
 8004402:	601a      	str	r2, [r3, #0]
  }
}
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b002      	add	sp, #8
 800440a:	bd80      	pop	{r7, pc}
 800440c:	e000e100 	.word	0xe000e100

08004410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	0002      	movs	r2, r0
 8004418:	6039      	str	r1, [r7, #0]
 800441a:	1dfb      	adds	r3, r7, #7
 800441c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800441e:	1dfb      	adds	r3, r7, #7
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b7f      	cmp	r3, #127	; 0x7f
 8004424:	d828      	bhi.n	8004478 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004426:	4a2f      	ldr	r2, [pc, #188]	; (80044e4 <__NVIC_SetPriority+0xd4>)
 8004428:	1dfb      	adds	r3, r7, #7
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	b25b      	sxtb	r3, r3
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	33c0      	adds	r3, #192	; 0xc0
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	589b      	ldr	r3, [r3, r2]
 8004436:	1dfa      	adds	r2, r7, #7
 8004438:	7812      	ldrb	r2, [r2, #0]
 800443a:	0011      	movs	r1, r2
 800443c:	2203      	movs	r2, #3
 800443e:	400a      	ands	r2, r1
 8004440:	00d2      	lsls	r2, r2, #3
 8004442:	21ff      	movs	r1, #255	; 0xff
 8004444:	4091      	lsls	r1, r2
 8004446:	000a      	movs	r2, r1
 8004448:	43d2      	mvns	r2, r2
 800444a:	401a      	ands	r2, r3
 800444c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	019b      	lsls	r3, r3, #6
 8004452:	22ff      	movs	r2, #255	; 0xff
 8004454:	401a      	ands	r2, r3
 8004456:	1dfb      	adds	r3, r7, #7
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	0018      	movs	r0, r3
 800445c:	2303      	movs	r3, #3
 800445e:	4003      	ands	r3, r0
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004464:	481f      	ldr	r0, [pc, #124]	; (80044e4 <__NVIC_SetPriority+0xd4>)
 8004466:	1dfb      	adds	r3, r7, #7
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	b25b      	sxtb	r3, r3
 800446c:	089b      	lsrs	r3, r3, #2
 800446e:	430a      	orrs	r2, r1
 8004470:	33c0      	adds	r3, #192	; 0xc0
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004476:	e031      	b.n	80044dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004478:	4a1b      	ldr	r2, [pc, #108]	; (80044e8 <__NVIC_SetPriority+0xd8>)
 800447a:	1dfb      	adds	r3, r7, #7
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	0019      	movs	r1, r3
 8004480:	230f      	movs	r3, #15
 8004482:	400b      	ands	r3, r1
 8004484:	3b08      	subs	r3, #8
 8004486:	089b      	lsrs	r3, r3, #2
 8004488:	3306      	adds	r3, #6
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	18d3      	adds	r3, r2, r3
 800448e:	3304      	adds	r3, #4
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	1dfa      	adds	r2, r7, #7
 8004494:	7812      	ldrb	r2, [r2, #0]
 8004496:	0011      	movs	r1, r2
 8004498:	2203      	movs	r2, #3
 800449a:	400a      	ands	r2, r1
 800449c:	00d2      	lsls	r2, r2, #3
 800449e:	21ff      	movs	r1, #255	; 0xff
 80044a0:	4091      	lsls	r1, r2
 80044a2:	000a      	movs	r2, r1
 80044a4:	43d2      	mvns	r2, r2
 80044a6:	401a      	ands	r2, r3
 80044a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	019b      	lsls	r3, r3, #6
 80044ae:	22ff      	movs	r2, #255	; 0xff
 80044b0:	401a      	ands	r2, r3
 80044b2:	1dfb      	adds	r3, r7, #7
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	0018      	movs	r0, r3
 80044b8:	2303      	movs	r3, #3
 80044ba:	4003      	ands	r3, r0
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044c0:	4809      	ldr	r0, [pc, #36]	; (80044e8 <__NVIC_SetPriority+0xd8>)
 80044c2:	1dfb      	adds	r3, r7, #7
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	001c      	movs	r4, r3
 80044c8:	230f      	movs	r3, #15
 80044ca:	4023      	ands	r3, r4
 80044cc:	3b08      	subs	r3, #8
 80044ce:	089b      	lsrs	r3, r3, #2
 80044d0:	430a      	orrs	r2, r1
 80044d2:	3306      	adds	r3, #6
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	18c3      	adds	r3, r0, r3
 80044d8:	3304      	adds	r3, #4
 80044da:	601a      	str	r2, [r3, #0]
}
 80044dc:	46c0      	nop			; (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	b003      	add	sp, #12
 80044e2:	bd90      	pop	{r4, r7, pc}
 80044e4:	e000e100 	.word	0xe000e100
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	1e5a      	subs	r2, r3, #1
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	045b      	lsls	r3, r3, #17
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d301      	bcc.n	8004504 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004500:	2301      	movs	r3, #1
 8004502:	e010      	b.n	8004526 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004504:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <SysTick_Config+0x44>)
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	3a01      	subs	r2, #1
 800450a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800450c:	2301      	movs	r3, #1
 800450e:	425b      	negs	r3, r3
 8004510:	2103      	movs	r1, #3
 8004512:	0018      	movs	r0, r3
 8004514:	f7ff ff7c 	bl	8004410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <SysTick_Config+0x44>)
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <SysTick_Config+0x44>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004524:	2300      	movs	r3, #0
}
 8004526:	0018      	movs	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	b002      	add	sp, #8
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	e000e010 	.word	0xe000e010

08004534 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	210f      	movs	r1, #15
 8004540:	187b      	adds	r3, r7, r1
 8004542:	1c02      	adds	r2, r0, #0
 8004544:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	187b      	adds	r3, r7, r1
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b25b      	sxtb	r3, r3
 800454e:	0011      	movs	r1, r2
 8004550:	0018      	movs	r0, r3
 8004552:	f7ff ff5d 	bl	8004410 <__NVIC_SetPriority>
}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	46bd      	mov	sp, r7
 800455a:	b004      	add	sp, #16
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	0002      	movs	r2, r0
 8004566:	1dfb      	adds	r3, r7, #7
 8004568:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800456a:	1dfb      	adds	r3, r7, #7
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	b25b      	sxtb	r3, r3
 8004570:	0018      	movs	r0, r3
 8004572:	f7ff ff33 	bl	80043dc <__NVIC_EnableIRQ>
}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	46bd      	mov	sp, r7
 800457a:	b002      	add	sp, #8
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0018      	movs	r0, r3
 800458a:	f7ff ffaf 	bl	80044ec <SysTick_Config>
 800458e:	0003      	movs	r3, r0
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b002      	add	sp, #8
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e036      	b.n	800461c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2221      	movs	r2, #33	; 0x21
 80045b2:	2102      	movs	r1, #2
 80045b4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4a18      	ldr	r2, [pc, #96]	; (8004624 <HAL_DMA_Init+0x8c>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80045ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	0018      	movs	r0, r3
 8004600:	f000 f932 	bl	8004868 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2221      	movs	r2, #33	; 0x21
 800460e:	2101      	movs	r1, #1
 8004610:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	2100      	movs	r1, #0
 8004618:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}  
 800461c:	0018      	movs	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	b004      	add	sp, #16
 8004622:	bd80      	pop	{r7, pc}
 8004624:	ffffc00f 	.word	0xffffc00f

08004628 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2221      	movs	r2, #33	; 0x21
 8004634:	5c9b      	ldrb	r3, [r3, r2]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d008      	beq.n	800464e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2204      	movs	r2, #4
 8004640:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	2100      	movs	r1, #0
 8004648:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e020      	b.n	8004690 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	210e      	movs	r1, #14
 800465a:	438a      	bics	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2101      	movs	r1, #1
 800466a:	438a      	bics	r2, r1
 800466c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	2101      	movs	r1, #1
 8004678:	4091      	lsls	r1, r2
 800467a:	000a      	movs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2221      	movs	r2, #33	; 0x21
 8004682:	2101      	movs	r1, #1
 8004684:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	2100      	movs	r1, #0
 800468c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	0018      	movs	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	b002      	add	sp, #8
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a0:	210f      	movs	r1, #15
 80046a2:	187b      	adds	r3, r7, r1
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2221      	movs	r2, #33	; 0x21
 80046ac:	5c9b      	ldrb	r3, [r3, r2]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d006      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2204      	movs	r2, #4
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80046ba:	187b      	adds	r3, r7, r1
 80046bc:	2201      	movs	r2, #1
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	e028      	b.n	8004714 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	210e      	movs	r1, #14
 80046ce:	438a      	bics	r2, r1
 80046d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2101      	movs	r1, #1
 80046de:	438a      	bics	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ea:	2101      	movs	r1, #1
 80046ec:	4091      	lsls	r1, r2
 80046ee:	000a      	movs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2221      	movs	r2, #33	; 0x21
 80046f6:	2101      	movs	r1, #1
 80046f8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	2100      	movs	r1, #0
 8004700:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	0010      	movs	r0, r2
 8004712:	4798      	blx	r3
    } 
  }
  return status;
 8004714:	230f      	movs	r3, #15
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	781b      	ldrb	r3, [r3, #0]
}
 800471a:	0018      	movs	r0, r3
 800471c:	46bd      	mov	sp, r7
 800471e:	b004      	add	sp, #16
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2204      	movs	r2, #4
 8004740:	409a      	lsls	r2, r3
 8004742:	0013      	movs	r3, r2
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4013      	ands	r3, r2
 8004748:	d024      	beq.n	8004794 <HAL_DMA_IRQHandler+0x72>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2204      	movs	r2, #4
 800474e:	4013      	ands	r3, r2
 8004750:	d020      	beq.n	8004794 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2220      	movs	r2, #32
 800475a:	4013      	ands	r3, r2
 800475c:	d107      	bne.n	800476e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2104      	movs	r1, #4
 800476a:	438a      	bics	r2, r1
 800476c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	2104      	movs	r1, #4
 8004778:	4091      	lsls	r1, r2
 800477a:	000a      	movs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d100      	bne.n	8004788 <HAL_DMA_IRQHandler+0x66>
 8004786:	e06a      	b.n	800485e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	0010      	movs	r0, r2
 8004790:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004792:	e064      	b.n	800485e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	2202      	movs	r2, #2
 800479a:	409a      	lsls	r2, r3
 800479c:	0013      	movs	r3, r2
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4013      	ands	r3, r2
 80047a2:	d02b      	beq.n	80047fc <HAL_DMA_IRQHandler+0xda>
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2202      	movs	r2, #2
 80047a8:	4013      	ands	r3, r2
 80047aa:	d027      	beq.n	80047fc <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2220      	movs	r2, #32
 80047b4:	4013      	ands	r3, r2
 80047b6:	d10b      	bne.n	80047d0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	210a      	movs	r1, #10
 80047c4:	438a      	bics	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2221      	movs	r2, #33	; 0x21
 80047cc:	2101      	movs	r1, #1
 80047ce:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d8:	2102      	movs	r1, #2
 80047da:	4091      	lsls	r1, r2
 80047dc:	000a      	movs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	2100      	movs	r1, #0
 80047e6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d036      	beq.n	800485e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	0010      	movs	r0, r2
 80047f8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80047fa:	e030      	b.n	800485e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	2208      	movs	r2, #8
 8004802:	409a      	lsls	r2, r3
 8004804:	0013      	movs	r3, r2
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4013      	ands	r3, r2
 800480a:	d028      	beq.n	800485e <HAL_DMA_IRQHandler+0x13c>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2208      	movs	r2, #8
 8004810:	4013      	ands	r3, r2
 8004812:	d024      	beq.n	800485e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	210e      	movs	r1, #14
 8004820:	438a      	bics	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	2101      	movs	r1, #1
 800482e:	4091      	lsls	r1, r2
 8004830:	000a      	movs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2221      	movs	r2, #33	; 0x21
 800483e:	2101      	movs	r1, #1
 8004840:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	2100      	movs	r1, #0
 8004848:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	0010      	movs	r0, r2
 800485a:	4798      	blx	r3
    }
   }
}  
 800485c:	e7ff      	b.n	800485e <HAL_DMA_IRQHandler+0x13c>
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	46bd      	mov	sp, r7
 8004862:	b004      	add	sp, #16
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a08      	ldr	r2, [pc, #32]	; (8004898 <DMA_CalcBaseAndBitshift+0x30>)
 8004876:	4694      	mov	ip, r2
 8004878:	4463      	add	r3, ip
 800487a:	2114      	movs	r1, #20
 800487c:	0018      	movs	r0, r3
 800487e:	f7fb fc5f 	bl	8000140 <__udivsi3>
 8004882:	0003      	movs	r3, r0
 8004884:	009a      	lsls	r2, r3, #2
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a03      	ldr	r2, [pc, #12]	; (800489c <DMA_CalcBaseAndBitshift+0x34>)
 800488e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	b002      	add	sp, #8
 8004896:	bd80      	pop	{r7, pc}
 8004898:	bffdfff8 	.word	0xbffdfff8
 800489c:	40020000 	.word	0x40020000

080048a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048ae:	e14f      	b.n	8004b50 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2101      	movs	r1, #1
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4091      	lsls	r1, r2
 80048ba:	000a      	movs	r2, r1
 80048bc:	4013      	ands	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d100      	bne.n	80048c8 <HAL_GPIO_Init+0x28>
 80048c6:	e140      	b.n	8004b4a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2203      	movs	r2, #3
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d005      	beq.n	80048e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2203      	movs	r2, #3
 80048da:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d130      	bne.n	8004942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	2203      	movs	r2, #3
 80048ec:	409a      	lsls	r2, r3
 80048ee:	0013      	movs	r3, r2
 80048f0:	43da      	mvns	r2, r3
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4013      	ands	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	409a      	lsls	r2, r3
 8004902:	0013      	movs	r3, r2
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004916:	2201      	movs	r2, #1
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	409a      	lsls	r2, r3
 800491c:	0013      	movs	r3, r2
 800491e:	43da      	mvns	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4013      	ands	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	2201      	movs	r2, #1
 800492e:	401a      	ands	r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	409a      	lsls	r2, r3
 8004934:	0013      	movs	r3, r2
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2203      	movs	r2, #3
 8004948:	4013      	ands	r3, r2
 800494a:	2b03      	cmp	r3, #3
 800494c:	d017      	beq.n	800497e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	2203      	movs	r2, #3
 800495a:	409a      	lsls	r2, r3
 800495c:	0013      	movs	r3, r2
 800495e:	43da      	mvns	r2, r3
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4013      	ands	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	409a      	lsls	r2, r3
 8004970:	0013      	movs	r3, r2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2203      	movs	r2, #3
 8004984:	4013      	ands	r3, r2
 8004986:	2b02      	cmp	r3, #2
 8004988:	d123      	bne.n	80049d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	08da      	lsrs	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3208      	adds	r2, #8
 8004992:	0092      	lsls	r2, r2, #2
 8004994:	58d3      	ldr	r3, [r2, r3]
 8004996:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2207      	movs	r2, #7
 800499c:	4013      	ands	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	220f      	movs	r2, #15
 80049a2:	409a      	lsls	r2, r3
 80049a4:	0013      	movs	r3, r2
 80049a6:	43da      	mvns	r2, r3
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4013      	ands	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2107      	movs	r1, #7
 80049b6:	400b      	ands	r3, r1
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	409a      	lsls	r2, r3
 80049bc:	0013      	movs	r3, r2
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	08da      	lsrs	r2, r3, #3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3208      	adds	r2, #8
 80049cc:	0092      	lsls	r2, r2, #2
 80049ce:	6939      	ldr	r1, [r7, #16]
 80049d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	2203      	movs	r2, #3
 80049de:	409a      	lsls	r2, r3
 80049e0:	0013      	movs	r3, r2
 80049e2:	43da      	mvns	r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4013      	ands	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2203      	movs	r2, #3
 80049f0:	401a      	ands	r2, r3
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	409a      	lsls	r2, r3
 80049f8:	0013      	movs	r3, r2
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	23c0      	movs	r3, #192	; 0xc0
 8004a0c:	029b      	lsls	r3, r3, #10
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d100      	bne.n	8004a14 <HAL_GPIO_Init+0x174>
 8004a12:	e09a      	b.n	8004b4a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a14:	4b54      	ldr	r3, [pc, #336]	; (8004b68 <HAL_GPIO_Init+0x2c8>)
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	4b53      	ldr	r3, [pc, #332]	; (8004b68 <HAL_GPIO_Init+0x2c8>)
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	619a      	str	r2, [r3, #24]
 8004a20:	4b51      	ldr	r3, [pc, #324]	; (8004b68 <HAL_GPIO_Init+0x2c8>)
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2201      	movs	r2, #1
 8004a26:	4013      	ands	r3, r2
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a2c:	4a4f      	ldr	r2, [pc, #316]	; (8004b6c <HAL_GPIO_Init+0x2cc>)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	089b      	lsrs	r3, r3, #2
 8004a32:	3302      	adds	r3, #2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	589b      	ldr	r3, [r3, r2]
 8004a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	4013      	ands	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	220f      	movs	r2, #15
 8004a44:	409a      	lsls	r2, r3
 8004a46:	0013      	movs	r3, r2
 8004a48:	43da      	mvns	r2, r3
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	2390      	movs	r3, #144	; 0x90
 8004a54:	05db      	lsls	r3, r3, #23
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d013      	beq.n	8004a82 <HAL_GPIO_Init+0x1e2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a44      	ldr	r2, [pc, #272]	; (8004b70 <HAL_GPIO_Init+0x2d0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00d      	beq.n	8004a7e <HAL_GPIO_Init+0x1de>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a43      	ldr	r2, [pc, #268]	; (8004b74 <HAL_GPIO_Init+0x2d4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d007      	beq.n	8004a7a <HAL_GPIO_Init+0x1da>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a42      	ldr	r2, [pc, #264]	; (8004b78 <HAL_GPIO_Init+0x2d8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d101      	bne.n	8004a76 <HAL_GPIO_Init+0x1d6>
 8004a72:	2303      	movs	r3, #3
 8004a74:	e006      	b.n	8004a84 <HAL_GPIO_Init+0x1e4>
 8004a76:	2305      	movs	r3, #5
 8004a78:	e004      	b.n	8004a84 <HAL_GPIO_Init+0x1e4>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e002      	b.n	8004a84 <HAL_GPIO_Init+0x1e4>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <HAL_GPIO_Init+0x1e4>
 8004a82:	2300      	movs	r3, #0
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	2103      	movs	r1, #3
 8004a88:	400a      	ands	r2, r1
 8004a8a:	0092      	lsls	r2, r2, #2
 8004a8c:	4093      	lsls	r3, r2
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a94:	4935      	ldr	r1, [pc, #212]	; (8004b6c <HAL_GPIO_Init+0x2cc>)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	089b      	lsrs	r3, r3, #2
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004aa2:	4b36      	ldr	r3, [pc, #216]	; (8004b7c <HAL_GPIO_Init+0x2dc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	43da      	mvns	r2, r3
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	025b      	lsls	r3, r3, #9
 8004aba:	4013      	ands	r3, r2
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004ac6:	4b2d      	ldr	r3, [pc, #180]	; (8004b7c <HAL_GPIO_Init+0x2dc>)
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004acc:	4b2b      	ldr	r3, [pc, #172]	; (8004b7c <HAL_GPIO_Init+0x2dc>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	43da      	mvns	r2, r3
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	029b      	lsls	r3, r3, #10
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004af0:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <HAL_GPIO_Init+0x2dc>)
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004af6:	4b21      	ldr	r3, [pc, #132]	; (8004b7c <HAL_GPIO_Init+0x2dc>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	43da      	mvns	r2, r3
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4013      	ands	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	035b      	lsls	r3, r3, #13
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004b1a:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <HAL_GPIO_Init+0x2dc>)
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004b20:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <HAL_GPIO_Init+0x2dc>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	43da      	mvns	r2, r3
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	039b      	lsls	r3, r3, #14
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d003      	beq.n	8004b44 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <HAL_GPIO_Init+0x2dc>)
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	40da      	lsrs	r2, r3
 8004b58:	1e13      	subs	r3, r2, #0
 8004b5a:	d000      	beq.n	8004b5e <HAL_GPIO_Init+0x2be>
 8004b5c:	e6a8      	b.n	80048b0 <HAL_GPIO_Init+0x10>
  } 
}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	46c0      	nop			; (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b006      	add	sp, #24
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40010000 	.word	0x40010000
 8004b70:	48000400 	.word	0x48000400
 8004b74:	48000800 	.word	0x48000800
 8004b78:	48000c00 	.word	0x48000c00
 8004b7c:	40010400 	.word	0x40010400

08004b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	0008      	movs	r0, r1
 8004b8a:	0011      	movs	r1, r2
 8004b8c:	1cbb      	adds	r3, r7, #2
 8004b8e:	1c02      	adds	r2, r0, #0
 8004b90:	801a      	strh	r2, [r3, #0]
 8004b92:	1c7b      	adds	r3, r7, #1
 8004b94:	1c0a      	adds	r2, r1, #0
 8004b96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b98:	1c7b      	adds	r3, r7, #1
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ba0:	1cbb      	adds	r3, r7, #2
 8004ba2:	881a      	ldrh	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ba8:	e003      	b.n	8004bb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004baa:	1cbb      	adds	r3, r7, #2
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b002      	add	sp, #8
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	000a      	movs	r2, r1
 8004bc4:	1cbb      	adds	r3, r7, #2
 8004bc6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bce:	1cbb      	adds	r3, r7, #2
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	041a      	lsls	r2, r3, #16
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	1cb9      	adds	r1, r7, #2
 8004bde:	8809      	ldrh	r1, [r1, #0]
 8004be0:	400b      	ands	r3, r1
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	619a      	str	r2, [r3, #24]
}
 8004be8:	46c0      	nop			; (mov r8, r8)
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b004      	add	sp, #16
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	1dbb      	adds	r3, r7, #6
 8004bfa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	1dba      	adds	r2, r7, #6
 8004c02:	8812      	ldrh	r2, [r2, #0]
 8004c04:	4013      	ands	r3, r2
 8004c06:	d008      	beq.n	8004c1a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004c0a:	1dba      	adds	r2, r7, #6
 8004c0c:	8812      	ldrh	r2, [r2, #0]
 8004c0e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c10:	1dbb      	adds	r3, r7, #6
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f000 f807 	bl	8004c28 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	40010400 	.word	0x40010400

08004c28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	0002      	movs	r2, r0
 8004c30:	1dbb      	adds	r3, r7, #6
 8004c32:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b002      	add	sp, #8
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e301      	b.n	8005252 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2201      	movs	r2, #1
 8004c54:	4013      	ands	r3, r2
 8004c56:	d100      	bne.n	8004c5a <HAL_RCC_OscConfig+0x1e>
 8004c58:	e08d      	b.n	8004d76 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c5a:	4bc3      	ldr	r3, [pc, #780]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	220c      	movs	r2, #12
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d00e      	beq.n	8004c84 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c66:	4bc0      	ldr	r3, [pc, #768]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	220c      	movs	r2, #12
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d116      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x64>
 8004c72:	4bbd      	ldr	r3, [pc, #756]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	025b      	lsls	r3, r3, #9
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	025b      	lsls	r3, r3, #9
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d10d      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c84:	4bb8      	ldr	r3, [pc, #736]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	029b      	lsls	r3, r3, #10
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d100      	bne.n	8004c92 <HAL_RCC_OscConfig+0x56>
 8004c90:	e070      	b.n	8004d74 <HAL_RCC_OscConfig+0x138>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d000      	beq.n	8004c9c <HAL_RCC_OscConfig+0x60>
 8004c9a:	e06b      	b.n	8004d74 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e2d8      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x7c>
 8004ca8:	4baf      	ldr	r3, [pc, #700]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4bae      	ldr	r3, [pc, #696]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004cae:	2180      	movs	r1, #128	; 0x80
 8004cb0:	0249      	lsls	r1, r1, #9
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e02f      	b.n	8004d18 <HAL_RCC_OscConfig+0xdc>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10c      	bne.n	8004cda <HAL_RCC_OscConfig+0x9e>
 8004cc0:	4ba9      	ldr	r3, [pc, #676]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4ba8      	ldr	r3, [pc, #672]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004cc6:	49a9      	ldr	r1, [pc, #676]	; (8004f6c <HAL_RCC_OscConfig+0x330>)
 8004cc8:	400a      	ands	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	4ba6      	ldr	r3, [pc, #664]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4ba5      	ldr	r3, [pc, #660]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004cd2:	49a7      	ldr	r1, [pc, #668]	; (8004f70 <HAL_RCC_OscConfig+0x334>)
 8004cd4:	400a      	ands	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	e01e      	b.n	8004d18 <HAL_RCC_OscConfig+0xdc>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b05      	cmp	r3, #5
 8004ce0:	d10e      	bne.n	8004d00 <HAL_RCC_OscConfig+0xc4>
 8004ce2:	4ba1      	ldr	r3, [pc, #644]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4ba0      	ldr	r3, [pc, #640]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004ce8:	2180      	movs	r1, #128	; 0x80
 8004cea:	02c9      	lsls	r1, r1, #11
 8004cec:	430a      	orrs	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	4b9d      	ldr	r3, [pc, #628]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4b9c      	ldr	r3, [pc, #624]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004cf6:	2180      	movs	r1, #128	; 0x80
 8004cf8:	0249      	lsls	r1, r1, #9
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e00b      	b.n	8004d18 <HAL_RCC_OscConfig+0xdc>
 8004d00:	4b99      	ldr	r3, [pc, #612]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b98      	ldr	r3, [pc, #608]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004d06:	4999      	ldr	r1, [pc, #612]	; (8004f6c <HAL_RCC_OscConfig+0x330>)
 8004d08:	400a      	ands	r2, r1
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	4b96      	ldr	r3, [pc, #600]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	4b95      	ldr	r3, [pc, #596]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004d12:	4997      	ldr	r1, [pc, #604]	; (8004f70 <HAL_RCC_OscConfig+0x334>)
 8004d14:	400a      	ands	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d014      	beq.n	8004d4a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d20:	f7ff fb2e 	bl	8004380 <HAL_GetTick>
 8004d24:	0003      	movs	r3, r0
 8004d26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d2a:	f7ff fb29 	bl	8004380 <HAL_GetTick>
 8004d2e:	0002      	movs	r2, r0
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b64      	cmp	r3, #100	; 0x64
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e28a      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3c:	4b8a      	ldr	r3, [pc, #552]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	029b      	lsls	r3, r3, #10
 8004d44:	4013      	ands	r3, r2
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0xee>
 8004d48:	e015      	b.n	8004d76 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4a:	f7ff fb19 	bl	8004380 <HAL_GetTick>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d54:	f7ff fb14 	bl	8004380 <HAL_GetTick>
 8004d58:	0002      	movs	r2, r0
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	; 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e275      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d66:	4b80      	ldr	r3, [pc, #512]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	2380      	movs	r3, #128	; 0x80
 8004d6c:	029b      	lsls	r3, r3, #10
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x118>
 8004d72:	e000      	b.n	8004d76 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d74:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d100      	bne.n	8004d82 <HAL_RCC_OscConfig+0x146>
 8004d80:	e069      	b.n	8004e56 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d82:	4b79      	ldr	r3, [pc, #484]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	220c      	movs	r2, #12
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d00b      	beq.n	8004da4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d8c:	4b76      	ldr	r3, [pc, #472]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	220c      	movs	r2, #12
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d11c      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x196>
 8004d98:	4b73      	ldr	r3, [pc, #460]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	025b      	lsls	r3, r3, #9
 8004da0:	4013      	ands	r3, r2
 8004da2:	d116      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da4:	4b70      	ldr	r3, [pc, #448]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2202      	movs	r2, #2
 8004daa:	4013      	ands	r3, r2
 8004dac:	d005      	beq.n	8004dba <HAL_RCC_OscConfig+0x17e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d001      	beq.n	8004dba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e24b      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dba:	4b6b      	ldr	r3, [pc, #428]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	22f8      	movs	r2, #248	; 0xf8
 8004dc0:	4393      	bics	r3, r2
 8004dc2:	0019      	movs	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	00da      	lsls	r2, r3, #3
 8004dca:	4b67      	ldr	r3, [pc, #412]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd0:	e041      	b.n	8004e56 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d024      	beq.n	8004e24 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dda:	4b63      	ldr	r3, [pc, #396]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b62      	ldr	r3, [pc, #392]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004de0:	2101      	movs	r1, #1
 8004de2:	430a      	orrs	r2, r1
 8004de4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de6:	f7ff facb 	bl	8004380 <HAL_GetTick>
 8004dea:	0003      	movs	r3, r0
 8004dec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004df0:	f7ff fac6 	bl	8004380 <HAL_GetTick>
 8004df4:	0002      	movs	r2, r0
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e227      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e02:	4b59      	ldr	r3, [pc, #356]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2202      	movs	r2, #2
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d0f1      	beq.n	8004df0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0c:	4b56      	ldr	r3, [pc, #344]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	22f8      	movs	r2, #248	; 0xf8
 8004e12:	4393      	bics	r3, r2
 8004e14:	0019      	movs	r1, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	00da      	lsls	r2, r3, #3
 8004e1c:	4b52      	ldr	r3, [pc, #328]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e018      	b.n	8004e56 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e24:	4b50      	ldr	r3, [pc, #320]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4b4f      	ldr	r3, [pc, #316]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	438a      	bics	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e30:	f7ff faa6 	bl	8004380 <HAL_GetTick>
 8004e34:	0003      	movs	r3, r0
 8004e36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e3a:	f7ff faa1 	bl	8004380 <HAL_GetTick>
 8004e3e:	0002      	movs	r2, r0
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e202      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4c:	4b46      	ldr	r3, [pc, #280]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2202      	movs	r2, #2
 8004e52:	4013      	ands	r3, r2
 8004e54:	d1f1      	bne.n	8004e3a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d036      	beq.n	8004ece <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d019      	beq.n	8004e9c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e68:	4b3f      	ldr	r3, [pc, #252]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e6c:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004e6e:	2101      	movs	r1, #1
 8004e70:	430a      	orrs	r2, r1
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e74:	f7ff fa84 	bl	8004380 <HAL_GetTick>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e7e:	f7ff fa7f 	bl	8004380 <HAL_GetTick>
 8004e82:	0002      	movs	r2, r0
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e1e0      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e90:	4b35      	ldr	r3, [pc, #212]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	2202      	movs	r2, #2
 8004e96:	4013      	ands	r3, r2
 8004e98:	d0f1      	beq.n	8004e7e <HAL_RCC_OscConfig+0x242>
 8004e9a:	e018      	b.n	8004ece <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e9c:	4b32      	ldr	r3, [pc, #200]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ea0:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	438a      	bics	r2, r1
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea8:	f7ff fa6a 	bl	8004380 <HAL_GetTick>
 8004eac:	0003      	movs	r3, r0
 8004eae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb2:	f7ff fa65 	bl	8004380 <HAL_GetTick>
 8004eb6:	0002      	movs	r2, r0
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e1c6      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec4:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2202      	movs	r2, #2
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d1f1      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d100      	bne.n	8004eda <HAL_RCC_OscConfig+0x29e>
 8004ed8:	e0b4      	b.n	8005044 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eda:	201f      	movs	r0, #31
 8004edc:	183b      	adds	r3, r7, r0
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee2:	4b21      	ldr	r3, [pc, #132]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004ee4:	69da      	ldr	r2, [r3, #28]
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	055b      	lsls	r3, r3, #21
 8004eea:	4013      	ands	r3, r2
 8004eec:	d110      	bne.n	8004f10 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eee:	4b1e      	ldr	r3, [pc, #120]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004ef0:	69da      	ldr	r2, [r3, #28]
 8004ef2:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	0549      	lsls	r1, r1, #21
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	61da      	str	r2, [r3, #28]
 8004efc:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	055b      	lsls	r3, r3, #21
 8004f04:	4013      	ands	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f0a:	183b      	adds	r3, r7, r0
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f10:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <HAL_RCC_OscConfig+0x338>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d11a      	bne.n	8004f52 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1c:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <HAL_RCC_OscConfig+0x338>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <HAL_RCC_OscConfig+0x338>)
 8004f22:	2180      	movs	r1, #128	; 0x80
 8004f24:	0049      	lsls	r1, r1, #1
 8004f26:	430a      	orrs	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2a:	f7ff fa29 	bl	8004380 <HAL_GetTick>
 8004f2e:	0003      	movs	r3, r0
 8004f30:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f34:	f7ff fa24 	bl	8004380 <HAL_GetTick>
 8004f38:	0002      	movs	r2, r0
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	; 0x64
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e185      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <HAL_RCC_OscConfig+0x338>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	2380      	movs	r3, #128	; 0x80
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d0f0      	beq.n	8004f34 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10e      	bne.n	8004f78 <HAL_RCC_OscConfig+0x33c>
 8004f5a:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004f5c:	6a1a      	ldr	r2, [r3, #32]
 8004f5e:	4b02      	ldr	r3, [pc, #8]	; (8004f68 <HAL_RCC_OscConfig+0x32c>)
 8004f60:	2101      	movs	r1, #1
 8004f62:	430a      	orrs	r2, r1
 8004f64:	621a      	str	r2, [r3, #32]
 8004f66:	e035      	b.n	8004fd4 <HAL_RCC_OscConfig+0x398>
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	fffeffff 	.word	0xfffeffff
 8004f70:	fffbffff 	.word	0xfffbffff
 8004f74:	40007000 	.word	0x40007000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10c      	bne.n	8004f9a <HAL_RCC_OscConfig+0x35e>
 8004f80:	4bb6      	ldr	r3, [pc, #728]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004f82:	6a1a      	ldr	r2, [r3, #32]
 8004f84:	4bb5      	ldr	r3, [pc, #724]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004f86:	2101      	movs	r1, #1
 8004f88:	438a      	bics	r2, r1
 8004f8a:	621a      	str	r2, [r3, #32]
 8004f8c:	4bb3      	ldr	r3, [pc, #716]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004f8e:	6a1a      	ldr	r2, [r3, #32]
 8004f90:	4bb2      	ldr	r3, [pc, #712]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004f92:	2104      	movs	r1, #4
 8004f94:	438a      	bics	r2, r1
 8004f96:	621a      	str	r2, [r3, #32]
 8004f98:	e01c      	b.n	8004fd4 <HAL_RCC_OscConfig+0x398>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b05      	cmp	r3, #5
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCC_OscConfig+0x380>
 8004fa2:	4bae      	ldr	r3, [pc, #696]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	4bad      	ldr	r3, [pc, #692]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004fa8:	2104      	movs	r1, #4
 8004faa:	430a      	orrs	r2, r1
 8004fac:	621a      	str	r2, [r3, #32]
 8004fae:	4bab      	ldr	r3, [pc, #684]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004fb0:	6a1a      	ldr	r2, [r3, #32]
 8004fb2:	4baa      	ldr	r3, [pc, #680]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	621a      	str	r2, [r3, #32]
 8004fba:	e00b      	b.n	8004fd4 <HAL_RCC_OscConfig+0x398>
 8004fbc:	4ba7      	ldr	r3, [pc, #668]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	4ba6      	ldr	r3, [pc, #664]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	438a      	bics	r2, r1
 8004fc6:	621a      	str	r2, [r3, #32]
 8004fc8:	4ba4      	ldr	r3, [pc, #656]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004fca:	6a1a      	ldr	r2, [r3, #32]
 8004fcc:	4ba3      	ldr	r3, [pc, #652]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004fce:	2104      	movs	r1, #4
 8004fd0:	438a      	bics	r2, r1
 8004fd2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d014      	beq.n	8005006 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fdc:	f7ff f9d0 	bl	8004380 <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe4:	e009      	b.n	8004ffa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7ff f9cb 	bl	8004380 <HAL_GetTick>
 8004fea:	0002      	movs	r2, r0
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	4a9b      	ldr	r2, [pc, #620]	; (8005260 <HAL_RCC_OscConfig+0x624>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e12b      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffa:	4b98      	ldr	r3, [pc, #608]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	2202      	movs	r2, #2
 8005000:	4013      	ands	r3, r2
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x3aa>
 8005004:	e013      	b.n	800502e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005006:	f7ff f9bb 	bl	8004380 <HAL_GetTick>
 800500a:	0003      	movs	r3, r0
 800500c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800500e:	e009      	b.n	8005024 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005010:	f7ff f9b6 	bl	8004380 <HAL_GetTick>
 8005014:	0002      	movs	r2, r0
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	4a91      	ldr	r2, [pc, #580]	; (8005260 <HAL_RCC_OscConfig+0x624>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e116      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005024:	4b8d      	ldr	r3, [pc, #564]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	2202      	movs	r2, #2
 800502a:	4013      	ands	r3, r2
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800502e:	231f      	movs	r3, #31
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d105      	bne.n	8005044 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005038:	4b88      	ldr	r3, [pc, #544]	; (800525c <HAL_RCC_OscConfig+0x620>)
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	4b87      	ldr	r3, [pc, #540]	; (800525c <HAL_RCC_OscConfig+0x620>)
 800503e:	4989      	ldr	r1, [pc, #548]	; (8005264 <HAL_RCC_OscConfig+0x628>)
 8005040:	400a      	ands	r2, r1
 8005042:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2210      	movs	r2, #16
 800504a:	4013      	ands	r3, r2
 800504c:	d063      	beq.n	8005116 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d12a      	bne.n	80050ac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005056:	4b81      	ldr	r3, [pc, #516]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8005058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800505a:	4b80      	ldr	r3, [pc, #512]	; (800525c <HAL_RCC_OscConfig+0x620>)
 800505c:	2104      	movs	r1, #4
 800505e:	430a      	orrs	r2, r1
 8005060:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005062:	4b7e      	ldr	r3, [pc, #504]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8005064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005066:	4b7d      	ldr	r3, [pc, #500]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8005068:	2101      	movs	r1, #1
 800506a:	430a      	orrs	r2, r1
 800506c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506e:	f7ff f987 	bl	8004380 <HAL_GetTick>
 8005072:	0003      	movs	r3, r0
 8005074:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005078:	f7ff f982 	bl	8004380 <HAL_GetTick>
 800507c:	0002      	movs	r2, r0
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e0e3      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800508a:	4b74      	ldr	r3, [pc, #464]	; (800525c <HAL_RCC_OscConfig+0x620>)
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	2202      	movs	r2, #2
 8005090:	4013      	ands	r3, r2
 8005092:	d0f1      	beq.n	8005078 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005094:	4b71      	ldr	r3, [pc, #452]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	22f8      	movs	r2, #248	; 0xf8
 800509a:	4393      	bics	r3, r2
 800509c:	0019      	movs	r1, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	00da      	lsls	r2, r3, #3
 80050a4:	4b6d      	ldr	r3, [pc, #436]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80050a6:	430a      	orrs	r2, r1
 80050a8:	635a      	str	r2, [r3, #52]	; 0x34
 80050aa:	e034      	b.n	8005116 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	3305      	adds	r3, #5
 80050b2:	d111      	bne.n	80050d8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80050b4:	4b69      	ldr	r3, [pc, #420]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80050b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b8:	4b68      	ldr	r3, [pc, #416]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80050ba:	2104      	movs	r1, #4
 80050bc:	438a      	bics	r2, r1
 80050be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80050c0:	4b66      	ldr	r3, [pc, #408]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80050c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c4:	22f8      	movs	r2, #248	; 0xf8
 80050c6:	4393      	bics	r3, r2
 80050c8:	0019      	movs	r1, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	00da      	lsls	r2, r3, #3
 80050d0:	4b62      	ldr	r3, [pc, #392]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80050d2:	430a      	orrs	r2, r1
 80050d4:	635a      	str	r2, [r3, #52]	; 0x34
 80050d6:	e01e      	b.n	8005116 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80050d8:	4b60      	ldr	r3, [pc, #384]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80050da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050dc:	4b5f      	ldr	r3, [pc, #380]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80050de:	2104      	movs	r1, #4
 80050e0:	430a      	orrs	r2, r1
 80050e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80050e4:	4b5d      	ldr	r3, [pc, #372]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80050e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e8:	4b5c      	ldr	r3, [pc, #368]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80050ea:	2101      	movs	r1, #1
 80050ec:	438a      	bics	r2, r1
 80050ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f0:	f7ff f946 	bl	8004380 <HAL_GetTick>
 80050f4:	0003      	movs	r3, r0
 80050f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80050fa:	f7ff f941 	bl	8004380 <HAL_GetTick>
 80050fe:	0002      	movs	r2, r0
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e0a2      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800510c:	4b53      	ldr	r3, [pc, #332]	; (800525c <HAL_RCC_OscConfig+0x620>)
 800510e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005110:	2202      	movs	r2, #2
 8005112:	4013      	ands	r3, r2
 8005114:	d1f1      	bne.n	80050fa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d100      	bne.n	8005120 <HAL_RCC_OscConfig+0x4e4>
 800511e:	e097      	b.n	8005250 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005120:	4b4e      	ldr	r3, [pc, #312]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	220c      	movs	r2, #12
 8005126:	4013      	ands	r3, r2
 8005128:	2b08      	cmp	r3, #8
 800512a:	d100      	bne.n	800512e <HAL_RCC_OscConfig+0x4f2>
 800512c:	e06b      	b.n	8005206 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d14c      	bne.n	80051d0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005136:	4b49      	ldr	r3, [pc, #292]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	4b48      	ldr	r3, [pc, #288]	; (800525c <HAL_RCC_OscConfig+0x620>)
 800513c:	494a      	ldr	r1, [pc, #296]	; (8005268 <HAL_RCC_OscConfig+0x62c>)
 800513e:	400a      	ands	r2, r1
 8005140:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005142:	f7ff f91d 	bl	8004380 <HAL_GetTick>
 8005146:	0003      	movs	r3, r0
 8005148:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800514c:	f7ff f918 	bl	8004380 <HAL_GetTick>
 8005150:	0002      	movs	r2, r0
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e079      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800515e:	4b3f      	ldr	r3, [pc, #252]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	2380      	movs	r3, #128	; 0x80
 8005164:	049b      	lsls	r3, r3, #18
 8005166:	4013      	ands	r3, r2
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800516a:	4b3c      	ldr	r3, [pc, #240]	; (800525c <HAL_RCC_OscConfig+0x620>)
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	220f      	movs	r2, #15
 8005170:	4393      	bics	r3, r2
 8005172:	0019      	movs	r1, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005178:	4b38      	ldr	r3, [pc, #224]	; (800525c <HAL_RCC_OscConfig+0x620>)
 800517a:	430a      	orrs	r2, r1
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c
 800517e:	4b37      	ldr	r3, [pc, #220]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	4a3a      	ldr	r2, [pc, #232]	; (800526c <HAL_RCC_OscConfig+0x630>)
 8005184:	4013      	ands	r3, r2
 8005186:	0019      	movs	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	431a      	orrs	r2, r3
 8005192:	4b32      	ldr	r3, [pc, #200]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8005194:	430a      	orrs	r2, r1
 8005196:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005198:	4b30      	ldr	r3, [pc, #192]	; (800525c <HAL_RCC_OscConfig+0x620>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4b2f      	ldr	r3, [pc, #188]	; (800525c <HAL_RCC_OscConfig+0x620>)
 800519e:	2180      	movs	r1, #128	; 0x80
 80051a0:	0449      	lsls	r1, r1, #17
 80051a2:	430a      	orrs	r2, r1
 80051a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a6:	f7ff f8eb 	bl	8004380 <HAL_GetTick>
 80051aa:	0003      	movs	r3, r0
 80051ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b0:	f7ff f8e6 	bl	8004380 <HAL_GetTick>
 80051b4:	0002      	movs	r2, r0
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e047      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051c2:	4b26      	ldr	r3, [pc, #152]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	2380      	movs	r3, #128	; 0x80
 80051c8:	049b      	lsls	r3, r3, #18
 80051ca:	4013      	ands	r3, r2
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0x574>
 80051ce:	e03f      	b.n	8005250 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d0:	4b22      	ldr	r3, [pc, #136]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4b21      	ldr	r3, [pc, #132]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80051d6:	4924      	ldr	r1, [pc, #144]	; (8005268 <HAL_RCC_OscConfig+0x62c>)
 80051d8:	400a      	ands	r2, r1
 80051da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7ff f8d0 	bl	8004380 <HAL_GetTick>
 80051e0:	0003      	movs	r3, r0
 80051e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e6:	f7ff f8cb 	bl	8004380 <HAL_GetTick>
 80051ea:	0002      	movs	r2, r0
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e02c      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f8:	4b18      	ldr	r3, [pc, #96]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	049b      	lsls	r3, r3, #18
 8005200:	4013      	ands	r3, r2
 8005202:	d1f0      	bne.n	80051e6 <HAL_RCC_OscConfig+0x5aa>
 8005204:	e024      	b.n	8005250 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e01f      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <HAL_RCC_OscConfig+0x620>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005218:	4b10      	ldr	r3, [pc, #64]	; (800525c <HAL_RCC_OscConfig+0x620>)
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	025b      	lsls	r3, r3, #9
 8005224:	401a      	ands	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	429a      	cmp	r2, r3
 800522c:	d10e      	bne.n	800524c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	220f      	movs	r2, #15
 8005232:	401a      	ands	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005238:	429a      	cmp	r2, r3
 800523a:	d107      	bne.n	800524c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	23f0      	movs	r3, #240	; 0xf0
 8005240:	039b      	lsls	r3, r3, #14
 8005242:	401a      	ands	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005248:	429a      	cmp	r2, r3
 800524a:	d001      	beq.n	8005250 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	0018      	movs	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	b008      	add	sp, #32
 8005258:	bd80      	pop	{r7, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	40021000 	.word	0x40021000
 8005260:	00001388 	.word	0x00001388
 8005264:	efffffff 	.word	0xefffffff
 8005268:	feffffff 	.word	0xfeffffff
 800526c:	ffc2ffff 	.word	0xffc2ffff

08005270 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0b3      	b.n	80053ec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005284:	4b5b      	ldr	r3, [pc, #364]	; (80053f4 <HAL_RCC_ClockConfig+0x184>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2201      	movs	r2, #1
 800528a:	4013      	ands	r3, r2
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d911      	bls.n	80052b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005292:	4b58      	ldr	r3, [pc, #352]	; (80053f4 <HAL_RCC_ClockConfig+0x184>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2201      	movs	r2, #1
 8005298:	4393      	bics	r3, r2
 800529a:	0019      	movs	r1, r3
 800529c:	4b55      	ldr	r3, [pc, #340]	; (80053f4 <HAL_RCC_ClockConfig+0x184>)
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a4:	4b53      	ldr	r3, [pc, #332]	; (80053f4 <HAL_RCC_ClockConfig+0x184>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2201      	movs	r2, #1
 80052aa:	4013      	ands	r3, r2
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d001      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e09a      	b.n	80053ec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2202      	movs	r2, #2
 80052bc:	4013      	ands	r3, r2
 80052be:	d015      	beq.n	80052ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2204      	movs	r2, #4
 80052c6:	4013      	ands	r3, r2
 80052c8:	d006      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80052ca:	4b4b      	ldr	r3, [pc, #300]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	4b4a      	ldr	r3, [pc, #296]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 80052d0:	21e0      	movs	r1, #224	; 0xe0
 80052d2:	00c9      	lsls	r1, r1, #3
 80052d4:	430a      	orrs	r2, r1
 80052d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d8:	4b47      	ldr	r3, [pc, #284]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	22f0      	movs	r2, #240	; 0xf0
 80052de:	4393      	bics	r3, r2
 80052e0:	0019      	movs	r1, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	4b44      	ldr	r3, [pc, #272]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 80052e8:	430a      	orrs	r2, r1
 80052ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2201      	movs	r2, #1
 80052f2:	4013      	ands	r3, r2
 80052f4:	d040      	beq.n	8005378 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d107      	bne.n	800530e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fe:	4b3e      	ldr	r3, [pc, #248]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	2380      	movs	r3, #128	; 0x80
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	4013      	ands	r3, r2
 8005308:	d114      	bne.n	8005334 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e06e      	b.n	80053ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d107      	bne.n	8005326 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005316:	4b38      	ldr	r3, [pc, #224]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	2380      	movs	r3, #128	; 0x80
 800531c:	049b      	lsls	r3, r3, #18
 800531e:	4013      	ands	r3, r2
 8005320:	d108      	bne.n	8005334 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e062      	b.n	80053ec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005326:	4b34      	ldr	r3, [pc, #208]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2202      	movs	r2, #2
 800532c:	4013      	ands	r3, r2
 800532e:	d101      	bne.n	8005334 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e05b      	b.n	80053ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005334:	4b30      	ldr	r3, [pc, #192]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2203      	movs	r2, #3
 800533a:	4393      	bics	r3, r2
 800533c:	0019      	movs	r1, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	4b2d      	ldr	r3, [pc, #180]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 8005344:	430a      	orrs	r2, r1
 8005346:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005348:	f7ff f81a 	bl	8004380 <HAL_GetTick>
 800534c:	0003      	movs	r3, r0
 800534e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005350:	e009      	b.n	8005366 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005352:	f7ff f815 	bl	8004380 <HAL_GetTick>
 8005356:	0002      	movs	r2, r0
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	4a27      	ldr	r2, [pc, #156]	; (80053fc <HAL_RCC_ClockConfig+0x18c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e042      	b.n	80053ec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005366:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	220c      	movs	r2, #12
 800536c:	401a      	ands	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	429a      	cmp	r2, r3
 8005376:	d1ec      	bne.n	8005352 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005378:	4b1e      	ldr	r3, [pc, #120]	; (80053f4 <HAL_RCC_ClockConfig+0x184>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2201      	movs	r2, #1
 800537e:	4013      	ands	r3, r2
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d211      	bcs.n	80053aa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <HAL_RCC_ClockConfig+0x184>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2201      	movs	r2, #1
 800538c:	4393      	bics	r3, r2
 800538e:	0019      	movs	r1, r3
 8005390:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <HAL_RCC_ClockConfig+0x184>)
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005398:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <HAL_RCC_ClockConfig+0x184>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2201      	movs	r2, #1
 800539e:	4013      	ands	r3, r2
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d001      	beq.n	80053aa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e020      	b.n	80053ec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2204      	movs	r2, #4
 80053b0:	4013      	ands	r3, r2
 80053b2:	d009      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80053b4:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	4a11      	ldr	r2, [pc, #68]	; (8005400 <HAL_RCC_ClockConfig+0x190>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	0019      	movs	r1, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 80053c4:	430a      	orrs	r2, r1
 80053c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80053c8:	f000 f820 	bl	800540c <HAL_RCC_GetSysClockFreq>
 80053cc:	0001      	movs	r1, r0
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <HAL_RCC_ClockConfig+0x188>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	091b      	lsrs	r3, r3, #4
 80053d4:	220f      	movs	r2, #15
 80053d6:	4013      	ands	r3, r2
 80053d8:	4a0a      	ldr	r2, [pc, #40]	; (8005404 <HAL_RCC_ClockConfig+0x194>)
 80053da:	5cd3      	ldrb	r3, [r2, r3]
 80053dc:	000a      	movs	r2, r1
 80053de:	40da      	lsrs	r2, r3
 80053e0:	4b09      	ldr	r3, [pc, #36]	; (8005408 <HAL_RCC_ClockConfig+0x198>)
 80053e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80053e4:	2000      	movs	r0, #0
 80053e6:	f7fe ff85 	bl	80042f4 <HAL_InitTick>
  
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b004      	add	sp, #16
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40022000 	.word	0x40022000
 80053f8:	40021000 	.word	0x40021000
 80053fc:	00001388 	.word	0x00001388
 8005400:	fffff8ff 	.word	0xfffff8ff
 8005404:	0800ae88 	.word	0x0800ae88
 8005408:	20000000 	.word	0x20000000

0800540c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800540c:	b590      	push	{r4, r7, lr}
 800540e:	b08f      	sub	sp, #60	; 0x3c
 8005410:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005412:	2314      	movs	r3, #20
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	4a2b      	ldr	r2, [pc, #172]	; (80054c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005418:	ca13      	ldmia	r2!, {r0, r1, r4}
 800541a:	c313      	stmia	r3!, {r0, r1, r4}
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	4a29      	ldr	r2, [pc, #164]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005424:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005426:	c313      	stmia	r3!, {r0, r1, r4}
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005430:	2300      	movs	r3, #0
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28
 8005434:	2300      	movs	r3, #0
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
 8005438:	2300      	movs	r3, #0
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005440:	4b22      	ldr	r3, [pc, #136]	; (80054cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	220c      	movs	r2, #12
 800544a:	4013      	ands	r3, r2
 800544c:	2b04      	cmp	r3, #4
 800544e:	d002      	beq.n	8005456 <HAL_RCC_GetSysClockFreq+0x4a>
 8005450:	2b08      	cmp	r3, #8
 8005452:	d003      	beq.n	800545c <HAL_RCC_GetSysClockFreq+0x50>
 8005454:	e02d      	b.n	80054b2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005456:	4b1e      	ldr	r3, [pc, #120]	; (80054d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005458:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800545a:	e02d      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	0c9b      	lsrs	r3, r3, #18
 8005460:	220f      	movs	r2, #15
 8005462:	4013      	ands	r3, r2
 8005464:	2214      	movs	r2, #20
 8005466:	18ba      	adds	r2, r7, r2
 8005468:	5cd3      	ldrb	r3, [r2, r3]
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800546c:	4b17      	ldr	r3, [pc, #92]	; (80054cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	220f      	movs	r2, #15
 8005472:	4013      	ands	r3, r2
 8005474:	1d3a      	adds	r2, r7, #4
 8005476:	5cd3      	ldrb	r3, [r2, r3]
 8005478:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800547a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547c:	2380      	movs	r3, #128	; 0x80
 800547e:	025b      	lsls	r3, r3, #9
 8005480:	4013      	ands	r3, r2
 8005482:	d009      	beq.n	8005498 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005486:	4812      	ldr	r0, [pc, #72]	; (80054d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005488:	f7fa fe5a 	bl	8000140 <__udivsi3>
 800548c:	0003      	movs	r3, r0
 800548e:	001a      	movs	r2, r3
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	4353      	muls	r3, r2
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
 8005496:	e009      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800549a:	000a      	movs	r2, r1
 800549c:	0152      	lsls	r2, r2, #5
 800549e:	1a52      	subs	r2, r2, r1
 80054a0:	0193      	lsls	r3, r2, #6
 80054a2:	1a9b      	subs	r3, r3, r2
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	185b      	adds	r3, r3, r1
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054b0:	e002      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054b2:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80054b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054b6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80054ba:	0018      	movs	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	b00f      	add	sp, #60	; 0x3c
 80054c0:	bd90      	pop	{r4, r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	0800ade8 	.word	0x0800ade8
 80054c8:	0800adf8 	.word	0x0800adf8
 80054cc:	40021000 	.word	0x40021000
 80054d0:	007a1200 	.word	0x007a1200

080054d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d8:	4b02      	ldr	r3, [pc, #8]	; (80054e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	0018      	movs	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	20000000 	.word	0x20000000

080054e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80054ec:	f7ff fff2 	bl	80054d4 <HAL_RCC_GetHCLKFreq>
 80054f0:	0001      	movs	r1, r0
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	0a1b      	lsrs	r3, r3, #8
 80054f8:	2207      	movs	r2, #7
 80054fa:	4013      	ands	r3, r2
 80054fc:	4a04      	ldr	r2, [pc, #16]	; (8005510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054fe:	5cd3      	ldrb	r3, [r2, r3]
 8005500:	40d9      	lsrs	r1, r3
 8005502:	000b      	movs	r3, r1
}    
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	40021000 	.word	0x40021000
 8005510:	0800ae98 	.word	0x0800ae98

08005514 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e0a8      	b.n	8005678 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	2382      	movs	r3, #130	; 0x82
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	429a      	cmp	r2, r3
 8005538:	d009      	beq.n	800554e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	61da      	str	r2, [r3, #28]
 8005540:	e005      	b.n	800554e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	225d      	movs	r2, #93	; 0x5d
 8005558:	5c9b      	ldrb	r3, [r3, r2]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d107      	bne.n	8005570 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	225c      	movs	r2, #92	; 0x5c
 8005564:	2100      	movs	r1, #0
 8005566:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	0018      	movs	r0, r3
 800556c:	f7fe fc60 	bl	8003e30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	225d      	movs	r2, #93	; 0x5d
 8005574:	2102      	movs	r1, #2
 8005576:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2140      	movs	r1, #64	; 0x40
 8005584:	438a      	bics	r2, r1
 8005586:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	23e0      	movs	r3, #224	; 0xe0
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	429a      	cmp	r2, r3
 8005592:	d902      	bls.n	800559a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e002      	b.n	80055a0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800559a:	2380      	movs	r3, #128	; 0x80
 800559c:	015b      	lsls	r3, r3, #5
 800559e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	23f0      	movs	r3, #240	; 0xf0
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d008      	beq.n	80055be <HAL_SPI_Init+0xaa>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	23e0      	movs	r3, #224	; 0xe0
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d002      	beq.n	80055be <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	2382      	movs	r3, #130	; 0x82
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	401a      	ands	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6899      	ldr	r1, [r3, #8]
 80055cc:	2384      	movs	r3, #132	; 0x84
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	400b      	ands	r3, r1
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2102      	movs	r1, #2
 80055da:	400b      	ands	r3, r1
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	2101      	movs	r1, #1
 80055e4:	400b      	ands	r3, r1
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6999      	ldr	r1, [r3, #24]
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	400b      	ands	r3, r1
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	2138      	movs	r1, #56	; 0x38
 80055fa:	400b      	ands	r3, r1
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	2180      	movs	r1, #128	; 0x80
 8005604:	400b      	ands	r3, r1
 8005606:	431a      	orrs	r2, r3
 8005608:	0011      	movs	r1, r2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	019b      	lsls	r3, r3, #6
 8005612:	401a      	ands	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	2204      	movs	r2, #4
 8005624:	401a      	ands	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	2110      	movs	r1, #16
 800562c:	400b      	ands	r3, r1
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005634:	2108      	movs	r1, #8
 8005636:	400b      	ands	r3, r1
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68d9      	ldr	r1, [r3, #12]
 800563e:	23f0      	movs	r3, #240	; 0xf0
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	400b      	ands	r3, r1
 8005644:	431a      	orrs	r2, r3
 8005646:	0011      	movs	r1, r2
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	015b      	lsls	r3, r3, #5
 800564e:	401a      	ands	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69da      	ldr	r2, [r3, #28]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4907      	ldr	r1, [pc, #28]	; (8005680 <HAL_SPI_Init+0x16c>)
 8005664:	400a      	ands	r2, r1
 8005666:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	225d      	movs	r2, #93	; 0x5d
 8005672:	2101      	movs	r1, #1
 8005674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	0018      	movs	r0, r3
 800567a:	46bd      	mov	sp, r7
 800567c:	b004      	add	sp, #16
 800567e:	bd80      	pop	{r7, pc}
 8005680:	fffff7ff 	.word	0xfffff7ff

08005684 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	1dbb      	adds	r3, r7, #6
 8005692:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005694:	231f      	movs	r3, #31
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	225c      	movs	r2, #92	; 0x5c
 80056a0:	5c9b      	ldrb	r3, [r3, r2]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_SPI_Transmit+0x26>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e140      	b.n	800592c <HAL_SPI_Transmit+0x2a8>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	225c      	movs	r2, #92	; 0x5c
 80056ae:	2101      	movs	r1, #1
 80056b0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056b2:	f7fe fe65 	bl	8004380 <HAL_GetTick>
 80056b6:	0003      	movs	r3, r0
 80056b8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80056ba:	2316      	movs	r3, #22
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	1dba      	adds	r2, r7, #6
 80056c0:	8812      	ldrh	r2, [r2, #0]
 80056c2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	225d      	movs	r2, #93	; 0x5d
 80056c8:	5c9b      	ldrb	r3, [r3, r2]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d004      	beq.n	80056da <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80056d0:	231f      	movs	r3, #31
 80056d2:	18fb      	adds	r3, r7, r3
 80056d4:	2202      	movs	r2, #2
 80056d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80056d8:	e11d      	b.n	8005916 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_SPI_Transmit+0x64>
 80056e0:	1dbb      	adds	r3, r7, #6
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d104      	bne.n	80056f2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80056e8:	231f      	movs	r3, #31
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	2201      	movs	r2, #1
 80056ee:	701a      	strb	r2, [r3, #0]
    goto error;
 80056f0:	e111      	b.n	8005916 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	225d      	movs	r2, #93	; 0x5d
 80056f6:	2103      	movs	r1, #3
 80056f8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1dba      	adds	r2, r7, #6
 800570a:	8812      	ldrh	r2, [r2, #0]
 800570c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	1dba      	adds	r2, r7, #6
 8005712:	8812      	ldrh	r2, [r2, #0]
 8005714:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2244      	movs	r2, #68	; 0x44
 8005720:	2100      	movs	r1, #0
 8005722:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2246      	movs	r2, #70	; 0x46
 8005728:	2100      	movs	r1, #0
 800572a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	2380      	movs	r3, #128	; 0x80
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	429a      	cmp	r2, r3
 8005742:	d110      	bne.n	8005766 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2140      	movs	r1, #64	; 0x40
 8005750:	438a      	bics	r2, r1
 8005752:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2180      	movs	r1, #128	; 0x80
 8005760:	01c9      	lsls	r1, r1, #7
 8005762:	430a      	orrs	r2, r1
 8005764:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2240      	movs	r2, #64	; 0x40
 800576e:	4013      	ands	r3, r2
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d007      	beq.n	8005784 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2140      	movs	r1, #64	; 0x40
 8005780:	430a      	orrs	r2, r1
 8005782:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	23e0      	movs	r3, #224	; 0xe0
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	429a      	cmp	r2, r3
 800578e:	d94e      	bls.n	800582e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d004      	beq.n	80057a2 <HAL_SPI_Transmit+0x11e>
 8005798:	2316      	movs	r3, #22
 800579a:	18fb      	adds	r3, r7, r3
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d13f      	bne.n	8005822 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	881a      	ldrh	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	1c9a      	adds	r2, r3, #2
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057c6:	e02c      	b.n	8005822 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2202      	movs	r2, #2
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d112      	bne.n	80057fc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	881a      	ldrh	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	1c9a      	adds	r2, r3, #2
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057fa:	e012      	b.n	8005822 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057fc:	f7fe fdc0 	bl	8004380 <HAL_GetTick>
 8005800:	0002      	movs	r2, r0
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d802      	bhi.n	8005812 <HAL_SPI_Transmit+0x18e>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	3301      	adds	r3, #1
 8005810:	d102      	bne.n	8005818 <HAL_SPI_Transmit+0x194>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005818:	231f      	movs	r3, #31
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	2203      	movs	r2, #3
 800581e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005820:	e079      	b.n	8005916 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005826:	b29b      	uxth	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1cd      	bne.n	80057c8 <HAL_SPI_Transmit+0x144>
 800582c:	e04f      	b.n	80058ce <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <HAL_SPI_Transmit+0x1bc>
 8005836:	2316      	movs	r3, #22
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d141      	bne.n	80058c4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	330c      	adds	r3, #12
 800584a:	7812      	ldrb	r2, [r2, #0]
 800584c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005866:	e02d      	b.n	80058c4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2202      	movs	r2, #2
 8005870:	4013      	ands	r3, r2
 8005872:	2b02      	cmp	r3, #2
 8005874:	d113      	bne.n	800589e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	330c      	adds	r3, #12
 8005880:	7812      	ldrb	r2, [r2, #0]
 8005882:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800589c:	e012      	b.n	80058c4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800589e:	f7fe fd6f 	bl	8004380 <HAL_GetTick>
 80058a2:	0002      	movs	r2, r0
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d802      	bhi.n	80058b4 <HAL_SPI_Transmit+0x230>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	3301      	adds	r3, #1
 80058b2:	d102      	bne.n	80058ba <HAL_SPI_Transmit+0x236>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d104      	bne.n	80058c4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80058ba:	231f      	movs	r3, #31
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	2203      	movs	r2, #3
 80058c0:	701a      	strb	r2, [r3, #0]
          goto error;
 80058c2:	e028      	b.n	8005916 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1cc      	bne.n	8005868 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	0018      	movs	r0, r3
 80058d6:	f000 fcd9 	bl	800628c <SPI_EndRxTxTransaction>
 80058da:	1e03      	subs	r3, r0, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058ec:	2300      	movs	r3, #0
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800590a:	231f      	movs	r3, #31
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	2201      	movs	r2, #1
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	e000      	b.n	8005916 <HAL_SPI_Transmit+0x292>
  }

error:
 8005914:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	225d      	movs	r2, #93	; 0x5d
 800591a:	2101      	movs	r1, #1
 800591c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	225c      	movs	r2, #92	; 0x5c
 8005922:	2100      	movs	r1, #0
 8005924:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005926:	231f      	movs	r3, #31
 8005928:	18fb      	adds	r3, r7, r3
 800592a:	781b      	ldrb	r3, [r3, #0]
}
 800592c:	0018      	movs	r0, r3
 800592e:	46bd      	mov	sp, r7
 8005930:	b008      	add	sp, #32
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005934:	b590      	push	{r4, r7, lr}
 8005936:	b089      	sub	sp, #36	; 0x24
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	1dbb      	adds	r3, r7, #6
 8005942:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005944:	2317      	movs	r3, #23
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	2382      	movs	r3, #130	; 0x82
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	429a      	cmp	r2, r3
 8005956:	d113      	bne.n	8005980 <HAL_SPI_Receive+0x4c>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10f      	bne.n	8005980 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	225d      	movs	r2, #93	; 0x5d
 8005964:	2104      	movs	r1, #4
 8005966:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005968:	1dbb      	adds	r3, r7, #6
 800596a:	881c      	ldrh	r4, [r3, #0]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	0023      	movs	r3, r4
 8005978:	f000 f928 	bl	8005bcc <HAL_SPI_TransmitReceive>
 800597c:	0003      	movs	r3, r0
 800597e:	e11c      	b.n	8005bba <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	225c      	movs	r2, #92	; 0x5c
 8005984:	5c9b      	ldrb	r3, [r3, r2]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_SPI_Receive+0x5a>
 800598a:	2302      	movs	r3, #2
 800598c:	e115      	b.n	8005bba <HAL_SPI_Receive+0x286>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	225c      	movs	r2, #92	; 0x5c
 8005992:	2101      	movs	r1, #1
 8005994:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005996:	f7fe fcf3 	bl	8004380 <HAL_GetTick>
 800599a:	0003      	movs	r3, r0
 800599c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	225d      	movs	r2, #93	; 0x5d
 80059a2:	5c9b      	ldrb	r3, [r3, r2]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d004      	beq.n	80059b4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80059aa:	2317      	movs	r3, #23
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	2202      	movs	r2, #2
 80059b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80059b2:	e0f7      	b.n	8005ba4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_SPI_Receive+0x8e>
 80059ba:	1dbb      	adds	r3, r7, #6
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d104      	bne.n	80059cc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80059c2:	2317      	movs	r3, #23
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	2201      	movs	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80059ca:	e0eb      	b.n	8005ba4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	225d      	movs	r2, #93	; 0x5d
 80059d0:	2104      	movs	r1, #4
 80059d2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1dba      	adds	r2, r7, #6
 80059e4:	2144      	movs	r1, #68	; 0x44
 80059e6:	8812      	ldrh	r2, [r2, #0]
 80059e8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1dba      	adds	r2, r7, #6
 80059ee:	2146      	movs	r1, #70	; 0x46
 80059f0:	8812      	ldrh	r2, [r2, #0]
 80059f2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	23e0      	movs	r3, #224	; 0xe0
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d908      	bls.n	8005a30 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4966      	ldr	r1, [pc, #408]	; (8005bc4 <HAL_SPI_Receive+0x290>)
 8005a2a:	400a      	ands	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	e008      	b.n	8005a42 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2180      	movs	r1, #128	; 0x80
 8005a3c:	0149      	lsls	r1, r1, #5
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	2380      	movs	r3, #128	; 0x80
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d10f      	bne.n	8005a6e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2140      	movs	r1, #64	; 0x40
 8005a5a:	438a      	bics	r2, r1
 8005a5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4957      	ldr	r1, [pc, #348]	; (8005bc8 <HAL_SPI_Receive+0x294>)
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2240      	movs	r2, #64	; 0x40
 8005a76:	4013      	ands	r3, r2
 8005a78:	2b40      	cmp	r3, #64	; 0x40
 8005a7a:	d007      	beq.n	8005a8c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2140      	movs	r1, #64	; 0x40
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	23e0      	movs	r3, #224	; 0xe0
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d900      	bls.n	8005a9a <HAL_SPI_Receive+0x166>
 8005a98:	e069      	b.n	8005b6e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a9a:	e031      	b.n	8005b00 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d117      	bne.n	8005ada <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	001a      	movs	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	7812      	ldrb	r2, [r2, #0]
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2246      	movs	r2, #70	; 0x46
 8005aca:	5a9b      	ldrh	r3, [r3, r2]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b299      	uxth	r1, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2246      	movs	r2, #70	; 0x46
 8005ad6:	5299      	strh	r1, [r3, r2]
 8005ad8:	e012      	b.n	8005b00 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ada:	f7fe fc51 	bl	8004380 <HAL_GetTick>
 8005ade:	0002      	movs	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d802      	bhi.n	8005af0 <HAL_SPI_Receive+0x1bc>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	d102      	bne.n	8005af6 <HAL_SPI_Receive+0x1c2>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005af6:	2317      	movs	r3, #23
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	2203      	movs	r2, #3
 8005afc:	701a      	strb	r2, [r3, #0]
          goto error;
 8005afe:	e051      	b.n	8005ba4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2246      	movs	r2, #70	; 0x46
 8005b04:	5a9b      	ldrh	r3, [r3, r2]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1c7      	bne.n	8005a9c <HAL_SPI_Receive+0x168>
 8005b0c:	e035      	b.n	8005b7a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2201      	movs	r2, #1
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d115      	bne.n	8005b48 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	b292      	uxth	r2, r2
 8005b28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2246      	movs	r2, #70	; 0x46
 8005b38:	5a9b      	ldrh	r3, [r3, r2]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b299      	uxth	r1, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2246      	movs	r2, #70	; 0x46
 8005b44:	5299      	strh	r1, [r3, r2]
 8005b46:	e012      	b.n	8005b6e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b48:	f7fe fc1a 	bl	8004380 <HAL_GetTick>
 8005b4c:	0002      	movs	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d802      	bhi.n	8005b5e <HAL_SPI_Receive+0x22a>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	d102      	bne.n	8005b64 <HAL_SPI_Receive+0x230>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005b64:	2317      	movs	r3, #23
 8005b66:	18fb      	adds	r3, r7, r3
 8005b68:	2203      	movs	r2, #3
 8005b6a:	701a      	strb	r2, [r3, #0]
          goto error;
 8005b6c:	e01a      	b.n	8005ba4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2246      	movs	r2, #70	; 0x46
 8005b72:	5a9b      	ldrh	r3, [r3, r2]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1c9      	bne.n	8005b0e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f000 fb25 	bl	80061d0 <SPI_EndRxTransaction>
 8005b86:	1e03      	subs	r3, r0, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005b98:	2317      	movs	r3, #23
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	e000      	b.n	8005ba4 <HAL_SPI_Receive+0x270>
  }

error :
 8005ba2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	225d      	movs	r2, #93	; 0x5d
 8005ba8:	2101      	movs	r1, #1
 8005baa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	225c      	movs	r2, #92	; 0x5c
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005bb4:	2317      	movs	r3, #23
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	781b      	ldrb	r3, [r3, #0]
}
 8005bba:	0018      	movs	r0, r3
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	b007      	add	sp, #28
 8005bc0:	bd90      	pop	{r4, r7, pc}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	ffffefff 	.word	0xffffefff
 8005bc8:	ffffbfff 	.word	0xffffbfff

08005bcc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	; 0x28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	001a      	movs	r2, r3
 8005bda:	1cbb      	adds	r3, r7, #2
 8005bdc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bde:	2301      	movs	r3, #1
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005be2:	2323      	movs	r3, #35	; 0x23
 8005be4:	18fb      	adds	r3, r7, r3
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	225c      	movs	r2, #92	; 0x5c
 8005bee:	5c9b      	ldrb	r3, [r3, r2]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x2c>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e1b5      	b.n	8005f64 <HAL_SPI_TransmitReceive+0x398>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	225c      	movs	r2, #92	; 0x5c
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c00:	f7fe fbbe 	bl	8004380 <HAL_GetTick>
 8005c04:	0003      	movs	r3, r0
 8005c06:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c08:	201b      	movs	r0, #27
 8005c0a:	183b      	adds	r3, r7, r0
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	215d      	movs	r1, #93	; 0x5d
 8005c10:	5c52      	ldrb	r2, [r2, r1]
 8005c12:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c1a:	2312      	movs	r3, #18
 8005c1c:	18fb      	adds	r3, r7, r3
 8005c1e:	1cba      	adds	r2, r7, #2
 8005c20:	8812      	ldrh	r2, [r2, #0]
 8005c22:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c24:	183b      	adds	r3, r7, r0
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d011      	beq.n	8005c50 <HAL_SPI_TransmitReceive+0x84>
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	2382      	movs	r3, #130	; 0x82
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d107      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d103      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x7a>
 8005c3e:	183b      	adds	r3, r7, r0
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d004      	beq.n	8005c50 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005c46:	2323      	movs	r3, #35	; 0x23
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c4e:	e17e      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d006      	beq.n	8005c64 <HAL_SPI_TransmitReceive+0x98>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_SPI_TransmitReceive+0x98>
 8005c5c:	1cbb      	adds	r3, r7, #2
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005c64:	2323      	movs	r3, #35	; 0x23
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	2201      	movs	r2, #1
 8005c6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c6c:	e16f      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	225d      	movs	r2, #93	; 0x5d
 8005c72:	5c9b      	ldrb	r3, [r3, r2]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d003      	beq.n	8005c82 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	225d      	movs	r2, #93	; 0x5d
 8005c7e:	2105      	movs	r1, #5
 8005c80:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1cba      	adds	r2, r7, #2
 8005c92:	2146      	movs	r1, #70	; 0x46
 8005c94:	8812      	ldrh	r2, [r2, #0]
 8005c96:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	1cba      	adds	r2, r7, #2
 8005c9c:	2144      	movs	r1, #68	; 0x44
 8005c9e:	8812      	ldrh	r2, [r2, #0]
 8005ca0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	1cba      	adds	r2, r7, #2
 8005cac:	8812      	ldrh	r2, [r2, #0]
 8005cae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	1cba      	adds	r2, r7, #2
 8005cb4:	8812      	ldrh	r2, [r2, #0]
 8005cb6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	23e0      	movs	r3, #224	; 0xe0
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d908      	bls.n	8005ce2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	49a4      	ldr	r1, [pc, #656]	; (8005f6c <HAL_SPI_TransmitReceive+0x3a0>)
 8005cdc:	400a      	ands	r2, r1
 8005cde:	605a      	str	r2, [r3, #4]
 8005ce0:	e008      	b.n	8005cf4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2180      	movs	r1, #128	; 0x80
 8005cee:	0149      	lsls	r1, r1, #5
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2240      	movs	r2, #64	; 0x40
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d007      	beq.n	8005d12 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2140      	movs	r1, #64	; 0x40
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	23e0      	movs	r3, #224	; 0xe0
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d800      	bhi.n	8005d20 <HAL_SPI_TransmitReceive+0x154>
 8005d1e:	e07f      	b.n	8005e20 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <HAL_SPI_TransmitReceive+0x168>
 8005d28:	2312      	movs	r3, #18
 8005d2a:	18fb      	adds	r3, r7, r3
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d000      	beq.n	8005d34 <HAL_SPI_TransmitReceive+0x168>
 8005d32:	e069      	b.n	8005e08 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	881a      	ldrh	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	1c9a      	adds	r2, r3, #2
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d58:	e056      	b.n	8005e08 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2202      	movs	r2, #2
 8005d62:	4013      	ands	r3, r2
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d11b      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x1d4>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d016      	beq.n	8005da0 <HAL_SPI_TransmitReceive+0x1d4>
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d113      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	881a      	ldrh	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	1c9a      	adds	r2, r3, #2
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2201      	movs	r2, #1
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d11c      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x21c>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2246      	movs	r2, #70	; 0x46
 8005db2:	5a9b      	ldrh	r3, [r3, r2]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	b292      	uxth	r2, r2
 8005dc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	1c9a      	adds	r2, r3, #2
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2246      	movs	r2, #70	; 0x46
 8005dd6:	5a9b      	ldrh	r3, [r3, r2]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b299      	uxth	r1, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2246      	movs	r2, #70	; 0x46
 8005de2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005de4:	2301      	movs	r3, #1
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005de8:	f7fe faca 	bl	8004380 <HAL_GetTick>
 8005dec:	0002      	movs	r2, r0
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d807      	bhi.n	8005e08 <HAL_SPI_TransmitReceive+0x23c>
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	d004      	beq.n	8005e08 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005dfe:	2323      	movs	r3, #35	; 0x23
 8005e00:	18fb      	adds	r3, r7, r3
 8005e02:	2203      	movs	r2, #3
 8005e04:	701a      	strb	r2, [r3, #0]
        goto error;
 8005e06:	e0a2      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1a3      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x18e>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2246      	movs	r2, #70	; 0x46
 8005e16:	5a9b      	ldrh	r3, [r3, r2]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d19d      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x18e>
 8005e1e:	e085      	b.n	8005f2c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0x268>
 8005e28:	2312      	movs	r3, #18
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d000      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0x268>
 8005e32:	e070      	b.n	8005f16 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	7812      	ldrb	r2, [r2, #0]
 8005e40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e5a:	e05c      	b.n	8005f16 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2202      	movs	r2, #2
 8005e64:	4013      	ands	r3, r2
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d11c      	bne.n	8005ea4 <HAL_SPI_TransmitReceive+0x2d8>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d017      	beq.n	8005ea4 <HAL_SPI_TransmitReceive+0x2d8>
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d114      	bne.n	8005ea4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	330c      	adds	r3, #12
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	4013      	ands	r3, r2
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d11e      	bne.n	8005ef0 <HAL_SPI_TransmitReceive+0x324>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2246      	movs	r2, #70	; 0x46
 8005eb6:	5a9b      	ldrh	r3, [r3, r2]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d018      	beq.n	8005ef0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	330c      	adds	r3, #12
 8005ec4:	001a      	movs	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	7812      	ldrb	r2, [r2, #0]
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2246      	movs	r2, #70	; 0x46
 8005ede:	5a9b      	ldrh	r3, [r3, r2]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b299      	uxth	r1, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2246      	movs	r2, #70	; 0x46
 8005eea:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005eec:	2301      	movs	r3, #1
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ef0:	f7fe fa46 	bl	8004380 <HAL_GetTick>
 8005ef4:	0002      	movs	r2, r0
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d802      	bhi.n	8005f06 <HAL_SPI_TransmitReceive+0x33a>
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	3301      	adds	r3, #1
 8005f04:	d102      	bne.n	8005f0c <HAL_SPI_TransmitReceive+0x340>
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d104      	bne.n	8005f16 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005f0c:	2323      	movs	r3, #35	; 0x23
 8005f0e:	18fb      	adds	r3, r7, r3
 8005f10:	2203      	movs	r2, #3
 8005f12:	701a      	strb	r2, [r3, #0]
        goto error;
 8005f14:	e01b      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d19d      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x290>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2246      	movs	r2, #70	; 0x46
 8005f24:	5a9b      	ldrh	r3, [r3, r2]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d197      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	0018      	movs	r0, r3
 8005f34:	f000 f9aa 	bl	800628c <SPI_EndRxTxTransaction>
 8005f38:	1e03      	subs	r3, r0, #0
 8005f3a:	d007      	beq.n	8005f4c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005f3c:	2323      	movs	r3, #35	; 0x23
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	2201      	movs	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	661a      	str	r2, [r3, #96]	; 0x60
 8005f4a:	e000      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005f4c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	225d      	movs	r2, #93	; 0x5d
 8005f52:	2101      	movs	r1, #1
 8005f54:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	225c      	movs	r2, #92	; 0x5c
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005f5e:	2323      	movs	r3, #35	; 0x23
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	781b      	ldrb	r3, [r3, #0]
}
 8005f64:	0018      	movs	r0, r3
 8005f66:	46bd      	mov	sp, r7
 8005f68:	b00a      	add	sp, #40	; 0x28
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	ffffefff 	.word	0xffffefff

08005f70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	1dfb      	adds	r3, r7, #7
 8005f7e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f80:	f7fe f9fe 	bl	8004380 <HAL_GetTick>
 8005f84:	0002      	movs	r2, r0
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	18d3      	adds	r3, r2, r3
 8005f8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f90:	f7fe f9f6 	bl	8004380 <HAL_GetTick>
 8005f94:	0003      	movs	r3, r0
 8005f96:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f98:	4b3a      	ldr	r3, [pc, #232]	; (8006084 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	015b      	lsls	r3, r3, #5
 8005f9e:	0d1b      	lsrs	r3, r3, #20
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	4353      	muls	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fa6:	e058      	b.n	800605a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	3301      	adds	r3, #1
 8005fac:	d055      	beq.n	800605a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fae:	f7fe f9e7 	bl	8004380 <HAL_GetTick>
 8005fb2:	0002      	movs	r2, r0
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d902      	bls.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d142      	bne.n	800604a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	21e0      	movs	r1, #224	; 0xe0
 8005fd0:	438a      	bics	r2, r1
 8005fd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	2382      	movs	r3, #130	; 0x82
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d113      	bne.n	8006008 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	2380      	movs	r3, #128	; 0x80
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d005      	beq.n	8005ff8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	2380      	movs	r3, #128	; 0x80
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d107      	bne.n	8006008 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2140      	movs	r1, #64	; 0x40
 8006004:	438a      	bics	r2, r1
 8006006:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800600c:	2380      	movs	r3, #128	; 0x80
 800600e:	019b      	lsls	r3, r3, #6
 8006010:	429a      	cmp	r2, r3
 8006012:	d110      	bne.n	8006036 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	491a      	ldr	r1, [pc, #104]	; (8006088 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006020:	400a      	ands	r2, r1
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2180      	movs	r1, #128	; 0x80
 8006030:	0189      	lsls	r1, r1, #6
 8006032:	430a      	orrs	r2, r1
 8006034:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	225d      	movs	r2, #93	; 0x5d
 800603a:	2101      	movs	r1, #1
 800603c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	225c      	movs	r2, #92	; 0x5c
 8006042:	2100      	movs	r1, #0
 8006044:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e017      	b.n	800607a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	3b01      	subs	r3, #1
 8006058:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	4013      	ands	r3, r2
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	425a      	negs	r2, r3
 800606a:	4153      	adcs	r3, r2
 800606c:	b2db      	uxtb	r3, r3
 800606e:	001a      	movs	r2, r3
 8006070:	1dfb      	adds	r3, r7, #7
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d197      	bne.n	8005fa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	0018      	movs	r0, r3
 800607c:	46bd      	mov	sp, r7
 800607e:	b008      	add	sp, #32
 8006080:	bd80      	pop	{r7, pc}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	20000000 	.word	0x20000000
 8006088:	ffffdfff 	.word	0xffffdfff

0800608c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800609a:	2317      	movs	r3, #23
 800609c:	18fb      	adds	r3, r7, r3
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060a2:	f7fe f96d 	bl	8004380 <HAL_GetTick>
 80060a6:	0002      	movs	r2, r0
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	18d3      	adds	r3, r2, r3
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80060b2:	f7fe f965 	bl	8004380 <HAL_GetTick>
 80060b6:	0003      	movs	r3, r0
 80060b8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	330c      	adds	r3, #12
 80060c0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060c2:	4b41      	ldr	r3, [pc, #260]	; (80061c8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	0013      	movs	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	189b      	adds	r3, r3, r2
 80060cc:	00da      	lsls	r2, r3, #3
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	0d1b      	lsrs	r3, r3, #20
 80060d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d4:	4353      	muls	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80060d8:	e068      	b.n	80061ac <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	23c0      	movs	r3, #192	; 0xc0
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d10a      	bne.n	80060fa <SPI_WaitFifoStateUntilTimeout+0x6e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d107      	bne.n	80060fa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	2117      	movs	r1, #23
 80060f2:	187b      	adds	r3, r7, r1
 80060f4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80060f6:	187b      	adds	r3, r7, r1
 80060f8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	3301      	adds	r3, #1
 80060fe:	d055      	beq.n	80061ac <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006100:	f7fe f93e 	bl	8004380 <HAL_GetTick>
 8006104:	0002      	movs	r2, r0
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610c:	429a      	cmp	r2, r3
 800610e:	d902      	bls.n	8006116 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	2b00      	cmp	r3, #0
 8006114:	d142      	bne.n	800619c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	21e0      	movs	r1, #224	; 0xe0
 8006122:	438a      	bics	r2, r1
 8006124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	2382      	movs	r3, #130	; 0x82
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	429a      	cmp	r2, r3
 8006130:	d113      	bne.n	800615a <SPI_WaitFifoStateUntilTimeout+0xce>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	2380      	movs	r3, #128	; 0x80
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	429a      	cmp	r2, r3
 800613c:	d005      	beq.n	800614a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	429a      	cmp	r2, r3
 8006148:	d107      	bne.n	800615a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2140      	movs	r1, #64	; 0x40
 8006156:	438a      	bics	r2, r1
 8006158:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800615e:	2380      	movs	r3, #128	; 0x80
 8006160:	019b      	lsls	r3, r3, #6
 8006162:	429a      	cmp	r2, r3
 8006164:	d110      	bne.n	8006188 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4916      	ldr	r1, [pc, #88]	; (80061cc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006172:	400a      	ands	r2, r1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2180      	movs	r1, #128	; 0x80
 8006182:	0189      	lsls	r1, r1, #6
 8006184:	430a      	orrs	r2, r1
 8006186:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	225d      	movs	r2, #93	; 0x5d
 800618c:	2101      	movs	r1, #1
 800618e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	225c      	movs	r2, #92	; 0x5c
 8006194:	2100      	movs	r1, #0
 8006196:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e010      	b.n	80061be <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d18e      	bne.n	80060da <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	0018      	movs	r0, r3
 80061c0:	46bd      	mov	sp, r7
 80061c2:	b00a      	add	sp, #40	; 0x28
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	20000000 	.word	0x20000000
 80061cc:	ffffdfff 	.word	0xffffdfff

080061d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	2382      	movs	r3, #130	; 0x82
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d113      	bne.n	8006210 <SPI_EndRxTransaction+0x40>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d005      	beq.n	8006200 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	2380      	movs	r3, #128	; 0x80
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d107      	bne.n	8006210 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2140      	movs	r1, #64	; 0x40
 800620c:	438a      	bics	r2, r1
 800620e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	0013      	movs	r3, r2
 800621a:	2200      	movs	r2, #0
 800621c:	2180      	movs	r1, #128	; 0x80
 800621e:	f7ff fea7 	bl	8005f70 <SPI_WaitFlagStateUntilTimeout>
 8006222:	1e03      	subs	r3, r0, #0
 8006224:	d007      	beq.n	8006236 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622a:	2220      	movs	r2, #32
 800622c:	431a      	orrs	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e026      	b.n	8006284 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	2382      	movs	r3, #130	; 0x82
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	429a      	cmp	r2, r3
 8006240:	d11f      	bne.n	8006282 <SPI_EndRxTransaction+0xb2>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	2380      	movs	r3, #128	; 0x80
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	429a      	cmp	r2, r3
 800624c:	d005      	beq.n	800625a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	2380      	movs	r3, #128	; 0x80
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	429a      	cmp	r2, r3
 8006258:	d113      	bne.n	8006282 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	23c0      	movs	r3, #192	; 0xc0
 800625e:	00d9      	lsls	r1, r3, #3
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	0013      	movs	r3, r2
 8006268:	2200      	movs	r2, #0
 800626a:	f7ff ff0f 	bl	800608c <SPI_WaitFifoStateUntilTimeout>
 800626e:	1e03      	subs	r3, r0, #0
 8006270:	d007      	beq.n	8006282 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006276:	2220      	movs	r2, #32
 8006278:	431a      	orrs	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e000      	b.n	8006284 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	0018      	movs	r0, r3
 8006286:	46bd      	mov	sp, r7
 8006288:	b004      	add	sp, #16
 800628a:	bd80      	pop	{r7, pc}

0800628c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af02      	add	r7, sp, #8
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	23c0      	movs	r3, #192	; 0xc0
 800629c:	0159      	lsls	r1, r3, #5
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	0013      	movs	r3, r2
 80062a6:	2200      	movs	r2, #0
 80062a8:	f7ff fef0 	bl	800608c <SPI_WaitFifoStateUntilTimeout>
 80062ac:	1e03      	subs	r3, r0, #0
 80062ae:	d007      	beq.n	80062c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b4:	2220      	movs	r2, #32
 80062b6:	431a      	orrs	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e027      	b.n	8006310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	0013      	movs	r3, r2
 80062ca:	2200      	movs	r2, #0
 80062cc:	2180      	movs	r1, #128	; 0x80
 80062ce:	f7ff fe4f 	bl	8005f70 <SPI_WaitFlagStateUntilTimeout>
 80062d2:	1e03      	subs	r3, r0, #0
 80062d4:	d007      	beq.n	80062e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062da:	2220      	movs	r2, #32
 80062dc:	431a      	orrs	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e014      	b.n	8006310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	23c0      	movs	r3, #192	; 0xc0
 80062ea:	00d9      	lsls	r1, r3, #3
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	0013      	movs	r3, r2
 80062f4:	2200      	movs	r2, #0
 80062f6:	f7ff fec9 	bl	800608c <SPI_WaitFifoStateUntilTimeout>
 80062fa:	1e03      	subs	r3, r0, #0
 80062fc:	d007      	beq.n	800630e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006302:	2220      	movs	r2, #32
 8006304:	431a      	orrs	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e000      	b.n	8006310 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	0018      	movs	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	b004      	add	sp, #16
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e042      	b.n	80063b0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	223d      	movs	r2, #61	; 0x3d
 800632e:	5c9b      	ldrb	r3, [r3, r2]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d107      	bne.n	8006346 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	223c      	movs	r2, #60	; 0x3c
 800633a:	2100      	movs	r1, #0
 800633c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	0018      	movs	r0, r3
 8006342:	f7fd fdc1 	bl	8003ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	223d      	movs	r2, #61	; 0x3d
 800634a:	2102      	movs	r1, #2
 800634c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3304      	adds	r3, #4
 8006356:	0019      	movs	r1, r3
 8006358:	0010      	movs	r0, r2
 800635a:	f000 fa1f 	bl	800679c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2246      	movs	r2, #70	; 0x46
 8006362:	2101      	movs	r1, #1
 8006364:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	223e      	movs	r2, #62	; 0x3e
 800636a:	2101      	movs	r1, #1
 800636c:	5499      	strb	r1, [r3, r2]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	223f      	movs	r2, #63	; 0x3f
 8006372:	2101      	movs	r1, #1
 8006374:	5499      	strb	r1, [r3, r2]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2240      	movs	r2, #64	; 0x40
 800637a:	2101      	movs	r1, #1
 800637c:	5499      	strb	r1, [r3, r2]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2241      	movs	r2, #65	; 0x41
 8006382:	2101      	movs	r1, #1
 8006384:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2242      	movs	r2, #66	; 0x42
 800638a:	2101      	movs	r1, #1
 800638c:	5499      	strb	r1, [r3, r2]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2243      	movs	r2, #67	; 0x43
 8006392:	2101      	movs	r1, #1
 8006394:	5499      	strb	r1, [r3, r2]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2244      	movs	r2, #68	; 0x44
 800639a:	2101      	movs	r1, #1
 800639c:	5499      	strb	r1, [r3, r2]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2245      	movs	r2, #69	; 0x45
 80063a2:	2101      	movs	r1, #1
 80063a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	223d      	movs	r2, #61	; 0x3d
 80063aa:	2101      	movs	r1, #1
 80063ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	0018      	movs	r0, r3
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b002      	add	sp, #8
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e042      	b.n	8006450 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	223d      	movs	r2, #61	; 0x3d
 80063ce:	5c9b      	ldrb	r3, [r3, r2]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d107      	bne.n	80063e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	223c      	movs	r2, #60	; 0x3c
 80063da:	2100      	movs	r1, #0
 80063dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	0018      	movs	r0, r3
 80063e2:	f000 f839 	bl	8006458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	223d      	movs	r2, #61	; 0x3d
 80063ea:	2102      	movs	r1, #2
 80063ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3304      	adds	r3, #4
 80063f6:	0019      	movs	r1, r3
 80063f8:	0010      	movs	r0, r2
 80063fa:	f000 f9cf 	bl	800679c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2246      	movs	r2, #70	; 0x46
 8006402:	2101      	movs	r1, #1
 8006404:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	223e      	movs	r2, #62	; 0x3e
 800640a:	2101      	movs	r1, #1
 800640c:	5499      	strb	r1, [r3, r2]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	223f      	movs	r2, #63	; 0x3f
 8006412:	2101      	movs	r1, #1
 8006414:	5499      	strb	r1, [r3, r2]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2240      	movs	r2, #64	; 0x40
 800641a:	2101      	movs	r1, #1
 800641c:	5499      	strb	r1, [r3, r2]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2241      	movs	r2, #65	; 0x41
 8006422:	2101      	movs	r1, #1
 8006424:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2242      	movs	r2, #66	; 0x42
 800642a:	2101      	movs	r1, #1
 800642c:	5499      	strb	r1, [r3, r2]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2243      	movs	r2, #67	; 0x43
 8006432:	2101      	movs	r1, #1
 8006434:	5499      	strb	r1, [r3, r2]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2244      	movs	r2, #68	; 0x44
 800643a:	2101      	movs	r1, #1
 800643c:	5499      	strb	r1, [r3, r2]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2245      	movs	r2, #69	; 0x45
 8006442:	2101      	movs	r1, #1
 8006444:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	223d      	movs	r2, #61	; 0x3d
 800644a:	2101      	movs	r1, #1
 800644c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	0018      	movs	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	b002      	add	sp, #8
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006460:	46c0      	nop			; (mov r8, r8)
 8006462:	46bd      	mov	sp, r7
 8006464:	b002      	add	sp, #8
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006474:	2317      	movs	r3, #23
 8006476:	18fb      	adds	r3, r7, r3
 8006478:	2200      	movs	r2, #0
 800647a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	223c      	movs	r2, #60	; 0x3c
 8006480:	5c9b      	ldrb	r3, [r3, r2]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006486:	2302      	movs	r3, #2
 8006488:	e0ad      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	223c      	movs	r2, #60	; 0x3c
 800648e:	2101      	movs	r1, #1
 8006490:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b0c      	cmp	r3, #12
 8006496:	d100      	bne.n	800649a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006498:	e076      	b.n	8006588 <HAL_TIM_PWM_ConfigChannel+0x120>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b0c      	cmp	r3, #12
 800649e:	d900      	bls.n	80064a2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80064a0:	e095      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x166>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d04e      	beq.n	8006546 <HAL_TIM_PWM_ConfigChannel+0xde>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d900      	bls.n	80064b0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80064ae:	e08e      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x166>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_TIM_PWM_ConfigChannel+0x56>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d021      	beq.n	8006500 <HAL_TIM_PWM_ConfigChannel+0x98>
 80064bc:	e087      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	0011      	movs	r1, r2
 80064c6:	0018      	movs	r0, r3
 80064c8:	f000 f9e8 	bl	800689c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2108      	movs	r1, #8
 80064d8:	430a      	orrs	r2, r1
 80064da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2104      	movs	r1, #4
 80064e8:	438a      	bics	r2, r1
 80064ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6999      	ldr	r1, [r3, #24]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	619a      	str	r2, [r3, #24]
      break;
 80064fe:	e06b      	b.n	80065d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	0011      	movs	r1, r2
 8006508:	0018      	movs	r0, r3
 800650a:	f000 fa4f 	bl	80069ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2180      	movs	r1, #128	; 0x80
 800651a:	0109      	lsls	r1, r1, #4
 800651c:	430a      	orrs	r2, r1
 800651e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4931      	ldr	r1, [pc, #196]	; (80065f0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800652c:	400a      	ands	r2, r1
 800652e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6999      	ldr	r1, [r3, #24]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	021a      	lsls	r2, r3, #8
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	619a      	str	r2, [r3, #24]
      break;
 8006544:	e048      	b.n	80065d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	0011      	movs	r1, r2
 800654e:	0018      	movs	r0, r3
 8006550:	f000 fab0 	bl	8006ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69da      	ldr	r2, [r3, #28]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2108      	movs	r1, #8
 8006560:	430a      	orrs	r2, r1
 8006562:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69da      	ldr	r2, [r3, #28]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2104      	movs	r1, #4
 8006570:	438a      	bics	r2, r1
 8006572:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69d9      	ldr	r1, [r3, #28]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	61da      	str	r2, [r3, #28]
      break;
 8006586:	e027      	b.n	80065d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	0011      	movs	r1, r2
 8006590:	0018      	movs	r0, r3
 8006592:	f000 fb15 	bl	8006bc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2180      	movs	r1, #128	; 0x80
 80065a2:	0109      	lsls	r1, r1, #4
 80065a4:	430a      	orrs	r2, r1
 80065a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69da      	ldr	r2, [r3, #28]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	490f      	ldr	r1, [pc, #60]	; (80065f0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80065b4:	400a      	ands	r2, r1
 80065b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69d9      	ldr	r1, [r3, #28]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	021a      	lsls	r2, r3, #8
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	61da      	str	r2, [r3, #28]
      break;
 80065cc:	e004      	b.n	80065d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80065ce:	2317      	movs	r3, #23
 80065d0:	18fb      	adds	r3, r7, r3
 80065d2:	2201      	movs	r2, #1
 80065d4:	701a      	strb	r2, [r3, #0]
      break;
 80065d6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	223c      	movs	r2, #60	; 0x3c
 80065dc:	2100      	movs	r1, #0
 80065de:	5499      	strb	r1, [r3, r2]

  return status;
 80065e0:	2317      	movs	r3, #23
 80065e2:	18fb      	adds	r3, r7, r3
 80065e4:	781b      	ldrb	r3, [r3, #0]
}
 80065e6:	0018      	movs	r0, r3
 80065e8:	46bd      	mov	sp, r7
 80065ea:	b006      	add	sp, #24
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	fffffbff 	.word	0xfffffbff

080065f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065fe:	230f      	movs	r3, #15
 8006600:	18fb      	adds	r3, r7, r3
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	223c      	movs	r2, #60	; 0x3c
 800660a:	5c9b      	ldrb	r3, [r3, r2]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_TIM_ConfigClockSource+0x20>
 8006610:	2302      	movs	r3, #2
 8006612:	e0bc      	b.n	800678e <HAL_TIM_ConfigClockSource+0x19a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	223c      	movs	r2, #60	; 0x3c
 8006618:	2101      	movs	r1, #1
 800661a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	223d      	movs	r2, #61	; 0x3d
 8006620:	2102      	movs	r1, #2
 8006622:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2277      	movs	r2, #119	; 0x77
 8006630:	4393      	bics	r3, r2
 8006632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4a58      	ldr	r2, [pc, #352]	; (8006798 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006638:	4013      	ands	r3, r2
 800663a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2280      	movs	r2, #128	; 0x80
 800664a:	0192      	lsls	r2, r2, #6
 800664c:	4293      	cmp	r3, r2
 800664e:	d040      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0xde>
 8006650:	2280      	movs	r2, #128	; 0x80
 8006652:	0192      	lsls	r2, r2, #6
 8006654:	4293      	cmp	r3, r2
 8006656:	d900      	bls.n	800665a <HAL_TIM_ConfigClockSource+0x66>
 8006658:	e088      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 800665a:	2280      	movs	r2, #128	; 0x80
 800665c:	0152      	lsls	r2, r2, #5
 800665e:	4293      	cmp	r3, r2
 8006660:	d100      	bne.n	8006664 <HAL_TIM_ConfigClockSource+0x70>
 8006662:	e088      	b.n	8006776 <HAL_TIM_ConfigClockSource+0x182>
 8006664:	2280      	movs	r2, #128	; 0x80
 8006666:	0152      	lsls	r2, r2, #5
 8006668:	4293      	cmp	r3, r2
 800666a:	d900      	bls.n	800666e <HAL_TIM_ConfigClockSource+0x7a>
 800666c:	e07e      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 800666e:	2b70      	cmp	r3, #112	; 0x70
 8006670:	d018      	beq.n	80066a4 <HAL_TIM_ConfigClockSource+0xb0>
 8006672:	d900      	bls.n	8006676 <HAL_TIM_ConfigClockSource+0x82>
 8006674:	e07a      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 8006676:	2b60      	cmp	r3, #96	; 0x60
 8006678:	d04f      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x126>
 800667a:	d900      	bls.n	800667e <HAL_TIM_ConfigClockSource+0x8a>
 800667c:	e076      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 800667e:	2b50      	cmp	r3, #80	; 0x50
 8006680:	d03b      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x106>
 8006682:	d900      	bls.n	8006686 <HAL_TIM_ConfigClockSource+0x92>
 8006684:	e072      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d057      	beq.n	800673a <HAL_TIM_ConfigClockSource+0x146>
 800668a:	d900      	bls.n	800668e <HAL_TIM_ConfigClockSource+0x9a>
 800668c:	e06e      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 800668e:	2b30      	cmp	r3, #48	; 0x30
 8006690:	d063      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x166>
 8006692:	d86b      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 8006694:	2b20      	cmp	r3, #32
 8006696:	d060      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x166>
 8006698:	d868      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0x178>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d05d      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x166>
 800669e:	2b10      	cmp	r3, #16
 80066a0:	d05b      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x166>
 80066a2:	e063      	b.n	800676c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	6899      	ldr	r1, [r3, #8]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f000 fb68 	bl	8006d88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2277      	movs	r2, #119	; 0x77
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	609a      	str	r2, [r3, #8]
      break;
 80066d0:	e052      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6899      	ldr	r1, [r3, #8]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f000 fb51 	bl	8006d88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	01c9      	lsls	r1, r1, #7
 80066f4:	430a      	orrs	r2, r1
 80066f6:	609a      	str	r2, [r3, #8]
      break;
 80066f8:	e03e      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	6859      	ldr	r1, [r3, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	001a      	movs	r2, r3
 8006708:	f000 fac4 	bl	8006c94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2150      	movs	r1, #80	; 0x50
 8006712:	0018      	movs	r0, r3
 8006714:	f000 fb1e 	bl	8006d54 <TIM_ITRx_SetConfig>
      break;
 8006718:	e02e      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6859      	ldr	r1, [r3, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	001a      	movs	r2, r3
 8006728:	f000 fae2 	bl	8006cf0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2160      	movs	r1, #96	; 0x60
 8006732:	0018      	movs	r0, r3
 8006734:	f000 fb0e 	bl	8006d54 <TIM_ITRx_SetConfig>
      break;
 8006738:	e01e      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6859      	ldr	r1, [r3, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	001a      	movs	r2, r3
 8006748:	f000 faa4 	bl	8006c94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2140      	movs	r1, #64	; 0x40
 8006752:	0018      	movs	r0, r3
 8006754:	f000 fafe 	bl	8006d54 <TIM_ITRx_SetConfig>
      break;
 8006758:	e00e      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	0019      	movs	r1, r3
 8006764:	0010      	movs	r0, r2
 8006766:	f000 faf5 	bl	8006d54 <TIM_ITRx_SetConfig>
      break;
 800676a:	e005      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800676c:	230f      	movs	r3, #15
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	2201      	movs	r2, #1
 8006772:	701a      	strb	r2, [r3, #0]
      break;
 8006774:	e000      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006776:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	223d      	movs	r2, #61	; 0x3d
 800677c:	2101      	movs	r1, #1
 800677e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	223c      	movs	r2, #60	; 0x3c
 8006784:	2100      	movs	r1, #0
 8006786:	5499      	strb	r1, [r3, r2]

  return status;
 8006788:	230f      	movs	r3, #15
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	781b      	ldrb	r3, [r3, #0]
}
 800678e:	0018      	movs	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	b004      	add	sp, #16
 8006794:	bd80      	pop	{r7, pc}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	ffff00ff 	.word	0xffff00ff

0800679c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a34      	ldr	r2, [pc, #208]	; (8006880 <TIM_Base_SetConfig+0xe4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d008      	beq.n	80067c6 <TIM_Base_SetConfig+0x2a>
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	2380      	movs	r3, #128	; 0x80
 80067b8:	05db      	lsls	r3, r3, #23
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d003      	beq.n	80067c6 <TIM_Base_SetConfig+0x2a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a30      	ldr	r2, [pc, #192]	; (8006884 <TIM_Base_SetConfig+0xe8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d108      	bne.n	80067d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2270      	movs	r2, #112	; 0x70
 80067ca:	4393      	bics	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a29      	ldr	r2, [pc, #164]	; (8006880 <TIM_Base_SetConfig+0xe4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d018      	beq.n	8006812 <TIM_Base_SetConfig+0x76>
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	2380      	movs	r3, #128	; 0x80
 80067e4:	05db      	lsls	r3, r3, #23
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d013      	beq.n	8006812 <TIM_Base_SetConfig+0x76>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a25      	ldr	r2, [pc, #148]	; (8006884 <TIM_Base_SetConfig+0xe8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00f      	beq.n	8006812 <TIM_Base_SetConfig+0x76>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a24      	ldr	r2, [pc, #144]	; (8006888 <TIM_Base_SetConfig+0xec>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00b      	beq.n	8006812 <TIM_Base_SetConfig+0x76>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a23      	ldr	r2, [pc, #140]	; (800688c <TIM_Base_SetConfig+0xf0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d007      	beq.n	8006812 <TIM_Base_SetConfig+0x76>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a22      	ldr	r2, [pc, #136]	; (8006890 <TIM_Base_SetConfig+0xf4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <TIM_Base_SetConfig+0x76>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a21      	ldr	r2, [pc, #132]	; (8006894 <TIM_Base_SetConfig+0xf8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d108      	bne.n	8006824 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4a20      	ldr	r2, [pc, #128]	; (8006898 <TIM_Base_SetConfig+0xfc>)
 8006816:	4013      	ands	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2280      	movs	r2, #128	; 0x80
 8006828:	4393      	bics	r3, r2
 800682a:	001a      	movs	r2, r3
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a0c      	ldr	r2, [pc, #48]	; (8006880 <TIM_Base_SetConfig+0xe4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00b      	beq.n	800686a <TIM_Base_SetConfig+0xce>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a0d      	ldr	r2, [pc, #52]	; (800688c <TIM_Base_SetConfig+0xf0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d007      	beq.n	800686a <TIM_Base_SetConfig+0xce>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a0c      	ldr	r2, [pc, #48]	; (8006890 <TIM_Base_SetConfig+0xf4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <TIM_Base_SetConfig+0xce>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a0b      	ldr	r2, [pc, #44]	; (8006894 <TIM_Base_SetConfig+0xf8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d103      	bne.n	8006872 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	615a      	str	r2, [r3, #20]
}
 8006878:	46c0      	nop			; (mov r8, r8)
 800687a:	46bd      	mov	sp, r7
 800687c:	b004      	add	sp, #16
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40012c00 	.word	0x40012c00
 8006884:	40000400 	.word	0x40000400
 8006888:	40002000 	.word	0x40002000
 800688c:	40014000 	.word	0x40014000
 8006890:	40014400 	.word	0x40014400
 8006894:	40014800 	.word	0x40014800
 8006898:	fffffcff 	.word	0xfffffcff

0800689c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	2201      	movs	r2, #1
 80068ac:	4393      	bics	r3, r2
 80068ae:	001a      	movs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2270      	movs	r2, #112	; 0x70
 80068ca:	4393      	bics	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2203      	movs	r2, #3
 80068d2:	4393      	bics	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2202      	movs	r2, #2
 80068e4:	4393      	bics	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a27      	ldr	r2, [pc, #156]	; (8006994 <TIM_OC1_SetConfig+0xf8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00b      	beq.n	8006912 <TIM_OC1_SetConfig+0x76>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a26      	ldr	r2, [pc, #152]	; (8006998 <TIM_OC1_SetConfig+0xfc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d007      	beq.n	8006912 <TIM_OC1_SetConfig+0x76>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a25      	ldr	r2, [pc, #148]	; (800699c <TIM_OC1_SetConfig+0x100>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d003      	beq.n	8006912 <TIM_OC1_SetConfig+0x76>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a24      	ldr	r2, [pc, #144]	; (80069a0 <TIM_OC1_SetConfig+0x104>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d10c      	bne.n	800692c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2208      	movs	r2, #8
 8006916:	4393      	bics	r3, r2
 8006918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	4313      	orrs	r3, r2
 8006922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2204      	movs	r2, #4
 8006928:	4393      	bics	r3, r2
 800692a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a19      	ldr	r2, [pc, #100]	; (8006994 <TIM_OC1_SetConfig+0xf8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00b      	beq.n	800694c <TIM_OC1_SetConfig+0xb0>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a18      	ldr	r2, [pc, #96]	; (8006998 <TIM_OC1_SetConfig+0xfc>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d007      	beq.n	800694c <TIM_OC1_SetConfig+0xb0>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a17      	ldr	r2, [pc, #92]	; (800699c <TIM_OC1_SetConfig+0x100>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_OC1_SetConfig+0xb0>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a16      	ldr	r2, [pc, #88]	; (80069a0 <TIM_OC1_SetConfig+0x104>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d111      	bne.n	8006970 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	4a15      	ldr	r2, [pc, #84]	; (80069a4 <TIM_OC1_SetConfig+0x108>)
 8006950:	4013      	ands	r3, r2
 8006952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	4a14      	ldr	r2, [pc, #80]	; (80069a8 <TIM_OC1_SetConfig+0x10c>)
 8006958:	4013      	ands	r3, r2
 800695a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	46bd      	mov	sp, r7
 800698e:	b006      	add	sp, #24
 8006990:	bd80      	pop	{r7, pc}
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	40012c00 	.word	0x40012c00
 8006998:	40014000 	.word	0x40014000
 800699c:	40014400 	.word	0x40014400
 80069a0:	40014800 	.word	0x40014800
 80069a4:	fffffeff 	.word	0xfffffeff
 80069a8:	fffffdff 	.word	0xfffffdff

080069ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	2210      	movs	r2, #16
 80069bc:	4393      	bics	r3, r2
 80069be:	001a      	movs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4a2e      	ldr	r2, [pc, #184]	; (8006a94 <TIM_OC2_SetConfig+0xe8>)
 80069da:	4013      	ands	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a2d      	ldr	r2, [pc, #180]	; (8006a98 <TIM_OC2_SetConfig+0xec>)
 80069e2:	4013      	ands	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2220      	movs	r2, #32
 80069f6:	4393      	bics	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a24      	ldr	r2, [pc, #144]	; (8006a9c <TIM_OC2_SetConfig+0xf0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d10d      	bne.n	8006a2a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2280      	movs	r2, #128	; 0x80
 8006a12:	4393      	bics	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2240      	movs	r2, #64	; 0x40
 8006a26:	4393      	bics	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a1b      	ldr	r2, [pc, #108]	; (8006a9c <TIM_OC2_SetConfig+0xf0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00b      	beq.n	8006a4a <TIM_OC2_SetConfig+0x9e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1a      	ldr	r2, [pc, #104]	; (8006aa0 <TIM_OC2_SetConfig+0xf4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d007      	beq.n	8006a4a <TIM_OC2_SetConfig+0x9e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a19      	ldr	r2, [pc, #100]	; (8006aa4 <TIM_OC2_SetConfig+0xf8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d003      	beq.n	8006a4a <TIM_OC2_SetConfig+0x9e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <TIM_OC2_SetConfig+0xfc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d113      	bne.n	8006a72 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4a17      	ldr	r2, [pc, #92]	; (8006aac <TIM_OC2_SetConfig+0x100>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <TIM_OC2_SetConfig+0x104>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	621a      	str	r2, [r3, #32]
}
 8006a8c:	46c0      	nop			; (mov r8, r8)
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b006      	add	sp, #24
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	ffff8fff 	.word	0xffff8fff
 8006a98:	fffffcff 	.word	0xfffffcff
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40014000 	.word	0x40014000
 8006aa4:	40014400 	.word	0x40014400
 8006aa8:	40014800 	.word	0x40014800
 8006aac:	fffffbff 	.word	0xfffffbff
 8006ab0:	fffff7ff 	.word	0xfffff7ff

08006ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	4a35      	ldr	r2, [pc, #212]	; (8006b98 <TIM_OC3_SetConfig+0xe4>)
 8006ac4:	401a      	ands	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2270      	movs	r2, #112	; 0x70
 8006ae0:	4393      	bics	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	4393      	bics	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	4a28      	ldr	r2, [pc, #160]	; (8006b9c <TIM_OC3_SetConfig+0xe8>)
 8006afa:	4013      	ands	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a24      	ldr	r2, [pc, #144]	; (8006ba0 <TIM_OC3_SetConfig+0xec>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d10d      	bne.n	8006b2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	4a23      	ldr	r2, [pc, #140]	; (8006ba4 <TIM_OC3_SetConfig+0xf0>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	4a1f      	ldr	r2, [pc, #124]	; (8006ba8 <TIM_OC3_SetConfig+0xf4>)
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a1b      	ldr	r2, [pc, #108]	; (8006ba0 <TIM_OC3_SetConfig+0xec>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00b      	beq.n	8006b4e <TIM_OC3_SetConfig+0x9a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a1c      	ldr	r2, [pc, #112]	; (8006bac <TIM_OC3_SetConfig+0xf8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d007      	beq.n	8006b4e <TIM_OC3_SetConfig+0x9a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a1b      	ldr	r2, [pc, #108]	; (8006bb0 <TIM_OC3_SetConfig+0xfc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d003      	beq.n	8006b4e <TIM_OC3_SetConfig+0x9a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <TIM_OC3_SetConfig+0x100>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d113      	bne.n	8006b76 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4a19      	ldr	r2, [pc, #100]	; (8006bb8 <TIM_OC3_SetConfig+0x104>)
 8006b52:	4013      	ands	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <TIM_OC3_SetConfig+0x108>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	621a      	str	r2, [r3, #32]
}
 8006b90:	46c0      	nop			; (mov r8, r8)
 8006b92:	46bd      	mov	sp, r7
 8006b94:	b006      	add	sp, #24
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	fffffeff 	.word	0xfffffeff
 8006b9c:	fffffdff 	.word	0xfffffdff
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	fffff7ff 	.word	0xfffff7ff
 8006ba8:	fffffbff 	.word	0xfffffbff
 8006bac:	40014000 	.word	0x40014000
 8006bb0:	40014400 	.word	0x40014400
 8006bb4:	40014800 	.word	0x40014800
 8006bb8:	ffffefff 	.word	0xffffefff
 8006bbc:	ffffdfff 	.word	0xffffdfff

08006bc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	4a28      	ldr	r2, [pc, #160]	; (8006c70 <TIM_OC4_SetConfig+0xb0>)
 8006bd0:	401a      	ands	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4a22      	ldr	r2, [pc, #136]	; (8006c74 <TIM_OC4_SetConfig+0xb4>)
 8006bec:	4013      	ands	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4a21      	ldr	r2, [pc, #132]	; (8006c78 <TIM_OC4_SetConfig+0xb8>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	4a1d      	ldr	r2, [pc, #116]	; (8006c7c <TIM_OC4_SetConfig+0xbc>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	031b      	lsls	r3, r3, #12
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a19      	ldr	r2, [pc, #100]	; (8006c80 <TIM_OC4_SetConfig+0xc0>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <TIM_OC4_SetConfig+0x78>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a18      	ldr	r2, [pc, #96]	; (8006c84 <TIM_OC4_SetConfig+0xc4>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d007      	beq.n	8006c38 <TIM_OC4_SetConfig+0x78>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a17      	ldr	r2, [pc, #92]	; (8006c88 <TIM_OC4_SetConfig+0xc8>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_OC4_SetConfig+0x78>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a16      	ldr	r2, [pc, #88]	; (8006c8c <TIM_OC4_SetConfig+0xcc>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d109      	bne.n	8006c4c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	4a15      	ldr	r2, [pc, #84]	; (8006c90 <TIM_OC4_SetConfig+0xd0>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	019b      	lsls	r3, r3, #6
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	621a      	str	r2, [r3, #32]
}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	b006      	add	sp, #24
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	46c0      	nop			; (mov r8, r8)
 8006c70:	ffffefff 	.word	0xffffefff
 8006c74:	ffff8fff 	.word	0xffff8fff
 8006c78:	fffffcff 	.word	0xfffffcff
 8006c7c:	ffffdfff 	.word	0xffffdfff
 8006c80:	40012c00 	.word	0x40012c00
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800
 8006c90:	ffffbfff 	.word	0xffffbfff

08006c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	2201      	movs	r2, #1
 8006cac:	4393      	bics	r3, r2
 8006cae:	001a      	movs	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	22f0      	movs	r2, #240	; 0xf0
 8006cbe:	4393      	bics	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	220a      	movs	r2, #10
 8006cd0:	4393      	bics	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	621a      	str	r2, [r3, #32]
}
 8006ce8:	46c0      	nop			; (mov r8, r8)
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b006      	add	sp, #24
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	2210      	movs	r2, #16
 8006d02:	4393      	bics	r3, r2
 8006d04:	001a      	movs	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	4a0d      	ldr	r2, [pc, #52]	; (8006d50 <TIM_TI2_ConfigInputStage+0x60>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	031b      	lsls	r3, r3, #12
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	22a0      	movs	r2, #160	; 0xa0
 8006d2c:	4393      	bics	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	621a      	str	r2, [r3, #32]
}
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	b006      	add	sp, #24
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	ffff0fff 	.word	0xffff0fff

08006d54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2270      	movs	r2, #112	; 0x70
 8006d68:	4393      	bics	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	2207      	movs	r2, #7
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	609a      	str	r2, [r3, #8]
}
 8006d7e:	46c0      	nop			; (mov r8, r8)
 8006d80:	46bd      	mov	sp, r7
 8006d82:	b004      	add	sp, #16
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	4a09      	ldr	r2, [pc, #36]	; (8006dc4 <TIM_ETR_SetConfig+0x3c>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	021a      	lsls	r2, r3, #8
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	431a      	orrs	r2, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	609a      	str	r2, [r3, #8]
}
 8006dbc:	46c0      	nop			; (mov r8, r8)
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	b006      	add	sp, #24
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	ffff00ff 	.word	0xffff00ff

08006dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	223c      	movs	r2, #60	; 0x3c
 8006dd6:	5c9b      	ldrb	r3, [r3, r2]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e047      	b.n	8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	223c      	movs	r2, #60	; 0x3c
 8006de4:	2101      	movs	r1, #1
 8006de6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	223d      	movs	r2, #61	; 0x3d
 8006dec:	2102      	movs	r1, #2
 8006dee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2270      	movs	r2, #112	; 0x70
 8006e04:	4393      	bics	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a16      	ldr	r2, [pc, #88]	; (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d00f      	beq.n	8006e44 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	2380      	movs	r3, #128	; 0x80
 8006e2a:	05db      	lsls	r3, r3, #23
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d009      	beq.n	8006e44 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a11      	ldr	r2, [pc, #68]	; (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d004      	beq.n	8006e44 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a10      	ldr	r2, [pc, #64]	; (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d10c      	bne.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2280      	movs	r2, #128	; 0x80
 8006e48:	4393      	bics	r3, r2
 8006e4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	223d      	movs	r2, #61	; 0x3d
 8006e62:	2101      	movs	r1, #1
 8006e64:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	223c      	movs	r2, #60	; 0x3c
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	0018      	movs	r0, r3
 8006e72:	46bd      	mov	sp, r7
 8006e74:	b004      	add	sp, #16
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40012c00 	.word	0x40012c00
 8006e7c:	40000400 	.word	0x40000400
 8006e80:	40014000 	.word	0x40014000

08006e84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e044      	b.n	8006f20 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d107      	bne.n	8006eae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2274      	movs	r2, #116	; 0x74
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f7fd f86b 	bl	8003f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2224      	movs	r2, #36	; 0x24
 8006eb2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	438a      	bics	r2, r1
 8006ec2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f000 fbce 	bl	8007668 <UART_SetConfig>
 8006ecc:	0003      	movs	r3, r0
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e024      	b.n	8006f20 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f000 fd01 	bl	80078e8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	490d      	ldr	r1, [pc, #52]	; (8006f28 <HAL_UART_Init+0xa4>)
 8006ef2:	400a      	ands	r2, r1
 8006ef4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	212a      	movs	r1, #42	; 0x2a
 8006f02:	438a      	bics	r2, r1
 8006f04:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2101      	movs	r1, #1
 8006f12:	430a      	orrs	r2, r1
 8006f14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f000 fd99 	bl	8007a50 <UART_CheckIdleState>
 8006f1e:	0003      	movs	r3, r0
}
 8006f20:	0018      	movs	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	b002      	add	sp, #8
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	ffffb7ff 	.word	0xffffb7ff

08006f2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08a      	sub	sp, #40	; 0x28
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	1dbb      	adds	r3, r7, #6
 8006f3a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d000      	beq.n	8006f46 <HAL_UART_Transmit+0x1a>
 8006f44:	e096      	b.n	8007074 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <HAL_UART_Transmit+0x28>
 8006f4c:	1dbb      	adds	r3, r7, #6
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e08e      	b.n	8007076 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	2380      	movs	r3, #128	; 0x80
 8006f5e:	015b      	lsls	r3, r3, #5
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d109      	bne.n	8006f78 <HAL_UART_Transmit+0x4c>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d105      	bne.n	8006f78 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	4013      	ands	r3, r2
 8006f72:	d001      	beq.n	8006f78 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e07e      	b.n	8007076 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2274      	movs	r2, #116	; 0x74
 8006f7c:	5c9b      	ldrb	r3, [r3, r2]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <HAL_UART_Transmit+0x5a>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e077      	b.n	8007076 <HAL_UART_Transmit+0x14a>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2274      	movs	r2, #116	; 0x74
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2280      	movs	r2, #128	; 0x80
 8006f92:	2100      	movs	r1, #0
 8006f94:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2221      	movs	r2, #33	; 0x21
 8006f9a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f9c:	f7fd f9f0 	bl	8004380 <HAL_GetTick>
 8006fa0:	0003      	movs	r3, r0
 8006fa2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	1dba      	adds	r2, r7, #6
 8006fa8:	2150      	movs	r1, #80	; 0x50
 8006faa:	8812      	ldrh	r2, [r2, #0]
 8006fac:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1dba      	adds	r2, r7, #6
 8006fb2:	2152      	movs	r1, #82	; 0x52
 8006fb4:	8812      	ldrh	r2, [r2, #0]
 8006fb6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	2380      	movs	r3, #128	; 0x80
 8006fbe:	015b      	lsls	r3, r3, #5
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d108      	bne.n	8006fd6 <HAL_UART_Transmit+0xaa>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d104      	bne.n	8006fd6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	e003      	b.n	8006fde <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2274      	movs	r2, #116	; 0x74
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006fe6:	e02d      	b.n	8007044 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	0013      	movs	r3, r2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	f000 fd73 	bl	8007ae0 <UART_WaitOnFlagUntilTimeout>
 8006ffa:	1e03      	subs	r3, r0, #0
 8006ffc:	d001      	beq.n	8007002 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e039      	b.n	8007076 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10b      	bne.n	8007020 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	881a      	ldrh	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	05d2      	lsls	r2, r2, #23
 8007012:	0dd2      	lsrs	r2, r2, #23
 8007014:	b292      	uxth	r2, r2
 8007016:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	3302      	adds	r3, #2
 800701c:	61bb      	str	r3, [r7, #24]
 800701e:	e008      	b.n	8007032 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	781a      	ldrb	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	b292      	uxth	r2, r2
 800702a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	3301      	adds	r3, #1
 8007030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2252      	movs	r2, #82	; 0x52
 8007036:	5a9b      	ldrh	r3, [r3, r2]
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	b299      	uxth	r1, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2252      	movs	r2, #82	; 0x52
 8007042:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2252      	movs	r2, #82	; 0x52
 8007048:	5a9b      	ldrh	r3, [r3, r2]
 800704a:	b29b      	uxth	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1cb      	bne.n	8006fe8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	0013      	movs	r3, r2
 800705a:	2200      	movs	r2, #0
 800705c:	2140      	movs	r1, #64	; 0x40
 800705e:	f000 fd3f 	bl	8007ae0 <UART_WaitOnFlagUntilTimeout>
 8007062:	1e03      	subs	r3, r0, #0
 8007064:	d001      	beq.n	800706a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e005      	b.n	8007076 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	e000      	b.n	8007076 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007074:	2302      	movs	r3, #2
  }
}
 8007076:	0018      	movs	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	b008      	add	sp, #32
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007080:	b590      	push	{r4, r7, lr}
 8007082:	b0ab      	sub	sp, #172	; 0xac
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	22a4      	movs	r2, #164	; 0xa4
 8007090:	18b9      	adds	r1, r7, r2
 8007092:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	20a0      	movs	r0, #160	; 0xa0
 800709c:	1839      	adds	r1, r7, r0
 800709e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	219c      	movs	r1, #156	; 0x9c
 80070a8:	1879      	adds	r1, r7, r1
 80070aa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070ac:	0011      	movs	r1, r2
 80070ae:	18bb      	adds	r3, r7, r2
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a99      	ldr	r2, [pc, #612]	; (8007318 <HAL_UART_IRQHandler+0x298>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	2298      	movs	r2, #152	; 0x98
 80070b8:	18bc      	adds	r4, r7, r2
 80070ba:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80070bc:	18bb      	adds	r3, r7, r2
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d114      	bne.n	80070ee <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070c4:	187b      	adds	r3, r7, r1
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2220      	movs	r2, #32
 80070ca:	4013      	ands	r3, r2
 80070cc:	d00f      	beq.n	80070ee <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070ce:	183b      	adds	r3, r7, r0
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2220      	movs	r2, #32
 80070d4:	4013      	ands	r3, r2
 80070d6:	d00a      	beq.n	80070ee <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d100      	bne.n	80070e2 <HAL_UART_IRQHandler+0x62>
 80070e0:	e296      	b.n	8007610 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	0010      	movs	r0, r2
 80070ea:	4798      	blx	r3
      }
      return;
 80070ec:	e290      	b.n	8007610 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070ee:	2398      	movs	r3, #152	; 0x98
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d100      	bne.n	80070fa <HAL_UART_IRQHandler+0x7a>
 80070f8:	e114      	b.n	8007324 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070fa:	239c      	movs	r3, #156	; 0x9c
 80070fc:	18fb      	adds	r3, r7, r3
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2201      	movs	r2, #1
 8007102:	4013      	ands	r3, r2
 8007104:	d106      	bne.n	8007114 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007106:	23a0      	movs	r3, #160	; 0xa0
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a83      	ldr	r2, [pc, #524]	; (800731c <HAL_UART_IRQHandler+0x29c>)
 800710e:	4013      	ands	r3, r2
 8007110:	d100      	bne.n	8007114 <HAL_UART_IRQHandler+0x94>
 8007112:	e107      	b.n	8007324 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007114:	23a4      	movs	r3, #164	; 0xa4
 8007116:	18fb      	adds	r3, r7, r3
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2201      	movs	r2, #1
 800711c:	4013      	ands	r3, r2
 800711e:	d012      	beq.n	8007146 <HAL_UART_IRQHandler+0xc6>
 8007120:	23a0      	movs	r3, #160	; 0xa0
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	2380      	movs	r3, #128	; 0x80
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	4013      	ands	r3, r2
 800712c:	d00b      	beq.n	8007146 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2201      	movs	r2, #1
 8007134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2280      	movs	r2, #128	; 0x80
 800713a:	589b      	ldr	r3, [r3, r2]
 800713c:	2201      	movs	r2, #1
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2180      	movs	r1, #128	; 0x80
 8007144:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007146:	23a4      	movs	r3, #164	; 0xa4
 8007148:	18fb      	adds	r3, r7, r3
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2202      	movs	r2, #2
 800714e:	4013      	ands	r3, r2
 8007150:	d011      	beq.n	8007176 <HAL_UART_IRQHandler+0xf6>
 8007152:	239c      	movs	r3, #156	; 0x9c
 8007154:	18fb      	adds	r3, r7, r3
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2201      	movs	r2, #1
 800715a:	4013      	ands	r3, r2
 800715c:	d00b      	beq.n	8007176 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2202      	movs	r2, #2
 8007164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2280      	movs	r2, #128	; 0x80
 800716a:	589b      	ldr	r3, [r3, r2]
 800716c:	2204      	movs	r2, #4
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2180      	movs	r1, #128	; 0x80
 8007174:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007176:	23a4      	movs	r3, #164	; 0xa4
 8007178:	18fb      	adds	r3, r7, r3
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2204      	movs	r2, #4
 800717e:	4013      	ands	r3, r2
 8007180:	d011      	beq.n	80071a6 <HAL_UART_IRQHandler+0x126>
 8007182:	239c      	movs	r3, #156	; 0x9c
 8007184:	18fb      	adds	r3, r7, r3
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2201      	movs	r2, #1
 800718a:	4013      	ands	r3, r2
 800718c:	d00b      	beq.n	80071a6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2204      	movs	r2, #4
 8007194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2280      	movs	r2, #128	; 0x80
 800719a:	589b      	ldr	r3, [r3, r2]
 800719c:	2202      	movs	r2, #2
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2180      	movs	r1, #128	; 0x80
 80071a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071a6:	23a4      	movs	r3, #164	; 0xa4
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2208      	movs	r2, #8
 80071ae:	4013      	ands	r3, r2
 80071b0:	d017      	beq.n	80071e2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071b2:	23a0      	movs	r3, #160	; 0xa0
 80071b4:	18fb      	adds	r3, r7, r3
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2220      	movs	r2, #32
 80071ba:	4013      	ands	r3, r2
 80071bc:	d105      	bne.n	80071ca <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071be:	239c      	movs	r3, #156	; 0x9c
 80071c0:	18fb      	adds	r3, r7, r3
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2201      	movs	r2, #1
 80071c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071c8:	d00b      	beq.n	80071e2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2208      	movs	r2, #8
 80071d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2280      	movs	r2, #128	; 0x80
 80071d6:	589b      	ldr	r3, [r3, r2]
 80071d8:	2208      	movs	r2, #8
 80071da:	431a      	orrs	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2180      	movs	r1, #128	; 0x80
 80071e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071e2:	23a4      	movs	r3, #164	; 0xa4
 80071e4:	18fb      	adds	r3, r7, r3
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	2380      	movs	r3, #128	; 0x80
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	4013      	ands	r3, r2
 80071ee:	d013      	beq.n	8007218 <HAL_UART_IRQHandler+0x198>
 80071f0:	23a0      	movs	r3, #160	; 0xa0
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	2380      	movs	r3, #128	; 0x80
 80071f8:	04db      	lsls	r3, r3, #19
 80071fa:	4013      	ands	r3, r2
 80071fc:	d00c      	beq.n	8007218 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2280      	movs	r2, #128	; 0x80
 8007204:	0112      	lsls	r2, r2, #4
 8007206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2280      	movs	r2, #128	; 0x80
 800720c:	589b      	ldr	r3, [r3, r2]
 800720e:	2220      	movs	r2, #32
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2180      	movs	r1, #128	; 0x80
 8007216:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2280      	movs	r2, #128	; 0x80
 800721c:	589b      	ldr	r3, [r3, r2]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d100      	bne.n	8007224 <HAL_UART_IRQHandler+0x1a4>
 8007222:	e1f7      	b.n	8007614 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007224:	23a4      	movs	r3, #164	; 0xa4
 8007226:	18fb      	adds	r3, r7, r3
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2220      	movs	r2, #32
 800722c:	4013      	ands	r3, r2
 800722e:	d00e      	beq.n	800724e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007230:	23a0      	movs	r3, #160	; 0xa0
 8007232:	18fb      	adds	r3, r7, r3
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2220      	movs	r2, #32
 8007238:	4013      	ands	r3, r2
 800723a:	d008      	beq.n	800724e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	0010      	movs	r0, r2
 800724c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2280      	movs	r2, #128	; 0x80
 8007252:	589b      	ldr	r3, [r3, r2]
 8007254:	2194      	movs	r1, #148	; 0x94
 8007256:	187a      	adds	r2, r7, r1
 8007258:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	2240      	movs	r2, #64	; 0x40
 8007262:	4013      	ands	r3, r2
 8007264:	2b40      	cmp	r3, #64	; 0x40
 8007266:	d004      	beq.n	8007272 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007268:	187b      	adds	r3, r7, r1
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2228      	movs	r2, #40	; 0x28
 800726e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007270:	d047      	beq.n	8007302 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	0018      	movs	r0, r3
 8007276:	f000 fcf7 	bl	8007c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2240      	movs	r2, #64	; 0x40
 8007282:	4013      	ands	r3, r2
 8007284:	2b40      	cmp	r3, #64	; 0x40
 8007286:	d137      	bne.n	80072f8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007288:	f3ef 8310 	mrs	r3, PRIMASK
 800728c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800728e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007290:	2090      	movs	r0, #144	; 0x90
 8007292:	183a      	adds	r2, r7, r0
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	2301      	movs	r3, #1
 8007298:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800729a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729c:	f383 8810 	msr	PRIMASK, r3
}
 80072a0:	46c0      	nop			; (mov r8, r8)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2140      	movs	r1, #64	; 0x40
 80072ae:	438a      	bics	r2, r1
 80072b0:	609a      	str	r2, [r3, #8]
 80072b2:	183b      	adds	r3, r7, r0
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072ba:	f383 8810 	msr	PRIMASK, r3
}
 80072be:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d012      	beq.n	80072ee <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072cc:	4a14      	ldr	r2, [pc, #80]	; (8007320 <HAL_UART_IRQHandler+0x2a0>)
 80072ce:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d4:	0018      	movs	r0, r3
 80072d6:	f7fd f9df 	bl	8004698 <HAL_DMA_Abort_IT>
 80072da:	1e03      	subs	r3, r0, #0
 80072dc:	d01a      	beq.n	8007314 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e8:	0018      	movs	r0, r3
 80072ea:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ec:	e012      	b.n	8007314 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	0018      	movs	r0, r3
 80072f2:	f000 f9a5 	bl	8007640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f6:	e00d      	b.n	8007314 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	0018      	movs	r0, r3
 80072fc:	f000 f9a0 	bl	8007640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007300:	e008      	b.n	8007314 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	0018      	movs	r0, r3
 8007306:	f000 f99b 	bl	8007640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2280      	movs	r2, #128	; 0x80
 800730e:	2100      	movs	r1, #0
 8007310:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007312:	e17f      	b.n	8007614 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007314:	46c0      	nop			; (mov r8, r8)
    return;
 8007316:	e17d      	b.n	8007614 <HAL_UART_IRQHandler+0x594>
 8007318:	0000080f 	.word	0x0000080f
 800731c:	04000120 	.word	0x04000120
 8007320:	08007d2d 	.word	0x08007d2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007328:	2b01      	cmp	r3, #1
 800732a:	d000      	beq.n	800732e <HAL_UART_IRQHandler+0x2ae>
 800732c:	e131      	b.n	8007592 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800732e:	23a4      	movs	r3, #164	; 0xa4
 8007330:	18fb      	adds	r3, r7, r3
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2210      	movs	r2, #16
 8007336:	4013      	ands	r3, r2
 8007338:	d100      	bne.n	800733c <HAL_UART_IRQHandler+0x2bc>
 800733a:	e12a      	b.n	8007592 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800733c:	23a0      	movs	r3, #160	; 0xa0
 800733e:	18fb      	adds	r3, r7, r3
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2210      	movs	r2, #16
 8007344:	4013      	ands	r3, r2
 8007346:	d100      	bne.n	800734a <HAL_UART_IRQHandler+0x2ca>
 8007348:	e123      	b.n	8007592 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2210      	movs	r2, #16
 8007350:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	2240      	movs	r2, #64	; 0x40
 800735a:	4013      	ands	r3, r2
 800735c:	2b40      	cmp	r3, #64	; 0x40
 800735e:	d000      	beq.n	8007362 <HAL_UART_IRQHandler+0x2e2>
 8007360:	e09b      	b.n	800749a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	217e      	movs	r1, #126	; 0x7e
 800736c:	187b      	adds	r3, r7, r1
 800736e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007370:	187b      	adds	r3, r7, r1
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d100      	bne.n	800737a <HAL_UART_IRQHandler+0x2fa>
 8007378:	e14e      	b.n	8007618 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2258      	movs	r2, #88	; 0x58
 800737e:	5a9b      	ldrh	r3, [r3, r2]
 8007380:	187a      	adds	r2, r7, r1
 8007382:	8812      	ldrh	r2, [r2, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d300      	bcc.n	800738a <HAL_UART_IRQHandler+0x30a>
 8007388:	e146      	b.n	8007618 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	187a      	adds	r2, r7, r1
 800738e:	215a      	movs	r1, #90	; 0x5a
 8007390:	8812      	ldrh	r2, [r2, #0]
 8007392:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	2b20      	cmp	r3, #32
 800739c:	d06e      	beq.n	800747c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800739e:	f3ef 8310 	mrs	r3, PRIMASK
 80073a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80073a8:	2301      	movs	r3, #1
 80073aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ae:	f383 8810 	msr	PRIMASK, r3
}
 80073b2:	46c0      	nop			; (mov r8, r8)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	499a      	ldr	r1, [pc, #616]	; (8007628 <HAL_UART_IRQHandler+0x5a8>)
 80073c0:	400a      	ands	r2, r1
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ca:	f383 8810 	msr	PRIMASK, r3
}
 80073ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073d0:	f3ef 8310 	mrs	r3, PRIMASK
 80073d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80073d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d8:	677b      	str	r3, [r7, #116]	; 0x74
 80073da:	2301      	movs	r3, #1
 80073dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e0:	f383 8810 	msr	PRIMASK, r3
}
 80073e4:	46c0      	nop			; (mov r8, r8)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2101      	movs	r1, #1
 80073f2:	438a      	bics	r2, r1
 80073f4:	609a      	str	r2, [r3, #8]
 80073f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fc:	f383 8810 	msr	PRIMASK, r3
}
 8007400:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007402:	f3ef 8310 	mrs	r3, PRIMASK
 8007406:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007408:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800740a:	673b      	str	r3, [r7, #112]	; 0x70
 800740c:	2301      	movs	r3, #1
 800740e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007412:	f383 8810 	msr	PRIMASK, r3
}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2140      	movs	r1, #64	; 0x40
 8007424:	438a      	bics	r2, r1
 8007426:	609a      	str	r2, [r3, #8]
 8007428:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800742a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800742c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800742e:	f383 8810 	msr	PRIMASK, r3
}
 8007432:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2220      	movs	r2, #32
 8007438:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007440:	f3ef 8310 	mrs	r3, PRIMASK
 8007444:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007446:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007448:	66fb      	str	r3, [r7, #108]	; 0x6c
 800744a:	2301      	movs	r3, #1
 800744c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800744e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007450:	f383 8810 	msr	PRIMASK, r3
}
 8007454:	46c0      	nop			; (mov r8, r8)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2110      	movs	r1, #16
 8007462:	438a      	bics	r2, r1
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007468:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800746a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800746c:	f383 8810 	msr	PRIMASK, r3
}
 8007470:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007476:	0018      	movs	r0, r3
 8007478:	f7fd f8d6 	bl	8004628 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2258      	movs	r2, #88	; 0x58
 8007480:	5a9a      	ldrh	r2, [r3, r2]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	215a      	movs	r1, #90	; 0x5a
 8007486:	5a5b      	ldrh	r3, [r3, r1]
 8007488:	b29b      	uxth	r3, r3
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	b29a      	uxth	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	0011      	movs	r1, r2
 8007492:	0018      	movs	r0, r3
 8007494:	f000 f8dc 	bl	8007650 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007498:	e0be      	b.n	8007618 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2258      	movs	r2, #88	; 0x58
 800749e:	5a99      	ldrh	r1, [r3, r2]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	225a      	movs	r2, #90	; 0x5a
 80074a4:	5a9b      	ldrh	r3, [r3, r2]
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	208e      	movs	r0, #142	; 0x8e
 80074aa:	183b      	adds	r3, r7, r0
 80074ac:	1a8a      	subs	r2, r1, r2
 80074ae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	225a      	movs	r2, #90	; 0x5a
 80074b4:	5a9b      	ldrh	r3, [r3, r2]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d100      	bne.n	80074be <HAL_UART_IRQHandler+0x43e>
 80074bc:	e0ae      	b.n	800761c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80074be:	183b      	adds	r3, r7, r0
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d100      	bne.n	80074c8 <HAL_UART_IRQHandler+0x448>
 80074c6:	e0a9      	b.n	800761c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c8:	f3ef 8310 	mrs	r3, PRIMASK
 80074cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80074ce:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d0:	2488      	movs	r4, #136	; 0x88
 80074d2:	193a      	adds	r2, r7, r4
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	2301      	movs	r3, #1
 80074d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f383 8810 	msr	PRIMASK, r3
}
 80074e0:	46c0      	nop			; (mov r8, r8)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	494f      	ldr	r1, [pc, #316]	; (800762c <HAL_UART_IRQHandler+0x5ac>)
 80074ee:	400a      	ands	r2, r1
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	193b      	adds	r3, r7, r4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f383 8810 	msr	PRIMASK, r3
}
 80074fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007500:	f3ef 8310 	mrs	r3, PRIMASK
 8007504:	61bb      	str	r3, [r7, #24]
  return(result);
 8007506:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007508:	2484      	movs	r4, #132	; 0x84
 800750a:	193a      	adds	r2, r7, r4
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	2301      	movs	r3, #1
 8007510:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	f383 8810 	msr	PRIMASK, r3
}
 8007518:	46c0      	nop			; (mov r8, r8)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2101      	movs	r1, #1
 8007526:	438a      	bics	r2, r1
 8007528:	609a      	str	r2, [r3, #8]
 800752a:	193b      	adds	r3, r7, r4
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	f383 8810 	msr	PRIMASK, r3
}
 8007536:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800754a:	f3ef 8310 	mrs	r3, PRIMASK
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007552:	2480      	movs	r4, #128	; 0x80
 8007554:	193a      	adds	r2, r7, r4
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	2301      	movs	r3, #1
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	f383 8810 	msr	PRIMASK, r3
}
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2110      	movs	r1, #16
 8007570:	438a      	bics	r2, r1
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	193b      	adds	r3, r7, r4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	f383 8810 	msr	PRIMASK, r3
}
 8007580:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007582:	183b      	adds	r3, r7, r0
 8007584:	881a      	ldrh	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	0011      	movs	r1, r2
 800758a:	0018      	movs	r0, r3
 800758c:	f000 f860 	bl	8007650 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007590:	e044      	b.n	800761c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007592:	23a4      	movs	r3, #164	; 0xa4
 8007594:	18fb      	adds	r3, r7, r3
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	035b      	lsls	r3, r3, #13
 800759c:	4013      	ands	r3, r2
 800759e:	d010      	beq.n	80075c2 <HAL_UART_IRQHandler+0x542>
 80075a0:	239c      	movs	r3, #156	; 0x9c
 80075a2:	18fb      	adds	r3, r7, r3
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	03db      	lsls	r3, r3, #15
 80075aa:	4013      	ands	r3, r2
 80075ac:	d009      	beq.n	80075c2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2280      	movs	r2, #128	; 0x80
 80075b4:	0352      	lsls	r2, r2, #13
 80075b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	0018      	movs	r0, r3
 80075bc:	f000 fbf8 	bl	8007db0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075c0:	e02f      	b.n	8007622 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075c2:	23a4      	movs	r3, #164	; 0xa4
 80075c4:	18fb      	adds	r3, r7, r3
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2280      	movs	r2, #128	; 0x80
 80075ca:	4013      	ands	r3, r2
 80075cc:	d00f      	beq.n	80075ee <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075ce:	23a0      	movs	r3, #160	; 0xa0
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2280      	movs	r2, #128	; 0x80
 80075d6:	4013      	ands	r3, r2
 80075d8:	d009      	beq.n	80075ee <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d01e      	beq.n	8007620 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	0010      	movs	r0, r2
 80075ea:	4798      	blx	r3
    }
    return;
 80075ec:	e018      	b.n	8007620 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075ee:	23a4      	movs	r3, #164	; 0xa4
 80075f0:	18fb      	adds	r3, r7, r3
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2240      	movs	r2, #64	; 0x40
 80075f6:	4013      	ands	r3, r2
 80075f8:	d013      	beq.n	8007622 <HAL_UART_IRQHandler+0x5a2>
 80075fa:	23a0      	movs	r3, #160	; 0xa0
 80075fc:	18fb      	adds	r3, r7, r3
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2240      	movs	r2, #64	; 0x40
 8007602:	4013      	ands	r3, r2
 8007604:	d00d      	beq.n	8007622 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	0018      	movs	r0, r3
 800760a:	f000 fba6 	bl	8007d5a <UART_EndTransmit_IT>
    return;
 800760e:	e008      	b.n	8007622 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007610:	46c0      	nop			; (mov r8, r8)
 8007612:	e006      	b.n	8007622 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007614:	46c0      	nop			; (mov r8, r8)
 8007616:	e004      	b.n	8007622 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007618:	46c0      	nop			; (mov r8, r8)
 800761a:	e002      	b.n	8007622 <HAL_UART_IRQHandler+0x5a2>
      return;
 800761c:	46c0      	nop			; (mov r8, r8)
 800761e:	e000      	b.n	8007622 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007620:	46c0      	nop			; (mov r8, r8)
  }

}
 8007622:	46bd      	mov	sp, r7
 8007624:	b02b      	add	sp, #172	; 0xac
 8007626:	bd90      	pop	{r4, r7, pc}
 8007628:	fffffeff 	.word	0xfffffeff
 800762c:	fffffedf 	.word	0xfffffedf

08007630 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007638:	46c0      	nop			; (mov r8, r8)
 800763a:	46bd      	mov	sp, r7
 800763c:	b002      	add	sp, #8
 800763e:	bd80      	pop	{r7, pc}

08007640 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007648:	46c0      	nop			; (mov r8, r8)
 800764a:	46bd      	mov	sp, r7
 800764c:	b002      	add	sp, #8
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	000a      	movs	r2, r1
 800765a:	1cbb      	adds	r3, r7, #2
 800765c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800765e:	46c0      	nop			; (mov r8, r8)
 8007660:	46bd      	mov	sp, r7
 8007662:	b002      	add	sp, #8
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007670:	231e      	movs	r3, #30
 8007672:	18fb      	adds	r3, r7, r3
 8007674:	2200      	movs	r2, #0
 8007676:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	4313      	orrs	r3, r2
 800768e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a8d      	ldr	r2, [pc, #564]	; (80078cc <UART_SetConfig+0x264>)
 8007698:	4013      	ands	r3, r2
 800769a:	0019      	movs	r1, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	4a88      	ldr	r2, [pc, #544]	; (80078d0 <UART_SetConfig+0x268>)
 80076ae:	4013      	ands	r3, r2
 80076b0:	0019      	movs	r1, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	4a7f      	ldr	r2, [pc, #508]	; (80078d4 <UART_SetConfig+0x26c>)
 80076d6:	4013      	ands	r3, r2
 80076d8:	0019      	movs	r1, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a7b      	ldr	r2, [pc, #492]	; (80078d8 <UART_SetConfig+0x270>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d127      	bne.n	800773e <UART_SetConfig+0xd6>
 80076ee:	4b7b      	ldr	r3, [pc, #492]	; (80078dc <UART_SetConfig+0x274>)
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	2203      	movs	r2, #3
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d00d      	beq.n	8007716 <UART_SetConfig+0xae>
 80076fa:	d81b      	bhi.n	8007734 <UART_SetConfig+0xcc>
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d014      	beq.n	800772a <UART_SetConfig+0xc2>
 8007700:	d818      	bhi.n	8007734 <UART_SetConfig+0xcc>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <UART_SetConfig+0xa4>
 8007706:	2b01      	cmp	r3, #1
 8007708:	d00a      	beq.n	8007720 <UART_SetConfig+0xb8>
 800770a:	e013      	b.n	8007734 <UART_SetConfig+0xcc>
 800770c:	231f      	movs	r3, #31
 800770e:	18fb      	adds	r3, r7, r3
 8007710:	2200      	movs	r2, #0
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	e021      	b.n	800775a <UART_SetConfig+0xf2>
 8007716:	231f      	movs	r3, #31
 8007718:	18fb      	adds	r3, r7, r3
 800771a:	2202      	movs	r2, #2
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	e01c      	b.n	800775a <UART_SetConfig+0xf2>
 8007720:	231f      	movs	r3, #31
 8007722:	18fb      	adds	r3, r7, r3
 8007724:	2204      	movs	r2, #4
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	e017      	b.n	800775a <UART_SetConfig+0xf2>
 800772a:	231f      	movs	r3, #31
 800772c:	18fb      	adds	r3, r7, r3
 800772e:	2208      	movs	r2, #8
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	e012      	b.n	800775a <UART_SetConfig+0xf2>
 8007734:	231f      	movs	r3, #31
 8007736:	18fb      	adds	r3, r7, r3
 8007738:	2210      	movs	r2, #16
 800773a:	701a      	strb	r2, [r3, #0]
 800773c:	e00d      	b.n	800775a <UART_SetConfig+0xf2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a67      	ldr	r2, [pc, #412]	; (80078e0 <UART_SetConfig+0x278>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d104      	bne.n	8007752 <UART_SetConfig+0xea>
 8007748:	231f      	movs	r3, #31
 800774a:	18fb      	adds	r3, r7, r3
 800774c:	2200      	movs	r2, #0
 800774e:	701a      	strb	r2, [r3, #0]
 8007750:	e003      	b.n	800775a <UART_SetConfig+0xf2>
 8007752:	231f      	movs	r3, #31
 8007754:	18fb      	adds	r3, r7, r3
 8007756:	2210      	movs	r2, #16
 8007758:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	69da      	ldr	r2, [r3, #28]
 800775e:	2380      	movs	r3, #128	; 0x80
 8007760:	021b      	lsls	r3, r3, #8
 8007762:	429a      	cmp	r2, r3
 8007764:	d15d      	bne.n	8007822 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8007766:	231f      	movs	r3, #31
 8007768:	18fb      	adds	r3, r7, r3
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2b08      	cmp	r3, #8
 800776e:	d015      	beq.n	800779c <UART_SetConfig+0x134>
 8007770:	dc18      	bgt.n	80077a4 <UART_SetConfig+0x13c>
 8007772:	2b04      	cmp	r3, #4
 8007774:	d00d      	beq.n	8007792 <UART_SetConfig+0x12a>
 8007776:	dc15      	bgt.n	80077a4 <UART_SetConfig+0x13c>
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <UART_SetConfig+0x11a>
 800777c:	2b02      	cmp	r3, #2
 800777e:	d005      	beq.n	800778c <UART_SetConfig+0x124>
 8007780:	e010      	b.n	80077a4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007782:	f7fd feb1 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8007786:	0003      	movs	r3, r0
 8007788:	61bb      	str	r3, [r7, #24]
        break;
 800778a:	e012      	b.n	80077b2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800778c:	4b55      	ldr	r3, [pc, #340]	; (80078e4 <UART_SetConfig+0x27c>)
 800778e:	61bb      	str	r3, [r7, #24]
        break;
 8007790:	e00f      	b.n	80077b2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007792:	f7fd fe3b 	bl	800540c <HAL_RCC_GetSysClockFreq>
 8007796:	0003      	movs	r3, r0
 8007798:	61bb      	str	r3, [r7, #24]
        break;
 800779a:	e00a      	b.n	80077b2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800779c:	2380      	movs	r3, #128	; 0x80
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	61bb      	str	r3, [r7, #24]
        break;
 80077a2:	e006      	b.n	80077b2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077a8:	231e      	movs	r3, #30
 80077aa:	18fb      	adds	r3, r7, r3
 80077ac:	2201      	movs	r2, #1
 80077ae:	701a      	strb	r2, [r3, #0]
        break;
 80077b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d100      	bne.n	80077ba <UART_SetConfig+0x152>
 80077b8:	e07b      	b.n	80078b2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	005a      	lsls	r2, r3, #1
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	18d2      	adds	r2, r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	0019      	movs	r1, r3
 80077cc:	0010      	movs	r0, r2
 80077ce:	f7f8 fcb7 	bl	8000140 <__udivsi3>
 80077d2:	0003      	movs	r3, r0
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2b0f      	cmp	r3, #15
 80077dc:	d91c      	bls.n	8007818 <UART_SetConfig+0x1b0>
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	2380      	movs	r3, #128	; 0x80
 80077e2:	025b      	lsls	r3, r3, #9
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d217      	bcs.n	8007818 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	200e      	movs	r0, #14
 80077ee:	183b      	adds	r3, r7, r0
 80077f0:	210f      	movs	r1, #15
 80077f2:	438a      	bics	r2, r1
 80077f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	085b      	lsrs	r3, r3, #1
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2207      	movs	r2, #7
 80077fe:	4013      	ands	r3, r2
 8007800:	b299      	uxth	r1, r3
 8007802:	183b      	adds	r3, r7, r0
 8007804:	183a      	adds	r2, r7, r0
 8007806:	8812      	ldrh	r2, [r2, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	183a      	adds	r2, r7, r0
 8007812:	8812      	ldrh	r2, [r2, #0]
 8007814:	60da      	str	r2, [r3, #12]
 8007816:	e04c      	b.n	80078b2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8007818:	231e      	movs	r3, #30
 800781a:	18fb      	adds	r3, r7, r3
 800781c:	2201      	movs	r2, #1
 800781e:	701a      	strb	r2, [r3, #0]
 8007820:	e047      	b.n	80078b2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007822:	231f      	movs	r3, #31
 8007824:	18fb      	adds	r3, r7, r3
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b08      	cmp	r3, #8
 800782a:	d015      	beq.n	8007858 <UART_SetConfig+0x1f0>
 800782c:	dc18      	bgt.n	8007860 <UART_SetConfig+0x1f8>
 800782e:	2b04      	cmp	r3, #4
 8007830:	d00d      	beq.n	800784e <UART_SetConfig+0x1e6>
 8007832:	dc15      	bgt.n	8007860 <UART_SetConfig+0x1f8>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <UART_SetConfig+0x1d6>
 8007838:	2b02      	cmp	r3, #2
 800783a:	d005      	beq.n	8007848 <UART_SetConfig+0x1e0>
 800783c:	e010      	b.n	8007860 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800783e:	f7fd fe53 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8007842:	0003      	movs	r3, r0
 8007844:	61bb      	str	r3, [r7, #24]
        break;
 8007846:	e012      	b.n	800786e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007848:	4b26      	ldr	r3, [pc, #152]	; (80078e4 <UART_SetConfig+0x27c>)
 800784a:	61bb      	str	r3, [r7, #24]
        break;
 800784c:	e00f      	b.n	800786e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800784e:	f7fd fddd 	bl	800540c <HAL_RCC_GetSysClockFreq>
 8007852:	0003      	movs	r3, r0
 8007854:	61bb      	str	r3, [r7, #24]
        break;
 8007856:	e00a      	b.n	800786e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007858:	2380      	movs	r3, #128	; 0x80
 800785a:	021b      	lsls	r3, r3, #8
 800785c:	61bb      	str	r3, [r7, #24]
        break;
 800785e:	e006      	b.n	800786e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007864:	231e      	movs	r3, #30
 8007866:	18fb      	adds	r3, r7, r3
 8007868:	2201      	movs	r2, #1
 800786a:	701a      	strb	r2, [r3, #0]
        break;
 800786c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01e      	beq.n	80078b2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	085a      	lsrs	r2, r3, #1
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	18d2      	adds	r2, r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	0019      	movs	r1, r3
 8007884:	0010      	movs	r0, r2
 8007886:	f7f8 fc5b 	bl	8000140 <__udivsi3>
 800788a:	0003      	movs	r3, r0
 800788c:	b29b      	uxth	r3, r3
 800788e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2b0f      	cmp	r3, #15
 8007894:	d909      	bls.n	80078aa <UART_SetConfig+0x242>
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	2380      	movs	r3, #128	; 0x80
 800789a:	025b      	lsls	r3, r3, #9
 800789c:	429a      	cmp	r2, r3
 800789e:	d204      	bcs.n	80078aa <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	60da      	str	r2, [r3, #12]
 80078a8:	e003      	b.n	80078b2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80078aa:	231e      	movs	r3, #30
 80078ac:	18fb      	adds	r3, r7, r3
 80078ae:	2201      	movs	r2, #1
 80078b0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80078be:	231e      	movs	r3, #30
 80078c0:	18fb      	adds	r3, r7, r3
 80078c2:	781b      	ldrb	r3, [r3, #0]
}
 80078c4:	0018      	movs	r0, r3
 80078c6:	46bd      	mov	sp, r7
 80078c8:	b008      	add	sp, #32
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	ffff69f3 	.word	0xffff69f3
 80078d0:	ffffcfff 	.word	0xffffcfff
 80078d4:	fffff4ff 	.word	0xfffff4ff
 80078d8:	40013800 	.word	0x40013800
 80078dc:	40021000 	.word	0x40021000
 80078e0:	40004400 	.word	0x40004400
 80078e4:	007a1200 	.word	0x007a1200

080078e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	2201      	movs	r2, #1
 80078f6:	4013      	ands	r3, r2
 80078f8:	d00b      	beq.n	8007912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	4a4a      	ldr	r2, [pc, #296]	; (8007a2c <UART_AdvFeatureConfig+0x144>)
 8007902:	4013      	ands	r3, r2
 8007904:	0019      	movs	r1, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	2202      	movs	r2, #2
 8007918:	4013      	ands	r3, r2
 800791a:	d00b      	beq.n	8007934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	4a43      	ldr	r2, [pc, #268]	; (8007a30 <UART_AdvFeatureConfig+0x148>)
 8007924:	4013      	ands	r3, r2
 8007926:	0019      	movs	r1, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	2204      	movs	r2, #4
 800793a:	4013      	ands	r3, r2
 800793c:	d00b      	beq.n	8007956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4a3b      	ldr	r2, [pc, #236]	; (8007a34 <UART_AdvFeatureConfig+0x14c>)
 8007946:	4013      	ands	r3, r2
 8007948:	0019      	movs	r1, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795a:	2208      	movs	r2, #8
 800795c:	4013      	ands	r3, r2
 800795e:	d00b      	beq.n	8007978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	4a34      	ldr	r2, [pc, #208]	; (8007a38 <UART_AdvFeatureConfig+0x150>)
 8007968:	4013      	ands	r3, r2
 800796a:	0019      	movs	r1, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	2210      	movs	r2, #16
 800797e:	4013      	ands	r3, r2
 8007980:	d00b      	beq.n	800799a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	4a2c      	ldr	r2, [pc, #176]	; (8007a3c <UART_AdvFeatureConfig+0x154>)
 800798a:	4013      	ands	r3, r2
 800798c:	0019      	movs	r1, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	2220      	movs	r2, #32
 80079a0:	4013      	ands	r3, r2
 80079a2:	d00b      	beq.n	80079bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	4a25      	ldr	r2, [pc, #148]	; (8007a40 <UART_AdvFeatureConfig+0x158>)
 80079ac:	4013      	ands	r3, r2
 80079ae:	0019      	movs	r1, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	2240      	movs	r2, #64	; 0x40
 80079c2:	4013      	ands	r3, r2
 80079c4:	d01d      	beq.n	8007a02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <UART_AdvFeatureConfig+0x15c>)
 80079ce:	4013      	ands	r3, r2
 80079d0:	0019      	movs	r1, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079e2:	2380      	movs	r3, #128	; 0x80
 80079e4:	035b      	lsls	r3, r3, #13
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d10b      	bne.n	8007a02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	4a15      	ldr	r2, [pc, #84]	; (8007a48 <UART_AdvFeatureConfig+0x160>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	0019      	movs	r1, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	2280      	movs	r2, #128	; 0x80
 8007a08:	4013      	ands	r3, r2
 8007a0a:	d00b      	beq.n	8007a24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	4a0e      	ldr	r2, [pc, #56]	; (8007a4c <UART_AdvFeatureConfig+0x164>)
 8007a14:	4013      	ands	r3, r2
 8007a16:	0019      	movs	r1, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	605a      	str	r2, [r3, #4]
  }
}
 8007a24:	46c0      	nop			; (mov r8, r8)
 8007a26:	46bd      	mov	sp, r7
 8007a28:	b002      	add	sp, #8
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	fffdffff 	.word	0xfffdffff
 8007a30:	fffeffff 	.word	0xfffeffff
 8007a34:	fffbffff 	.word	0xfffbffff
 8007a38:	ffff7fff 	.word	0xffff7fff
 8007a3c:	ffffefff 	.word	0xffffefff
 8007a40:	ffffdfff 	.word	0xffffdfff
 8007a44:	ffefffff 	.word	0xffefffff
 8007a48:	ff9fffff 	.word	0xff9fffff
 8007a4c:	fff7ffff 	.word	0xfff7ffff

08007a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2280      	movs	r2, #128	; 0x80
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a60:	f7fc fc8e 	bl	8004380 <HAL_GetTick>
 8007a64:	0003      	movs	r3, r0
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2208      	movs	r2, #8
 8007a70:	4013      	ands	r3, r2
 8007a72:	2b08      	cmp	r3, #8
 8007a74:	d10c      	bne.n	8007a90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2280      	movs	r2, #128	; 0x80
 8007a7a:	0391      	lsls	r1, r2, #14
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	4a17      	ldr	r2, [pc, #92]	; (8007adc <UART_CheckIdleState+0x8c>)
 8007a80:	9200      	str	r2, [sp, #0]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f000 f82c 	bl	8007ae0 <UART_WaitOnFlagUntilTimeout>
 8007a88:	1e03      	subs	r3, r0, #0
 8007a8a:	d001      	beq.n	8007a90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e021      	b.n	8007ad4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2204      	movs	r2, #4
 8007a98:	4013      	ands	r3, r2
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d10c      	bne.n	8007ab8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2280      	movs	r2, #128	; 0x80
 8007aa2:	03d1      	lsls	r1, r2, #15
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	4a0d      	ldr	r2, [pc, #52]	; (8007adc <UART_CheckIdleState+0x8c>)
 8007aa8:	9200      	str	r2, [sp, #0]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f000 f818 	bl	8007ae0 <UART_WaitOnFlagUntilTimeout>
 8007ab0:	1e03      	subs	r3, r0, #0
 8007ab2:	d001      	beq.n	8007ab8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e00d      	b.n	8007ad4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2274      	movs	r2, #116	; 0x74
 8007ace:	2100      	movs	r1, #0
 8007ad0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	b004      	add	sp, #16
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	01ffffff 	.word	0x01ffffff

08007ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b094      	sub	sp, #80	; 0x50
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	1dfb      	adds	r3, r7, #7
 8007aee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af0:	e0a3      	b.n	8007c3a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007af4:	3301      	adds	r3, #1
 8007af6:	d100      	bne.n	8007afa <UART_WaitOnFlagUntilTimeout+0x1a>
 8007af8:	e09f      	b.n	8007c3a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afa:	f7fc fc41 	bl	8004380 <HAL_GetTick>
 8007afe:	0002      	movs	r2, r0
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d13d      	bne.n	8007b8c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b10:	f3ef 8310 	mrs	r3, PRIMASK
 8007b14:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b18:	647b      	str	r3, [r7, #68]	; 0x44
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	f383 8810 	msr	PRIMASK, r3
}
 8007b24:	46c0      	nop			; (mov r8, r8)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	494c      	ldr	r1, [pc, #304]	; (8007c64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007b32:	400a      	ands	r2, r1
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b38:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	f383 8810 	msr	PRIMASK, r3
}
 8007b40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b42:	f3ef 8310 	mrs	r3, PRIMASK
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b52:	f383 8810 	msr	PRIMASK, r3
}
 8007b56:	46c0      	nop			; (mov r8, r8)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2101      	movs	r1, #1
 8007b64:	438a      	bics	r2, r1
 8007b66:	609a      	str	r2, [r3, #8]
 8007b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6e:	f383 8810 	msr	PRIMASK, r3
}
 8007b72:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2220      	movs	r2, #32
 8007b78:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2274      	movs	r2, #116	; 0x74
 8007b84:	2100      	movs	r1, #0
 8007b86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e067      	b.n	8007c5c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2204      	movs	r2, #4
 8007b94:	4013      	ands	r3, r2
 8007b96:	d050      	beq.n	8007c3a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	69da      	ldr	r2, [r3, #28]
 8007b9e:	2380      	movs	r3, #128	; 0x80
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	401a      	ands	r2, r3
 8007ba4:	2380      	movs	r3, #128	; 0x80
 8007ba6:	011b      	lsls	r3, r3, #4
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d146      	bne.n	8007c3a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2280      	movs	r2, #128	; 0x80
 8007bb2:	0112      	lsls	r2, r2, #4
 8007bb4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8007bba:	613b      	str	r3, [r7, #16]
  return(result);
 8007bbc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f383 8810 	msr	PRIMASK, r3
}
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4923      	ldr	r1, [pc, #140]	; (8007c64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007bd8:	400a      	ands	r2, r1
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f383 8810 	msr	PRIMASK, r3
}
 8007be6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be8:	f3ef 8310 	mrs	r3, PRIMASK
 8007bec:	61fb      	str	r3, [r7, #28]
  return(result);
 8007bee:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	f383 8810 	msr	PRIMASK, r3
}
 8007bfc:	46c0      	nop			; (mov r8, r8)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2101      	movs	r1, #1
 8007c0a:	438a      	bics	r2, r1
 8007c0c:	609a      	str	r2, [r3, #8]
 8007c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	f383 8810 	msr	PRIMASK, r3
}
 8007c18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2220      	movs	r2, #32
 8007c24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2280      	movs	r2, #128	; 0x80
 8007c2a:	2120      	movs	r1, #32
 8007c2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2274      	movs	r2, #116	; 0x74
 8007c32:	2100      	movs	r1, #0
 8007c34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e010      	b.n	8007c5c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	4013      	ands	r3, r2
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	425a      	negs	r2, r3
 8007c4a:	4153      	adcs	r3, r2
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	001a      	movs	r2, r3
 8007c50:	1dfb      	adds	r3, r7, #7
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d100      	bne.n	8007c5a <UART_WaitOnFlagUntilTimeout+0x17a>
 8007c58:	e74b      	b.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	b014      	add	sp, #80	; 0x50
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	fffffe5f 	.word	0xfffffe5f

08007c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08e      	sub	sp, #56	; 0x38
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c70:	f3ef 8310 	mrs	r3, PRIMASK
 8007c74:	617b      	str	r3, [r7, #20]
  return(result);
 8007c76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	f383 8810 	msr	PRIMASK, r3
}
 8007c84:	46c0      	nop			; (mov r8, r8)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4925      	ldr	r1, [pc, #148]	; (8007d28 <UART_EndRxTransfer+0xc0>)
 8007c92:	400a      	ands	r2, r1
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	f383 8810 	msr	PRIMASK, r3
}
 8007ca0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ca6:	623b      	str	r3, [r7, #32]
  return(result);
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007caa:	633b      	str	r3, [r7, #48]	; 0x30
 8007cac:	2301      	movs	r3, #1
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	f383 8810 	msr	PRIMASK, r3
}
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	438a      	bics	r2, r1
 8007cc6:	609a      	str	r2, [r3, #8]
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	f383 8810 	msr	PRIMASK, r3
}
 8007cd2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d118      	bne.n	8007d0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ce0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ce2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f383 8810 	msr	PRIMASK, r3
}
 8007cf0:	46c0      	nop			; (mov r8, r8)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2110      	movs	r1, #16
 8007cfe:	438a      	bics	r2, r1
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f383 8810 	msr	PRIMASK, r3
}
 8007d0c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2220      	movs	r2, #32
 8007d12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007d20:	46c0      	nop			; (mov r8, r8)
 8007d22:	46bd      	mov	sp, r7
 8007d24:	b00e      	add	sp, #56	; 0x38
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	fffffedf 	.word	0xfffffedf

08007d2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	225a      	movs	r2, #90	; 0x5a
 8007d3e:	2100      	movs	r1, #0
 8007d40:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2252      	movs	r2, #82	; 0x52
 8007d46:	2100      	movs	r1, #0
 8007d48:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f7ff fc77 	bl	8007640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d52:	46c0      	nop			; (mov r8, r8)
 8007d54:	46bd      	mov	sp, r7
 8007d56:	b004      	add	sp, #16
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d62:	f3ef 8310 	mrs	r3, PRIMASK
 8007d66:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d68:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f383 8810 	msr	PRIMASK, r3
}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2140      	movs	r1, #64	; 0x40
 8007d84:	438a      	bics	r2, r1
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f383 8810 	msr	PRIMASK, r3
}
 8007d92:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2220      	movs	r2, #32
 8007d98:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	0018      	movs	r0, r3
 8007da4:	f7ff fc44 	bl	8007630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da8:	46c0      	nop			; (mov r8, r8)
 8007daa:	46bd      	mov	sp, r7
 8007dac:	b006      	add	sp, #24
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007db8:	46c0      	nop			; (mov r8, r8)
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	b002      	add	sp, #8
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <__errno>:
 8007dc0:	4b01      	ldr	r3, [pc, #4]	; (8007dc8 <__errno+0x8>)
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	4770      	bx	lr
 8007dc6:	46c0      	nop			; (mov r8, r8)
 8007dc8:	2000000c 	.word	0x2000000c

08007dcc <__libc_init_array>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	2600      	movs	r6, #0
 8007dd0:	4d0c      	ldr	r5, [pc, #48]	; (8007e04 <__libc_init_array+0x38>)
 8007dd2:	4c0d      	ldr	r4, [pc, #52]	; (8007e08 <__libc_init_array+0x3c>)
 8007dd4:	1b64      	subs	r4, r4, r5
 8007dd6:	10a4      	asrs	r4, r4, #2
 8007dd8:	42a6      	cmp	r6, r4
 8007dda:	d109      	bne.n	8007df0 <__libc_init_array+0x24>
 8007ddc:	2600      	movs	r6, #0
 8007dde:	f002 ffef 	bl	800adc0 <_init>
 8007de2:	4d0a      	ldr	r5, [pc, #40]	; (8007e0c <__libc_init_array+0x40>)
 8007de4:	4c0a      	ldr	r4, [pc, #40]	; (8007e10 <__libc_init_array+0x44>)
 8007de6:	1b64      	subs	r4, r4, r5
 8007de8:	10a4      	asrs	r4, r4, #2
 8007dea:	42a6      	cmp	r6, r4
 8007dec:	d105      	bne.n	8007dfa <__libc_init_array+0x2e>
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	00b3      	lsls	r3, r6, #2
 8007df2:	58eb      	ldr	r3, [r5, r3]
 8007df4:	4798      	blx	r3
 8007df6:	3601      	adds	r6, #1
 8007df8:	e7ee      	b.n	8007dd8 <__libc_init_array+0xc>
 8007dfa:	00b3      	lsls	r3, r6, #2
 8007dfc:	58eb      	ldr	r3, [r5, r3]
 8007dfe:	4798      	blx	r3
 8007e00:	3601      	adds	r6, #1
 8007e02:	e7f2      	b.n	8007dea <__libc_init_array+0x1e>
 8007e04:	0800b27c 	.word	0x0800b27c
 8007e08:	0800b27c 	.word	0x0800b27c
 8007e0c:	0800b27c 	.word	0x0800b27c
 8007e10:	0800b280 	.word	0x0800b280

08007e14 <memset>:
 8007e14:	0003      	movs	r3, r0
 8007e16:	1882      	adds	r2, r0, r2
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d100      	bne.n	8007e1e <memset+0xa>
 8007e1c:	4770      	bx	lr
 8007e1e:	7019      	strb	r1, [r3, #0]
 8007e20:	3301      	adds	r3, #1
 8007e22:	e7f9      	b.n	8007e18 <memset+0x4>

08007e24 <__cvt>:
 8007e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e26:	001e      	movs	r6, r3
 8007e28:	2300      	movs	r3, #0
 8007e2a:	0014      	movs	r4, r2
 8007e2c:	b08b      	sub	sp, #44	; 0x2c
 8007e2e:	429e      	cmp	r6, r3
 8007e30:	da04      	bge.n	8007e3c <__cvt+0x18>
 8007e32:	2180      	movs	r1, #128	; 0x80
 8007e34:	0609      	lsls	r1, r1, #24
 8007e36:	1873      	adds	r3, r6, r1
 8007e38:	001e      	movs	r6, r3
 8007e3a:	232d      	movs	r3, #45	; 0x2d
 8007e3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e3e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e40:	7013      	strb	r3, [r2, #0]
 8007e42:	2320      	movs	r3, #32
 8007e44:	2203      	movs	r2, #3
 8007e46:	439f      	bics	r7, r3
 8007e48:	2f46      	cmp	r7, #70	; 0x46
 8007e4a:	d007      	beq.n	8007e5c <__cvt+0x38>
 8007e4c:	003b      	movs	r3, r7
 8007e4e:	3b45      	subs	r3, #69	; 0x45
 8007e50:	4259      	negs	r1, r3
 8007e52:	414b      	adcs	r3, r1
 8007e54:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007e56:	3a01      	subs	r2, #1
 8007e58:	18cb      	adds	r3, r1, r3
 8007e5a:	9310      	str	r3, [sp, #64]	; 0x40
 8007e5c:	ab09      	add	r3, sp, #36	; 0x24
 8007e5e:	9304      	str	r3, [sp, #16]
 8007e60:	ab08      	add	r3, sp, #32
 8007e62:	9303      	str	r3, [sp, #12]
 8007e64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e66:	9200      	str	r2, [sp, #0]
 8007e68:	9302      	str	r3, [sp, #8]
 8007e6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e6c:	0022      	movs	r2, r4
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	0033      	movs	r3, r6
 8007e72:	f000 fd25 	bl	80088c0 <_dtoa_r>
 8007e76:	0005      	movs	r5, r0
 8007e78:	2f47      	cmp	r7, #71	; 0x47
 8007e7a:	d102      	bne.n	8007e82 <__cvt+0x5e>
 8007e7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e7e:	07db      	lsls	r3, r3, #31
 8007e80:	d528      	bpl.n	8007ed4 <__cvt+0xb0>
 8007e82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e84:	18eb      	adds	r3, r5, r3
 8007e86:	9307      	str	r3, [sp, #28]
 8007e88:	2f46      	cmp	r7, #70	; 0x46
 8007e8a:	d114      	bne.n	8007eb6 <__cvt+0x92>
 8007e8c:	782b      	ldrb	r3, [r5, #0]
 8007e8e:	2b30      	cmp	r3, #48	; 0x30
 8007e90:	d10c      	bne.n	8007eac <__cvt+0x88>
 8007e92:	2200      	movs	r2, #0
 8007e94:	2300      	movs	r3, #0
 8007e96:	0020      	movs	r0, r4
 8007e98:	0031      	movs	r1, r6
 8007e9a:	f7f8 fad7 	bl	800044c <__aeabi_dcmpeq>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d104      	bne.n	8007eac <__cvt+0x88>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ea6:	1a9b      	subs	r3, r3, r2
 8007ea8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007eae:	9a07      	ldr	r2, [sp, #28]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	18d3      	adds	r3, r2, r3
 8007eb4:	9307      	str	r3, [sp, #28]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2300      	movs	r3, #0
 8007eba:	0020      	movs	r0, r4
 8007ebc:	0031      	movs	r1, r6
 8007ebe:	f7f8 fac5 	bl	800044c <__aeabi_dcmpeq>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d001      	beq.n	8007eca <__cvt+0xa6>
 8007ec6:	9b07      	ldr	r3, [sp, #28]
 8007ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eca:	2230      	movs	r2, #48	; 0x30
 8007ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ece:	9907      	ldr	r1, [sp, #28]
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	d306      	bcc.n	8007ee2 <__cvt+0xbe>
 8007ed4:	0028      	movs	r0, r5
 8007ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007eda:	1b5b      	subs	r3, r3, r5
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	b00b      	add	sp, #44	; 0x2c
 8007ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ee2:	1c59      	adds	r1, r3, #1
 8007ee4:	9109      	str	r1, [sp, #36]	; 0x24
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	e7f0      	b.n	8007ecc <__cvt+0xa8>

08007eea <__exponent>:
 8007eea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eec:	1c83      	adds	r3, r0, #2
 8007eee:	b087      	sub	sp, #28
 8007ef0:	9303      	str	r3, [sp, #12]
 8007ef2:	0005      	movs	r5, r0
 8007ef4:	000c      	movs	r4, r1
 8007ef6:	232b      	movs	r3, #43	; 0x2b
 8007ef8:	7002      	strb	r2, [r0, #0]
 8007efa:	2900      	cmp	r1, #0
 8007efc:	da01      	bge.n	8007f02 <__exponent+0x18>
 8007efe:	424c      	negs	r4, r1
 8007f00:	3302      	adds	r3, #2
 8007f02:	706b      	strb	r3, [r5, #1]
 8007f04:	2c09      	cmp	r4, #9
 8007f06:	dd31      	ble.n	8007f6c <__exponent+0x82>
 8007f08:	270a      	movs	r7, #10
 8007f0a:	ab04      	add	r3, sp, #16
 8007f0c:	1dde      	adds	r6, r3, #7
 8007f0e:	0020      	movs	r0, r4
 8007f10:	0039      	movs	r1, r7
 8007f12:	9601      	str	r6, [sp, #4]
 8007f14:	f7f8 fa84 	bl	8000420 <__aeabi_idivmod>
 8007f18:	3e01      	subs	r6, #1
 8007f1a:	3130      	adds	r1, #48	; 0x30
 8007f1c:	0020      	movs	r0, r4
 8007f1e:	7031      	strb	r1, [r6, #0]
 8007f20:	0039      	movs	r1, r7
 8007f22:	9402      	str	r4, [sp, #8]
 8007f24:	f7f8 f996 	bl	8000254 <__divsi3>
 8007f28:	9b02      	ldr	r3, [sp, #8]
 8007f2a:	0004      	movs	r4, r0
 8007f2c:	2b63      	cmp	r3, #99	; 0x63
 8007f2e:	dcee      	bgt.n	8007f0e <__exponent+0x24>
 8007f30:	9b01      	ldr	r3, [sp, #4]
 8007f32:	3430      	adds	r4, #48	; 0x30
 8007f34:	1e9a      	subs	r2, r3, #2
 8007f36:	0013      	movs	r3, r2
 8007f38:	9903      	ldr	r1, [sp, #12]
 8007f3a:	7014      	strb	r4, [r2, #0]
 8007f3c:	a804      	add	r0, sp, #16
 8007f3e:	3007      	adds	r0, #7
 8007f40:	4298      	cmp	r0, r3
 8007f42:	d80e      	bhi.n	8007f62 <__exponent+0x78>
 8007f44:	ab04      	add	r3, sp, #16
 8007f46:	3307      	adds	r3, #7
 8007f48:	2000      	movs	r0, #0
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d804      	bhi.n	8007f58 <__exponent+0x6e>
 8007f4e:	ab04      	add	r3, sp, #16
 8007f50:	3009      	adds	r0, #9
 8007f52:	18c0      	adds	r0, r0, r3
 8007f54:	9b01      	ldr	r3, [sp, #4]
 8007f56:	1ac0      	subs	r0, r0, r3
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	1818      	adds	r0, r3, r0
 8007f5c:	1b40      	subs	r0, r0, r5
 8007f5e:	b007      	add	sp, #28
 8007f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f62:	7818      	ldrb	r0, [r3, #0]
 8007f64:	3301      	adds	r3, #1
 8007f66:	7008      	strb	r0, [r1, #0]
 8007f68:	3101      	adds	r1, #1
 8007f6a:	e7e7      	b.n	8007f3c <__exponent+0x52>
 8007f6c:	2330      	movs	r3, #48	; 0x30
 8007f6e:	18e4      	adds	r4, r4, r3
 8007f70:	70ab      	strb	r3, [r5, #2]
 8007f72:	1d28      	adds	r0, r5, #4
 8007f74:	70ec      	strb	r4, [r5, #3]
 8007f76:	e7f1      	b.n	8007f5c <__exponent+0x72>

08007f78 <_printf_float>:
 8007f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f7a:	b095      	sub	sp, #84	; 0x54
 8007f7c:	000c      	movs	r4, r1
 8007f7e:	9209      	str	r2, [sp, #36]	; 0x24
 8007f80:	001e      	movs	r6, r3
 8007f82:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007f84:	0007      	movs	r7, r0
 8007f86:	f001 fab5 	bl	80094f4 <_localeconv_r>
 8007f8a:	6803      	ldr	r3, [r0, #0]
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f90:	f7f8 f8ba 	bl	8000108 <strlen>
 8007f94:	2300      	movs	r3, #0
 8007f96:	9312      	str	r3, [sp, #72]	; 0x48
 8007f98:	7e23      	ldrb	r3, [r4, #24]
 8007f9a:	2207      	movs	r2, #7
 8007f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	900e      	str	r0, [sp, #56]	; 0x38
 8007fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8007fa4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007fa6:	682b      	ldr	r3, [r5, #0]
 8007fa8:	05c9      	lsls	r1, r1, #23
 8007faa:	d547      	bpl.n	800803c <_printf_float+0xc4>
 8007fac:	189b      	adds	r3, r3, r2
 8007fae:	4393      	bics	r3, r2
 8007fb0:	001a      	movs	r2, r3
 8007fb2:	3208      	adds	r2, #8
 8007fb4:	602a      	str	r2, [r5, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	64a2      	str	r2, [r4, #72]	; 0x48
 8007fbc:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007fc2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fc6:	006b      	lsls	r3, r5, #1
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fcc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007fce:	4ba7      	ldr	r3, [pc, #668]	; (800826c <_printf_float+0x2f4>)
 8007fd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007fd2:	4252      	negs	r2, r2
 8007fd4:	f7fa fb76 	bl	80026c4 <__aeabi_dcmpun>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d131      	bne.n	8008040 <_printf_float+0xc8>
 8007fdc:	2201      	movs	r2, #1
 8007fde:	4ba3      	ldr	r3, [pc, #652]	; (800826c <_printf_float+0x2f4>)
 8007fe0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007fe2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007fe4:	4252      	negs	r2, r2
 8007fe6:	f7f8 fa41 	bl	800046c <__aeabi_dcmple>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d128      	bne.n	8008040 <_printf_float+0xc8>
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	0029      	movs	r1, r5
 8007ff4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007ff6:	f7f8 fa2f 	bl	8000458 <__aeabi_dcmplt>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	d003      	beq.n	8008006 <_printf_float+0x8e>
 8007ffe:	0023      	movs	r3, r4
 8008000:	222d      	movs	r2, #45	; 0x2d
 8008002:	3343      	adds	r3, #67	; 0x43
 8008004:	701a      	strb	r2, [r3, #0]
 8008006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008008:	4d99      	ldr	r5, [pc, #612]	; (8008270 <_printf_float+0x2f8>)
 800800a:	2b47      	cmp	r3, #71	; 0x47
 800800c:	d900      	bls.n	8008010 <_printf_float+0x98>
 800800e:	4d99      	ldr	r5, [pc, #612]	; (8008274 <_printf_float+0x2fc>)
 8008010:	2303      	movs	r3, #3
 8008012:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008014:	6123      	str	r3, [r4, #16]
 8008016:	3301      	adds	r3, #1
 8008018:	439a      	bics	r2, r3
 800801a:	2300      	movs	r3, #0
 800801c:	6022      	str	r2, [r4, #0]
 800801e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008022:	0021      	movs	r1, r4
 8008024:	0038      	movs	r0, r7
 8008026:	9600      	str	r6, [sp, #0]
 8008028:	aa13      	add	r2, sp, #76	; 0x4c
 800802a:	f000 f9e7 	bl	80083fc <_printf_common>
 800802e:	1c43      	adds	r3, r0, #1
 8008030:	d000      	beq.n	8008034 <_printf_float+0xbc>
 8008032:	e0a2      	b.n	800817a <_printf_float+0x202>
 8008034:	2001      	movs	r0, #1
 8008036:	4240      	negs	r0, r0
 8008038:	b015      	add	sp, #84	; 0x54
 800803a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800803c:	3307      	adds	r3, #7
 800803e:	e7b6      	b.n	8007fae <_printf_float+0x36>
 8008040:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008042:	002b      	movs	r3, r5
 8008044:	0010      	movs	r0, r2
 8008046:	0029      	movs	r1, r5
 8008048:	f7fa fb3c 	bl	80026c4 <__aeabi_dcmpun>
 800804c:	2800      	cmp	r0, #0
 800804e:	d00b      	beq.n	8008068 <_printf_float+0xf0>
 8008050:	2d00      	cmp	r5, #0
 8008052:	da03      	bge.n	800805c <_printf_float+0xe4>
 8008054:	0023      	movs	r3, r4
 8008056:	222d      	movs	r2, #45	; 0x2d
 8008058:	3343      	adds	r3, #67	; 0x43
 800805a:	701a      	strb	r2, [r3, #0]
 800805c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800805e:	4d86      	ldr	r5, [pc, #536]	; (8008278 <_printf_float+0x300>)
 8008060:	2b47      	cmp	r3, #71	; 0x47
 8008062:	d9d5      	bls.n	8008010 <_printf_float+0x98>
 8008064:	4d85      	ldr	r5, [pc, #532]	; (800827c <_printf_float+0x304>)
 8008066:	e7d3      	b.n	8008010 <_printf_float+0x98>
 8008068:	2220      	movs	r2, #32
 800806a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800806c:	6863      	ldr	r3, [r4, #4]
 800806e:	4391      	bics	r1, r2
 8008070:	910f      	str	r1, [sp, #60]	; 0x3c
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	d149      	bne.n	800810a <_printf_float+0x192>
 8008076:	3307      	adds	r3, #7
 8008078:	6063      	str	r3, [r4, #4]
 800807a:	2380      	movs	r3, #128	; 0x80
 800807c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	4313      	orrs	r3, r2
 8008082:	2200      	movs	r2, #0
 8008084:	9206      	str	r2, [sp, #24]
 8008086:	aa12      	add	r2, sp, #72	; 0x48
 8008088:	9205      	str	r2, [sp, #20]
 800808a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800808c:	a908      	add	r1, sp, #32
 800808e:	9204      	str	r2, [sp, #16]
 8008090:	aa11      	add	r2, sp, #68	; 0x44
 8008092:	9203      	str	r2, [sp, #12]
 8008094:	2223      	movs	r2, #35	; 0x23
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	6863      	ldr	r3, [r4, #4]
 800809c:	1852      	adds	r2, r2, r1
 800809e:	9202      	str	r2, [sp, #8]
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	0038      	movs	r0, r7
 80080a4:	002b      	movs	r3, r5
 80080a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080a8:	f7ff febc 	bl	8007e24 <__cvt>
 80080ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080ae:	0005      	movs	r5, r0
 80080b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080b2:	2b47      	cmp	r3, #71	; 0x47
 80080b4:	d108      	bne.n	80080c8 <_printf_float+0x150>
 80080b6:	1ccb      	adds	r3, r1, #3
 80080b8:	db02      	blt.n	80080c0 <_printf_float+0x148>
 80080ba:	6863      	ldr	r3, [r4, #4]
 80080bc:	4299      	cmp	r1, r3
 80080be:	dd48      	ble.n	8008152 <_printf_float+0x1da>
 80080c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c2:	3b02      	subs	r3, #2
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	930a      	str	r3, [sp, #40]	; 0x28
 80080c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ca:	2b65      	cmp	r3, #101	; 0x65
 80080cc:	d824      	bhi.n	8008118 <_printf_float+0x1a0>
 80080ce:	0020      	movs	r0, r4
 80080d0:	001a      	movs	r2, r3
 80080d2:	3901      	subs	r1, #1
 80080d4:	3050      	adds	r0, #80	; 0x50
 80080d6:	9111      	str	r1, [sp, #68]	; 0x44
 80080d8:	f7ff ff07 	bl	8007eea <__exponent>
 80080dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080de:	900b      	str	r0, [sp, #44]	; 0x2c
 80080e0:	1813      	adds	r3, r2, r0
 80080e2:	6123      	str	r3, [r4, #16]
 80080e4:	2a01      	cmp	r2, #1
 80080e6:	dc02      	bgt.n	80080ee <_printf_float+0x176>
 80080e8:	6822      	ldr	r2, [r4, #0]
 80080ea:	07d2      	lsls	r2, r2, #31
 80080ec:	d501      	bpl.n	80080f2 <_printf_float+0x17a>
 80080ee:	3301      	adds	r3, #1
 80080f0:	6123      	str	r3, [r4, #16]
 80080f2:	2323      	movs	r3, #35	; 0x23
 80080f4:	aa08      	add	r2, sp, #32
 80080f6:	189b      	adds	r3, r3, r2
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d100      	bne.n	8008100 <_printf_float+0x188>
 80080fe:	e78f      	b.n	8008020 <_printf_float+0xa8>
 8008100:	0023      	movs	r3, r4
 8008102:	222d      	movs	r2, #45	; 0x2d
 8008104:	3343      	adds	r3, #67	; 0x43
 8008106:	701a      	strb	r2, [r3, #0]
 8008108:	e78a      	b.n	8008020 <_printf_float+0xa8>
 800810a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800810c:	2a47      	cmp	r2, #71	; 0x47
 800810e:	d1b4      	bne.n	800807a <_printf_float+0x102>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1b2      	bne.n	800807a <_printf_float+0x102>
 8008114:	3301      	adds	r3, #1
 8008116:	e7af      	b.n	8008078 <_printf_float+0x100>
 8008118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800811a:	2b66      	cmp	r3, #102	; 0x66
 800811c:	d11b      	bne.n	8008156 <_printf_float+0x1de>
 800811e:	6863      	ldr	r3, [r4, #4]
 8008120:	2900      	cmp	r1, #0
 8008122:	dd0d      	ble.n	8008140 <_printf_float+0x1c8>
 8008124:	6121      	str	r1, [r4, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d102      	bne.n	8008130 <_printf_float+0x1b8>
 800812a:	6822      	ldr	r2, [r4, #0]
 800812c:	07d2      	lsls	r2, r2, #31
 800812e:	d502      	bpl.n	8008136 <_printf_float+0x1be>
 8008130:	3301      	adds	r3, #1
 8008132:	1859      	adds	r1, r3, r1
 8008134:	6121      	str	r1, [r4, #16]
 8008136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008138:	65a3      	str	r3, [r4, #88]	; 0x58
 800813a:	2300      	movs	r3, #0
 800813c:	930b      	str	r3, [sp, #44]	; 0x2c
 800813e:	e7d8      	b.n	80080f2 <_printf_float+0x17a>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d103      	bne.n	800814c <_printf_float+0x1d4>
 8008144:	2201      	movs	r2, #1
 8008146:	6821      	ldr	r1, [r4, #0]
 8008148:	4211      	tst	r1, r2
 800814a:	d000      	beq.n	800814e <_printf_float+0x1d6>
 800814c:	1c9a      	adds	r2, r3, #2
 800814e:	6122      	str	r2, [r4, #16]
 8008150:	e7f1      	b.n	8008136 <_printf_float+0x1be>
 8008152:	2367      	movs	r3, #103	; 0x67
 8008154:	930a      	str	r3, [sp, #40]	; 0x28
 8008156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008158:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800815a:	4293      	cmp	r3, r2
 800815c:	db06      	blt.n	800816c <_printf_float+0x1f4>
 800815e:	6822      	ldr	r2, [r4, #0]
 8008160:	6123      	str	r3, [r4, #16]
 8008162:	07d2      	lsls	r2, r2, #31
 8008164:	d5e7      	bpl.n	8008136 <_printf_float+0x1be>
 8008166:	3301      	adds	r3, #1
 8008168:	6123      	str	r3, [r4, #16]
 800816a:	e7e4      	b.n	8008136 <_printf_float+0x1be>
 800816c:	2101      	movs	r1, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	dc01      	bgt.n	8008176 <_printf_float+0x1fe>
 8008172:	1849      	adds	r1, r1, r1
 8008174:	1ac9      	subs	r1, r1, r3
 8008176:	1852      	adds	r2, r2, r1
 8008178:	e7e9      	b.n	800814e <_printf_float+0x1d6>
 800817a:	6822      	ldr	r2, [r4, #0]
 800817c:	0553      	lsls	r3, r2, #21
 800817e:	d407      	bmi.n	8008190 <_printf_float+0x218>
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	002a      	movs	r2, r5
 8008184:	0038      	movs	r0, r7
 8008186:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008188:	47b0      	blx	r6
 800818a:	1c43      	adds	r3, r0, #1
 800818c:	d128      	bne.n	80081e0 <_printf_float+0x268>
 800818e:	e751      	b.n	8008034 <_printf_float+0xbc>
 8008190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008192:	2b65      	cmp	r3, #101	; 0x65
 8008194:	d800      	bhi.n	8008198 <_printf_float+0x220>
 8008196:	e0e1      	b.n	800835c <_printf_float+0x3e4>
 8008198:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800819a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800819c:	2200      	movs	r2, #0
 800819e:	2300      	movs	r3, #0
 80081a0:	f7f8 f954 	bl	800044c <__aeabi_dcmpeq>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d031      	beq.n	800820c <_printf_float+0x294>
 80081a8:	2301      	movs	r3, #1
 80081aa:	0038      	movs	r0, r7
 80081ac:	4a34      	ldr	r2, [pc, #208]	; (8008280 <_printf_float+0x308>)
 80081ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081b0:	47b0      	blx	r6
 80081b2:	1c43      	adds	r3, r0, #1
 80081b4:	d100      	bne.n	80081b8 <_printf_float+0x240>
 80081b6:	e73d      	b.n	8008034 <_printf_float+0xbc>
 80081b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081bc:	4293      	cmp	r3, r2
 80081be:	db02      	blt.n	80081c6 <_printf_float+0x24e>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	07db      	lsls	r3, r3, #31
 80081c4:	d50c      	bpl.n	80081e0 <_printf_float+0x268>
 80081c6:	0038      	movs	r0, r7
 80081c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081ce:	47b0      	blx	r6
 80081d0:	2500      	movs	r5, #0
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	d100      	bne.n	80081d8 <_printf_float+0x260>
 80081d6:	e72d      	b.n	8008034 <_printf_float+0xbc>
 80081d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081da:	3b01      	subs	r3, #1
 80081dc:	42ab      	cmp	r3, r5
 80081de:	dc0a      	bgt.n	80081f6 <_printf_float+0x27e>
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	079b      	lsls	r3, r3, #30
 80081e4:	d500      	bpl.n	80081e8 <_printf_float+0x270>
 80081e6:	e106      	b.n	80083f6 <_printf_float+0x47e>
 80081e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081ea:	68e0      	ldr	r0, [r4, #12]
 80081ec:	4298      	cmp	r0, r3
 80081ee:	db00      	blt.n	80081f2 <_printf_float+0x27a>
 80081f0:	e722      	b.n	8008038 <_printf_float+0xc0>
 80081f2:	0018      	movs	r0, r3
 80081f4:	e720      	b.n	8008038 <_printf_float+0xc0>
 80081f6:	0022      	movs	r2, r4
 80081f8:	2301      	movs	r3, #1
 80081fa:	0038      	movs	r0, r7
 80081fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081fe:	321a      	adds	r2, #26
 8008200:	47b0      	blx	r6
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	d100      	bne.n	8008208 <_printf_float+0x290>
 8008206:	e715      	b.n	8008034 <_printf_float+0xbc>
 8008208:	3501      	adds	r5, #1
 800820a:	e7e5      	b.n	80081d8 <_printf_float+0x260>
 800820c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800820e:	2b00      	cmp	r3, #0
 8008210:	dc38      	bgt.n	8008284 <_printf_float+0x30c>
 8008212:	2301      	movs	r3, #1
 8008214:	0038      	movs	r0, r7
 8008216:	4a1a      	ldr	r2, [pc, #104]	; (8008280 <_printf_float+0x308>)
 8008218:	9909      	ldr	r1, [sp, #36]	; 0x24
 800821a:	47b0      	blx	r6
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d100      	bne.n	8008222 <_printf_float+0x2aa>
 8008220:	e708      	b.n	8008034 <_printf_float+0xbc>
 8008222:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008224:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008226:	4313      	orrs	r3, r2
 8008228:	d102      	bne.n	8008230 <_printf_float+0x2b8>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	07db      	lsls	r3, r3, #31
 800822e:	d5d7      	bpl.n	80081e0 <_printf_float+0x268>
 8008230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008232:	0038      	movs	r0, r7
 8008234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008236:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008238:	47b0      	blx	r6
 800823a:	1c43      	adds	r3, r0, #1
 800823c:	d100      	bne.n	8008240 <_printf_float+0x2c8>
 800823e:	e6f9      	b.n	8008034 <_printf_float+0xbc>
 8008240:	2300      	movs	r3, #0
 8008242:	930a      	str	r3, [sp, #40]	; 0x28
 8008244:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008248:	425b      	negs	r3, r3
 800824a:	4293      	cmp	r3, r2
 800824c:	dc01      	bgt.n	8008252 <_printf_float+0x2da>
 800824e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008250:	e797      	b.n	8008182 <_printf_float+0x20a>
 8008252:	0022      	movs	r2, r4
 8008254:	2301      	movs	r3, #1
 8008256:	0038      	movs	r0, r7
 8008258:	9909      	ldr	r1, [sp, #36]	; 0x24
 800825a:	321a      	adds	r2, #26
 800825c:	47b0      	blx	r6
 800825e:	1c43      	adds	r3, r0, #1
 8008260:	d100      	bne.n	8008264 <_printf_float+0x2ec>
 8008262:	e6e7      	b.n	8008034 <_printf_float+0xbc>
 8008264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008266:	3301      	adds	r3, #1
 8008268:	e7eb      	b.n	8008242 <_printf_float+0x2ca>
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	7fefffff 	.word	0x7fefffff
 8008270:	0800aea4 	.word	0x0800aea4
 8008274:	0800aea8 	.word	0x0800aea8
 8008278:	0800aeac 	.word	0x0800aeac
 800827c:	0800aeb0 	.word	0x0800aeb0
 8008280:	0800aeb4 	.word	0x0800aeb4
 8008284:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008288:	920a      	str	r2, [sp, #40]	; 0x28
 800828a:	429a      	cmp	r2, r3
 800828c:	dd00      	ble.n	8008290 <_printf_float+0x318>
 800828e:	930a      	str	r3, [sp, #40]	; 0x28
 8008290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008292:	2b00      	cmp	r3, #0
 8008294:	dc3c      	bgt.n	8008310 <_printf_float+0x398>
 8008296:	2300      	movs	r3, #0
 8008298:	930d      	str	r3, [sp, #52]	; 0x34
 800829a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800829c:	43db      	mvns	r3, r3
 800829e:	17db      	asrs	r3, r3, #31
 80082a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80082a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80082a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082aa:	4013      	ands	r3, r2
 80082ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082b2:	4293      	cmp	r3, r2
 80082b4:	dc34      	bgt.n	8008320 <_printf_float+0x3a8>
 80082b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082ba:	4293      	cmp	r3, r2
 80082bc:	db3d      	blt.n	800833a <_printf_float+0x3c2>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	07db      	lsls	r3, r3, #31
 80082c2:	d43a      	bmi.n	800833a <_printf_float+0x3c2>
 80082c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	1a52      	subs	r2, r2, r1
 80082ce:	920a      	str	r2, [sp, #40]	; 0x28
 80082d0:	429a      	cmp	r2, r3
 80082d2:	dd00      	ble.n	80082d6 <_printf_float+0x35e>
 80082d4:	930a      	str	r3, [sp, #40]	; 0x28
 80082d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d8:	2b00      	cmp	r3, #0
 80082da:	dc36      	bgt.n	800834a <_printf_float+0x3d2>
 80082dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082de:	2500      	movs	r5, #0
 80082e0:	43db      	mvns	r3, r3
 80082e2:	17db      	asrs	r3, r3, #31
 80082e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80082e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ec:	1a9b      	subs	r3, r3, r2
 80082ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082f0:	400a      	ands	r2, r1
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	42ab      	cmp	r3, r5
 80082f6:	dc00      	bgt.n	80082fa <_printf_float+0x382>
 80082f8:	e772      	b.n	80081e0 <_printf_float+0x268>
 80082fa:	0022      	movs	r2, r4
 80082fc:	2301      	movs	r3, #1
 80082fe:	0038      	movs	r0, r7
 8008300:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008302:	321a      	adds	r2, #26
 8008304:	47b0      	blx	r6
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	d100      	bne.n	800830c <_printf_float+0x394>
 800830a:	e693      	b.n	8008034 <_printf_float+0xbc>
 800830c:	3501      	adds	r5, #1
 800830e:	e7ea      	b.n	80082e6 <_printf_float+0x36e>
 8008310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008312:	002a      	movs	r2, r5
 8008314:	0038      	movs	r0, r7
 8008316:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008318:	47b0      	blx	r6
 800831a:	1c43      	adds	r3, r0, #1
 800831c:	d1bb      	bne.n	8008296 <_printf_float+0x31e>
 800831e:	e689      	b.n	8008034 <_printf_float+0xbc>
 8008320:	0022      	movs	r2, r4
 8008322:	2301      	movs	r3, #1
 8008324:	0038      	movs	r0, r7
 8008326:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008328:	321a      	adds	r2, #26
 800832a:	47b0      	blx	r6
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d100      	bne.n	8008332 <_printf_float+0x3ba>
 8008330:	e680      	b.n	8008034 <_printf_float+0xbc>
 8008332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008334:	3301      	adds	r3, #1
 8008336:	930d      	str	r3, [sp, #52]	; 0x34
 8008338:	e7b3      	b.n	80082a2 <_printf_float+0x32a>
 800833a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800833c:	0038      	movs	r0, r7
 800833e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008340:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008342:	47b0      	blx	r6
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d1bd      	bne.n	80082c4 <_printf_float+0x34c>
 8008348:	e674      	b.n	8008034 <_printf_float+0xbc>
 800834a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800834c:	0038      	movs	r0, r7
 800834e:	18ea      	adds	r2, r5, r3
 8008350:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008354:	47b0      	blx	r6
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	d1c0      	bne.n	80082dc <_printf_float+0x364>
 800835a:	e66b      	b.n	8008034 <_printf_float+0xbc>
 800835c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800835e:	2b01      	cmp	r3, #1
 8008360:	dc02      	bgt.n	8008368 <_printf_float+0x3f0>
 8008362:	2301      	movs	r3, #1
 8008364:	421a      	tst	r2, r3
 8008366:	d034      	beq.n	80083d2 <_printf_float+0x45a>
 8008368:	2301      	movs	r3, #1
 800836a:	002a      	movs	r2, r5
 800836c:	0038      	movs	r0, r7
 800836e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008370:	47b0      	blx	r6
 8008372:	1c43      	adds	r3, r0, #1
 8008374:	d100      	bne.n	8008378 <_printf_float+0x400>
 8008376:	e65d      	b.n	8008034 <_printf_float+0xbc>
 8008378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800837a:	0038      	movs	r0, r7
 800837c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800837e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008380:	47b0      	blx	r6
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	d100      	bne.n	8008388 <_printf_float+0x410>
 8008386:	e655      	b.n	8008034 <_printf_float+0xbc>
 8008388:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800838a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800838c:	2200      	movs	r2, #0
 800838e:	2300      	movs	r3, #0
 8008390:	f7f8 f85c 	bl	800044c <__aeabi_dcmpeq>
 8008394:	2800      	cmp	r0, #0
 8008396:	d11a      	bne.n	80083ce <_printf_float+0x456>
 8008398:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800839a:	1c6a      	adds	r2, r5, #1
 800839c:	3b01      	subs	r3, #1
 800839e:	0038      	movs	r0, r7
 80083a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083a2:	47b0      	blx	r6
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d10e      	bne.n	80083c6 <_printf_float+0x44e>
 80083a8:	e644      	b.n	8008034 <_printf_float+0xbc>
 80083aa:	0022      	movs	r2, r4
 80083ac:	2301      	movs	r3, #1
 80083ae:	0038      	movs	r0, r7
 80083b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083b2:	321a      	adds	r2, #26
 80083b4:	47b0      	blx	r6
 80083b6:	1c43      	adds	r3, r0, #1
 80083b8:	d100      	bne.n	80083bc <_printf_float+0x444>
 80083ba:	e63b      	b.n	8008034 <_printf_float+0xbc>
 80083bc:	3501      	adds	r5, #1
 80083be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083c0:	3b01      	subs	r3, #1
 80083c2:	42ab      	cmp	r3, r5
 80083c4:	dcf1      	bgt.n	80083aa <_printf_float+0x432>
 80083c6:	0022      	movs	r2, r4
 80083c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ca:	3250      	adds	r2, #80	; 0x50
 80083cc:	e6da      	b.n	8008184 <_printf_float+0x20c>
 80083ce:	2500      	movs	r5, #0
 80083d0:	e7f5      	b.n	80083be <_printf_float+0x446>
 80083d2:	002a      	movs	r2, r5
 80083d4:	e7e3      	b.n	800839e <_printf_float+0x426>
 80083d6:	0022      	movs	r2, r4
 80083d8:	2301      	movs	r3, #1
 80083da:	0038      	movs	r0, r7
 80083dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083de:	3219      	adds	r2, #25
 80083e0:	47b0      	blx	r6
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d100      	bne.n	80083e8 <_printf_float+0x470>
 80083e6:	e625      	b.n	8008034 <_printf_float+0xbc>
 80083e8:	3501      	adds	r5, #1
 80083ea:	68e3      	ldr	r3, [r4, #12]
 80083ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083ee:	1a9b      	subs	r3, r3, r2
 80083f0:	42ab      	cmp	r3, r5
 80083f2:	dcf0      	bgt.n	80083d6 <_printf_float+0x45e>
 80083f4:	e6f8      	b.n	80081e8 <_printf_float+0x270>
 80083f6:	2500      	movs	r5, #0
 80083f8:	e7f7      	b.n	80083ea <_printf_float+0x472>
 80083fa:	46c0      	nop			; (mov r8, r8)

080083fc <_printf_common>:
 80083fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083fe:	0015      	movs	r5, r2
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	688a      	ldr	r2, [r1, #8]
 8008404:	690b      	ldr	r3, [r1, #16]
 8008406:	000c      	movs	r4, r1
 8008408:	9000      	str	r0, [sp, #0]
 800840a:	4293      	cmp	r3, r2
 800840c:	da00      	bge.n	8008410 <_printf_common+0x14>
 800840e:	0013      	movs	r3, r2
 8008410:	0022      	movs	r2, r4
 8008412:	602b      	str	r3, [r5, #0]
 8008414:	3243      	adds	r2, #67	; 0x43
 8008416:	7812      	ldrb	r2, [r2, #0]
 8008418:	2a00      	cmp	r2, #0
 800841a:	d001      	beq.n	8008420 <_printf_common+0x24>
 800841c:	3301      	adds	r3, #1
 800841e:	602b      	str	r3, [r5, #0]
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	069b      	lsls	r3, r3, #26
 8008424:	d502      	bpl.n	800842c <_printf_common+0x30>
 8008426:	682b      	ldr	r3, [r5, #0]
 8008428:	3302      	adds	r3, #2
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	6822      	ldr	r2, [r4, #0]
 800842e:	2306      	movs	r3, #6
 8008430:	0017      	movs	r7, r2
 8008432:	401f      	ands	r7, r3
 8008434:	421a      	tst	r2, r3
 8008436:	d027      	beq.n	8008488 <_printf_common+0x8c>
 8008438:	0023      	movs	r3, r4
 800843a:	3343      	adds	r3, #67	; 0x43
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	1e5a      	subs	r2, r3, #1
 8008440:	4193      	sbcs	r3, r2
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	0692      	lsls	r2, r2, #26
 8008446:	d430      	bmi.n	80084aa <_printf_common+0xae>
 8008448:	0022      	movs	r2, r4
 800844a:	9901      	ldr	r1, [sp, #4]
 800844c:	9800      	ldr	r0, [sp, #0]
 800844e:	9e08      	ldr	r6, [sp, #32]
 8008450:	3243      	adds	r2, #67	; 0x43
 8008452:	47b0      	blx	r6
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d025      	beq.n	80084a4 <_printf_common+0xa8>
 8008458:	2306      	movs	r3, #6
 800845a:	6820      	ldr	r0, [r4, #0]
 800845c:	682a      	ldr	r2, [r5, #0]
 800845e:	68e1      	ldr	r1, [r4, #12]
 8008460:	2500      	movs	r5, #0
 8008462:	4003      	ands	r3, r0
 8008464:	2b04      	cmp	r3, #4
 8008466:	d103      	bne.n	8008470 <_printf_common+0x74>
 8008468:	1a8d      	subs	r5, r1, r2
 800846a:	43eb      	mvns	r3, r5
 800846c:	17db      	asrs	r3, r3, #31
 800846e:	401d      	ands	r5, r3
 8008470:	68a3      	ldr	r3, [r4, #8]
 8008472:	6922      	ldr	r2, [r4, #16]
 8008474:	4293      	cmp	r3, r2
 8008476:	dd01      	ble.n	800847c <_printf_common+0x80>
 8008478:	1a9b      	subs	r3, r3, r2
 800847a:	18ed      	adds	r5, r5, r3
 800847c:	2700      	movs	r7, #0
 800847e:	42bd      	cmp	r5, r7
 8008480:	d120      	bne.n	80084c4 <_printf_common+0xc8>
 8008482:	2000      	movs	r0, #0
 8008484:	e010      	b.n	80084a8 <_printf_common+0xac>
 8008486:	3701      	adds	r7, #1
 8008488:	68e3      	ldr	r3, [r4, #12]
 800848a:	682a      	ldr	r2, [r5, #0]
 800848c:	1a9b      	subs	r3, r3, r2
 800848e:	42bb      	cmp	r3, r7
 8008490:	ddd2      	ble.n	8008438 <_printf_common+0x3c>
 8008492:	0022      	movs	r2, r4
 8008494:	2301      	movs	r3, #1
 8008496:	9901      	ldr	r1, [sp, #4]
 8008498:	9800      	ldr	r0, [sp, #0]
 800849a:	9e08      	ldr	r6, [sp, #32]
 800849c:	3219      	adds	r2, #25
 800849e:	47b0      	blx	r6
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d1f0      	bne.n	8008486 <_printf_common+0x8a>
 80084a4:	2001      	movs	r0, #1
 80084a6:	4240      	negs	r0, r0
 80084a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80084aa:	2030      	movs	r0, #48	; 0x30
 80084ac:	18e1      	adds	r1, r4, r3
 80084ae:	3143      	adds	r1, #67	; 0x43
 80084b0:	7008      	strb	r0, [r1, #0]
 80084b2:	0021      	movs	r1, r4
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	3145      	adds	r1, #69	; 0x45
 80084b8:	7809      	ldrb	r1, [r1, #0]
 80084ba:	18a2      	adds	r2, r4, r2
 80084bc:	3243      	adds	r2, #67	; 0x43
 80084be:	3302      	adds	r3, #2
 80084c0:	7011      	strb	r1, [r2, #0]
 80084c2:	e7c1      	b.n	8008448 <_printf_common+0x4c>
 80084c4:	0022      	movs	r2, r4
 80084c6:	2301      	movs	r3, #1
 80084c8:	9901      	ldr	r1, [sp, #4]
 80084ca:	9800      	ldr	r0, [sp, #0]
 80084cc:	9e08      	ldr	r6, [sp, #32]
 80084ce:	321a      	adds	r2, #26
 80084d0:	47b0      	blx	r6
 80084d2:	1c43      	adds	r3, r0, #1
 80084d4:	d0e6      	beq.n	80084a4 <_printf_common+0xa8>
 80084d6:	3701      	adds	r7, #1
 80084d8:	e7d1      	b.n	800847e <_printf_common+0x82>
	...

080084dc <_printf_i>:
 80084dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084de:	b08b      	sub	sp, #44	; 0x2c
 80084e0:	9206      	str	r2, [sp, #24]
 80084e2:	000a      	movs	r2, r1
 80084e4:	3243      	adds	r2, #67	; 0x43
 80084e6:	9307      	str	r3, [sp, #28]
 80084e8:	9005      	str	r0, [sp, #20]
 80084ea:	9204      	str	r2, [sp, #16]
 80084ec:	7e0a      	ldrb	r2, [r1, #24]
 80084ee:	000c      	movs	r4, r1
 80084f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084f2:	2a78      	cmp	r2, #120	; 0x78
 80084f4:	d807      	bhi.n	8008506 <_printf_i+0x2a>
 80084f6:	2a62      	cmp	r2, #98	; 0x62
 80084f8:	d809      	bhi.n	800850e <_printf_i+0x32>
 80084fa:	2a00      	cmp	r2, #0
 80084fc:	d100      	bne.n	8008500 <_printf_i+0x24>
 80084fe:	e0c1      	b.n	8008684 <_printf_i+0x1a8>
 8008500:	2a58      	cmp	r2, #88	; 0x58
 8008502:	d100      	bne.n	8008506 <_printf_i+0x2a>
 8008504:	e08c      	b.n	8008620 <_printf_i+0x144>
 8008506:	0026      	movs	r6, r4
 8008508:	3642      	adds	r6, #66	; 0x42
 800850a:	7032      	strb	r2, [r6, #0]
 800850c:	e022      	b.n	8008554 <_printf_i+0x78>
 800850e:	0010      	movs	r0, r2
 8008510:	3863      	subs	r0, #99	; 0x63
 8008512:	2815      	cmp	r0, #21
 8008514:	d8f7      	bhi.n	8008506 <_printf_i+0x2a>
 8008516:	f7f7 fe09 	bl	800012c <__gnu_thumb1_case_shi>
 800851a:	0016      	.short	0x0016
 800851c:	fff6001f 	.word	0xfff6001f
 8008520:	fff6fff6 	.word	0xfff6fff6
 8008524:	001ffff6 	.word	0x001ffff6
 8008528:	fff6fff6 	.word	0xfff6fff6
 800852c:	fff6fff6 	.word	0xfff6fff6
 8008530:	003600a8 	.word	0x003600a8
 8008534:	fff6009a 	.word	0xfff6009a
 8008538:	00b9fff6 	.word	0x00b9fff6
 800853c:	0036fff6 	.word	0x0036fff6
 8008540:	fff6fff6 	.word	0xfff6fff6
 8008544:	009e      	.short	0x009e
 8008546:	0026      	movs	r6, r4
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	3642      	adds	r6, #66	; 0x42
 800854c:	1d11      	adds	r1, r2, #4
 800854e:	6019      	str	r1, [r3, #0]
 8008550:	6813      	ldr	r3, [r2, #0]
 8008552:	7033      	strb	r3, [r6, #0]
 8008554:	2301      	movs	r3, #1
 8008556:	e0a7      	b.n	80086a8 <_printf_i+0x1cc>
 8008558:	6808      	ldr	r0, [r1, #0]
 800855a:	6819      	ldr	r1, [r3, #0]
 800855c:	1d0a      	adds	r2, r1, #4
 800855e:	0605      	lsls	r5, r0, #24
 8008560:	d50b      	bpl.n	800857a <_printf_i+0x9e>
 8008562:	680d      	ldr	r5, [r1, #0]
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	2d00      	cmp	r5, #0
 8008568:	da03      	bge.n	8008572 <_printf_i+0x96>
 800856a:	232d      	movs	r3, #45	; 0x2d
 800856c:	9a04      	ldr	r2, [sp, #16]
 800856e:	426d      	negs	r5, r5
 8008570:	7013      	strb	r3, [r2, #0]
 8008572:	4b61      	ldr	r3, [pc, #388]	; (80086f8 <_printf_i+0x21c>)
 8008574:	270a      	movs	r7, #10
 8008576:	9303      	str	r3, [sp, #12]
 8008578:	e01b      	b.n	80085b2 <_printf_i+0xd6>
 800857a:	680d      	ldr	r5, [r1, #0]
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	0641      	lsls	r1, r0, #25
 8008580:	d5f1      	bpl.n	8008566 <_printf_i+0x8a>
 8008582:	b22d      	sxth	r5, r5
 8008584:	e7ef      	b.n	8008566 <_printf_i+0x8a>
 8008586:	680d      	ldr	r5, [r1, #0]
 8008588:	6819      	ldr	r1, [r3, #0]
 800858a:	1d08      	adds	r0, r1, #4
 800858c:	6018      	str	r0, [r3, #0]
 800858e:	062e      	lsls	r6, r5, #24
 8008590:	d501      	bpl.n	8008596 <_printf_i+0xba>
 8008592:	680d      	ldr	r5, [r1, #0]
 8008594:	e003      	b.n	800859e <_printf_i+0xc2>
 8008596:	066d      	lsls	r5, r5, #25
 8008598:	d5fb      	bpl.n	8008592 <_printf_i+0xb6>
 800859a:	680d      	ldr	r5, [r1, #0]
 800859c:	b2ad      	uxth	r5, r5
 800859e:	4b56      	ldr	r3, [pc, #344]	; (80086f8 <_printf_i+0x21c>)
 80085a0:	2708      	movs	r7, #8
 80085a2:	9303      	str	r3, [sp, #12]
 80085a4:	2a6f      	cmp	r2, #111	; 0x6f
 80085a6:	d000      	beq.n	80085aa <_printf_i+0xce>
 80085a8:	3702      	adds	r7, #2
 80085aa:	0023      	movs	r3, r4
 80085ac:	2200      	movs	r2, #0
 80085ae:	3343      	adds	r3, #67	; 0x43
 80085b0:	701a      	strb	r2, [r3, #0]
 80085b2:	6863      	ldr	r3, [r4, #4]
 80085b4:	60a3      	str	r3, [r4, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	db03      	blt.n	80085c2 <_printf_i+0xe6>
 80085ba:	2204      	movs	r2, #4
 80085bc:	6821      	ldr	r1, [r4, #0]
 80085be:	4391      	bics	r1, r2
 80085c0:	6021      	str	r1, [r4, #0]
 80085c2:	2d00      	cmp	r5, #0
 80085c4:	d102      	bne.n	80085cc <_printf_i+0xf0>
 80085c6:	9e04      	ldr	r6, [sp, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00c      	beq.n	80085e6 <_printf_i+0x10a>
 80085cc:	9e04      	ldr	r6, [sp, #16]
 80085ce:	0028      	movs	r0, r5
 80085d0:	0039      	movs	r1, r7
 80085d2:	f7f7 fe3b 	bl	800024c <__aeabi_uidivmod>
 80085d6:	9b03      	ldr	r3, [sp, #12]
 80085d8:	3e01      	subs	r6, #1
 80085da:	5c5b      	ldrb	r3, [r3, r1]
 80085dc:	7033      	strb	r3, [r6, #0]
 80085de:	002b      	movs	r3, r5
 80085e0:	0005      	movs	r5, r0
 80085e2:	429f      	cmp	r7, r3
 80085e4:	d9f3      	bls.n	80085ce <_printf_i+0xf2>
 80085e6:	2f08      	cmp	r7, #8
 80085e8:	d109      	bne.n	80085fe <_printf_i+0x122>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	07db      	lsls	r3, r3, #31
 80085ee:	d506      	bpl.n	80085fe <_printf_i+0x122>
 80085f0:	6863      	ldr	r3, [r4, #4]
 80085f2:	6922      	ldr	r2, [r4, #16]
 80085f4:	4293      	cmp	r3, r2
 80085f6:	dc02      	bgt.n	80085fe <_printf_i+0x122>
 80085f8:	2330      	movs	r3, #48	; 0x30
 80085fa:	3e01      	subs	r6, #1
 80085fc:	7033      	strb	r3, [r6, #0]
 80085fe:	9b04      	ldr	r3, [sp, #16]
 8008600:	1b9b      	subs	r3, r3, r6
 8008602:	6123      	str	r3, [r4, #16]
 8008604:	9b07      	ldr	r3, [sp, #28]
 8008606:	0021      	movs	r1, r4
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	9805      	ldr	r0, [sp, #20]
 800860c:	9b06      	ldr	r3, [sp, #24]
 800860e:	aa09      	add	r2, sp, #36	; 0x24
 8008610:	f7ff fef4 	bl	80083fc <_printf_common>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d14c      	bne.n	80086b2 <_printf_i+0x1d6>
 8008618:	2001      	movs	r0, #1
 800861a:	4240      	negs	r0, r0
 800861c:	b00b      	add	sp, #44	; 0x2c
 800861e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008620:	3145      	adds	r1, #69	; 0x45
 8008622:	700a      	strb	r2, [r1, #0]
 8008624:	4a34      	ldr	r2, [pc, #208]	; (80086f8 <_printf_i+0x21c>)
 8008626:	9203      	str	r2, [sp, #12]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	6821      	ldr	r1, [r4, #0]
 800862c:	ca20      	ldmia	r2!, {r5}
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	0608      	lsls	r0, r1, #24
 8008632:	d516      	bpl.n	8008662 <_printf_i+0x186>
 8008634:	07cb      	lsls	r3, r1, #31
 8008636:	d502      	bpl.n	800863e <_printf_i+0x162>
 8008638:	2320      	movs	r3, #32
 800863a:	4319      	orrs	r1, r3
 800863c:	6021      	str	r1, [r4, #0]
 800863e:	2710      	movs	r7, #16
 8008640:	2d00      	cmp	r5, #0
 8008642:	d1b2      	bne.n	80085aa <_printf_i+0xce>
 8008644:	2320      	movs	r3, #32
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	439a      	bics	r2, r3
 800864a:	6022      	str	r2, [r4, #0]
 800864c:	e7ad      	b.n	80085aa <_printf_i+0xce>
 800864e:	2220      	movs	r2, #32
 8008650:	6809      	ldr	r1, [r1, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	6022      	str	r2, [r4, #0]
 8008656:	0022      	movs	r2, r4
 8008658:	2178      	movs	r1, #120	; 0x78
 800865a:	3245      	adds	r2, #69	; 0x45
 800865c:	7011      	strb	r1, [r2, #0]
 800865e:	4a27      	ldr	r2, [pc, #156]	; (80086fc <_printf_i+0x220>)
 8008660:	e7e1      	b.n	8008626 <_printf_i+0x14a>
 8008662:	0648      	lsls	r0, r1, #25
 8008664:	d5e6      	bpl.n	8008634 <_printf_i+0x158>
 8008666:	b2ad      	uxth	r5, r5
 8008668:	e7e4      	b.n	8008634 <_printf_i+0x158>
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	680d      	ldr	r5, [r1, #0]
 800866e:	1d10      	adds	r0, r2, #4
 8008670:	6949      	ldr	r1, [r1, #20]
 8008672:	6018      	str	r0, [r3, #0]
 8008674:	6813      	ldr	r3, [r2, #0]
 8008676:	062e      	lsls	r6, r5, #24
 8008678:	d501      	bpl.n	800867e <_printf_i+0x1a2>
 800867a:	6019      	str	r1, [r3, #0]
 800867c:	e002      	b.n	8008684 <_printf_i+0x1a8>
 800867e:	066d      	lsls	r5, r5, #25
 8008680:	d5fb      	bpl.n	800867a <_printf_i+0x19e>
 8008682:	8019      	strh	r1, [r3, #0]
 8008684:	2300      	movs	r3, #0
 8008686:	9e04      	ldr	r6, [sp, #16]
 8008688:	6123      	str	r3, [r4, #16]
 800868a:	e7bb      	b.n	8008604 <_printf_i+0x128>
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	1d11      	adds	r1, r2, #4
 8008690:	6019      	str	r1, [r3, #0]
 8008692:	6816      	ldr	r6, [r2, #0]
 8008694:	2100      	movs	r1, #0
 8008696:	0030      	movs	r0, r6
 8008698:	6862      	ldr	r2, [r4, #4]
 800869a:	f000 ff39 	bl	8009510 <memchr>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d001      	beq.n	80086a6 <_printf_i+0x1ca>
 80086a2:	1b80      	subs	r0, r0, r6
 80086a4:	6060      	str	r0, [r4, #4]
 80086a6:	6863      	ldr	r3, [r4, #4]
 80086a8:	6123      	str	r3, [r4, #16]
 80086aa:	2300      	movs	r3, #0
 80086ac:	9a04      	ldr	r2, [sp, #16]
 80086ae:	7013      	strb	r3, [r2, #0]
 80086b0:	e7a8      	b.n	8008604 <_printf_i+0x128>
 80086b2:	6923      	ldr	r3, [r4, #16]
 80086b4:	0032      	movs	r2, r6
 80086b6:	9906      	ldr	r1, [sp, #24]
 80086b8:	9805      	ldr	r0, [sp, #20]
 80086ba:	9d07      	ldr	r5, [sp, #28]
 80086bc:	47a8      	blx	r5
 80086be:	1c43      	adds	r3, r0, #1
 80086c0:	d0aa      	beq.n	8008618 <_printf_i+0x13c>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	079b      	lsls	r3, r3, #30
 80086c6:	d415      	bmi.n	80086f4 <_printf_i+0x218>
 80086c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ca:	68e0      	ldr	r0, [r4, #12]
 80086cc:	4298      	cmp	r0, r3
 80086ce:	daa5      	bge.n	800861c <_printf_i+0x140>
 80086d0:	0018      	movs	r0, r3
 80086d2:	e7a3      	b.n	800861c <_printf_i+0x140>
 80086d4:	0022      	movs	r2, r4
 80086d6:	2301      	movs	r3, #1
 80086d8:	9906      	ldr	r1, [sp, #24]
 80086da:	9805      	ldr	r0, [sp, #20]
 80086dc:	9e07      	ldr	r6, [sp, #28]
 80086de:	3219      	adds	r2, #25
 80086e0:	47b0      	blx	r6
 80086e2:	1c43      	adds	r3, r0, #1
 80086e4:	d098      	beq.n	8008618 <_printf_i+0x13c>
 80086e6:	3501      	adds	r5, #1
 80086e8:	68e3      	ldr	r3, [r4, #12]
 80086ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086ec:	1a9b      	subs	r3, r3, r2
 80086ee:	42ab      	cmp	r3, r5
 80086f0:	dcf0      	bgt.n	80086d4 <_printf_i+0x1f8>
 80086f2:	e7e9      	b.n	80086c8 <_printf_i+0x1ec>
 80086f4:	2500      	movs	r5, #0
 80086f6:	e7f7      	b.n	80086e8 <_printf_i+0x20c>
 80086f8:	0800aeb6 	.word	0x0800aeb6
 80086fc:	0800aec7 	.word	0x0800aec7

08008700 <sniprintf>:
 8008700:	b40c      	push	{r2, r3}
 8008702:	b530      	push	{r4, r5, lr}
 8008704:	4b17      	ldr	r3, [pc, #92]	; (8008764 <sniprintf+0x64>)
 8008706:	000c      	movs	r4, r1
 8008708:	681d      	ldr	r5, [r3, #0]
 800870a:	b09d      	sub	sp, #116	; 0x74
 800870c:	2900      	cmp	r1, #0
 800870e:	da08      	bge.n	8008722 <sniprintf+0x22>
 8008710:	238b      	movs	r3, #139	; 0x8b
 8008712:	2001      	movs	r0, #1
 8008714:	602b      	str	r3, [r5, #0]
 8008716:	4240      	negs	r0, r0
 8008718:	b01d      	add	sp, #116	; 0x74
 800871a:	bc30      	pop	{r4, r5}
 800871c:	bc08      	pop	{r3}
 800871e:	b002      	add	sp, #8
 8008720:	4718      	bx	r3
 8008722:	2382      	movs	r3, #130	; 0x82
 8008724:	466a      	mov	r2, sp
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	8293      	strh	r3, [r2, #20]
 800872a:	2300      	movs	r3, #0
 800872c:	9002      	str	r0, [sp, #8]
 800872e:	9006      	str	r0, [sp, #24]
 8008730:	4299      	cmp	r1, r3
 8008732:	d000      	beq.n	8008736 <sniprintf+0x36>
 8008734:	1e4b      	subs	r3, r1, #1
 8008736:	9304      	str	r3, [sp, #16]
 8008738:	9307      	str	r3, [sp, #28]
 800873a:	2301      	movs	r3, #1
 800873c:	466a      	mov	r2, sp
 800873e:	425b      	negs	r3, r3
 8008740:	82d3      	strh	r3, [r2, #22]
 8008742:	0028      	movs	r0, r5
 8008744:	ab21      	add	r3, sp, #132	; 0x84
 8008746:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008748:	a902      	add	r1, sp, #8
 800874a:	9301      	str	r3, [sp, #4]
 800874c:	f001 fc00 	bl	8009f50 <_svfiprintf_r>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	da01      	bge.n	8008758 <sniprintf+0x58>
 8008754:	238b      	movs	r3, #139	; 0x8b
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	2c00      	cmp	r4, #0
 800875a:	d0dd      	beq.n	8008718 <sniprintf+0x18>
 800875c:	2300      	movs	r3, #0
 800875e:	9a02      	ldr	r2, [sp, #8]
 8008760:	7013      	strb	r3, [r2, #0]
 8008762:	e7d9      	b.n	8008718 <sniprintf+0x18>
 8008764:	2000000c 	.word	0x2000000c

08008768 <siprintf>:
 8008768:	b40e      	push	{r1, r2, r3}
 800876a:	b500      	push	{lr}
 800876c:	490b      	ldr	r1, [pc, #44]	; (800879c <siprintf+0x34>)
 800876e:	b09c      	sub	sp, #112	; 0x70
 8008770:	ab1d      	add	r3, sp, #116	; 0x74
 8008772:	9002      	str	r0, [sp, #8]
 8008774:	9006      	str	r0, [sp, #24]
 8008776:	9107      	str	r1, [sp, #28]
 8008778:	9104      	str	r1, [sp, #16]
 800877a:	4809      	ldr	r0, [pc, #36]	; (80087a0 <siprintf+0x38>)
 800877c:	4909      	ldr	r1, [pc, #36]	; (80087a4 <siprintf+0x3c>)
 800877e:	cb04      	ldmia	r3!, {r2}
 8008780:	9105      	str	r1, [sp, #20]
 8008782:	6800      	ldr	r0, [r0, #0]
 8008784:	a902      	add	r1, sp, #8
 8008786:	9301      	str	r3, [sp, #4]
 8008788:	f001 fbe2 	bl	8009f50 <_svfiprintf_r>
 800878c:	2300      	movs	r3, #0
 800878e:	9a02      	ldr	r2, [sp, #8]
 8008790:	7013      	strb	r3, [r2, #0]
 8008792:	b01c      	add	sp, #112	; 0x70
 8008794:	bc08      	pop	{r3}
 8008796:	b003      	add	sp, #12
 8008798:	4718      	bx	r3
 800879a:	46c0      	nop			; (mov r8, r8)
 800879c:	7fffffff 	.word	0x7fffffff
 80087a0:	2000000c 	.word	0x2000000c
 80087a4:	ffff0208 	.word	0xffff0208

080087a8 <quorem>:
 80087a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087aa:	0006      	movs	r6, r0
 80087ac:	690b      	ldr	r3, [r1, #16]
 80087ae:	6932      	ldr	r2, [r6, #16]
 80087b0:	b087      	sub	sp, #28
 80087b2:	2000      	movs	r0, #0
 80087b4:	9103      	str	r1, [sp, #12]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	db65      	blt.n	8008886 <quorem+0xde>
 80087ba:	3b01      	subs	r3, #1
 80087bc:	009c      	lsls	r4, r3, #2
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	000b      	movs	r3, r1
 80087c2:	3314      	adds	r3, #20
 80087c4:	9305      	str	r3, [sp, #20]
 80087c6:	191b      	adds	r3, r3, r4
 80087c8:	9304      	str	r3, [sp, #16]
 80087ca:	0033      	movs	r3, r6
 80087cc:	3314      	adds	r3, #20
 80087ce:	9302      	str	r3, [sp, #8]
 80087d0:	191c      	adds	r4, r3, r4
 80087d2:	9b04      	ldr	r3, [sp, #16]
 80087d4:	6827      	ldr	r7, [r4, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	0038      	movs	r0, r7
 80087da:	1c5d      	adds	r5, r3, #1
 80087dc:	0029      	movs	r1, r5
 80087de:	9301      	str	r3, [sp, #4]
 80087e0:	f7f7 fcae 	bl	8000140 <__udivsi3>
 80087e4:	9001      	str	r0, [sp, #4]
 80087e6:	42af      	cmp	r7, r5
 80087e8:	d324      	bcc.n	8008834 <quorem+0x8c>
 80087ea:	2500      	movs	r5, #0
 80087ec:	46ac      	mov	ip, r5
 80087ee:	9802      	ldr	r0, [sp, #8]
 80087f0:	9f05      	ldr	r7, [sp, #20]
 80087f2:	cf08      	ldmia	r7!, {r3}
 80087f4:	9a01      	ldr	r2, [sp, #4]
 80087f6:	b299      	uxth	r1, r3
 80087f8:	4351      	muls	r1, r2
 80087fa:	0c1b      	lsrs	r3, r3, #16
 80087fc:	4353      	muls	r3, r2
 80087fe:	1949      	adds	r1, r1, r5
 8008800:	0c0a      	lsrs	r2, r1, #16
 8008802:	189b      	adds	r3, r3, r2
 8008804:	6802      	ldr	r2, [r0, #0]
 8008806:	b289      	uxth	r1, r1
 8008808:	b292      	uxth	r2, r2
 800880a:	4462      	add	r2, ip
 800880c:	1a52      	subs	r2, r2, r1
 800880e:	6801      	ldr	r1, [r0, #0]
 8008810:	0c1d      	lsrs	r5, r3, #16
 8008812:	0c09      	lsrs	r1, r1, #16
 8008814:	b29b      	uxth	r3, r3
 8008816:	1acb      	subs	r3, r1, r3
 8008818:	1411      	asrs	r1, r2, #16
 800881a:	185b      	adds	r3, r3, r1
 800881c:	1419      	asrs	r1, r3, #16
 800881e:	b292      	uxth	r2, r2
 8008820:	041b      	lsls	r3, r3, #16
 8008822:	431a      	orrs	r2, r3
 8008824:	9b04      	ldr	r3, [sp, #16]
 8008826:	468c      	mov	ip, r1
 8008828:	c004      	stmia	r0!, {r2}
 800882a:	42bb      	cmp	r3, r7
 800882c:	d2e1      	bcs.n	80087f2 <quorem+0x4a>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d030      	beq.n	8008896 <quorem+0xee>
 8008834:	0030      	movs	r0, r6
 8008836:	9903      	ldr	r1, [sp, #12]
 8008838:	f001 f902 	bl	8009a40 <__mcmp>
 800883c:	2800      	cmp	r0, #0
 800883e:	db21      	blt.n	8008884 <quorem+0xdc>
 8008840:	0030      	movs	r0, r6
 8008842:	2400      	movs	r4, #0
 8008844:	9b01      	ldr	r3, [sp, #4]
 8008846:	9903      	ldr	r1, [sp, #12]
 8008848:	3301      	adds	r3, #1
 800884a:	9301      	str	r3, [sp, #4]
 800884c:	3014      	adds	r0, #20
 800884e:	3114      	adds	r1, #20
 8008850:	6803      	ldr	r3, [r0, #0]
 8008852:	c920      	ldmia	r1!, {r5}
 8008854:	b29a      	uxth	r2, r3
 8008856:	1914      	adds	r4, r2, r4
 8008858:	b2aa      	uxth	r2, r5
 800885a:	1aa2      	subs	r2, r4, r2
 800885c:	0c1b      	lsrs	r3, r3, #16
 800885e:	0c2d      	lsrs	r5, r5, #16
 8008860:	1414      	asrs	r4, r2, #16
 8008862:	1b5b      	subs	r3, r3, r5
 8008864:	191b      	adds	r3, r3, r4
 8008866:	141c      	asrs	r4, r3, #16
 8008868:	b292      	uxth	r2, r2
 800886a:	041b      	lsls	r3, r3, #16
 800886c:	4313      	orrs	r3, r2
 800886e:	c008      	stmia	r0!, {r3}
 8008870:	9b04      	ldr	r3, [sp, #16]
 8008872:	428b      	cmp	r3, r1
 8008874:	d2ec      	bcs.n	8008850 <quorem+0xa8>
 8008876:	9b00      	ldr	r3, [sp, #0]
 8008878:	9a02      	ldr	r2, [sp, #8]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	18d3      	adds	r3, r2, r3
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	2a00      	cmp	r2, #0
 8008882:	d015      	beq.n	80088b0 <quorem+0x108>
 8008884:	9801      	ldr	r0, [sp, #4]
 8008886:	b007      	add	sp, #28
 8008888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d106      	bne.n	800889e <quorem+0xf6>
 8008890:	9b00      	ldr	r3, [sp, #0]
 8008892:	3b01      	subs	r3, #1
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	9b02      	ldr	r3, [sp, #8]
 8008898:	3c04      	subs	r4, #4
 800889a:	42a3      	cmp	r3, r4
 800889c:	d3f5      	bcc.n	800888a <quorem+0xe2>
 800889e:	9b00      	ldr	r3, [sp, #0]
 80088a0:	6133      	str	r3, [r6, #16]
 80088a2:	e7c7      	b.n	8008834 <quorem+0x8c>
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	2a00      	cmp	r2, #0
 80088a8:	d106      	bne.n	80088b8 <quorem+0x110>
 80088aa:	9a00      	ldr	r2, [sp, #0]
 80088ac:	3a01      	subs	r2, #1
 80088ae:	9200      	str	r2, [sp, #0]
 80088b0:	9a02      	ldr	r2, [sp, #8]
 80088b2:	3b04      	subs	r3, #4
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d3f5      	bcc.n	80088a4 <quorem+0xfc>
 80088b8:	9b00      	ldr	r3, [sp, #0]
 80088ba:	6133      	str	r3, [r6, #16]
 80088bc:	e7e2      	b.n	8008884 <quorem+0xdc>
	...

080088c0 <_dtoa_r>:
 80088c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088c2:	b09d      	sub	sp, #116	; 0x74
 80088c4:	9202      	str	r2, [sp, #8]
 80088c6:	9303      	str	r3, [sp, #12]
 80088c8:	9b02      	ldr	r3, [sp, #8]
 80088ca:	9c03      	ldr	r4, [sp, #12]
 80088cc:	9308      	str	r3, [sp, #32]
 80088ce:	9409      	str	r4, [sp, #36]	; 0x24
 80088d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80088d2:	0007      	movs	r7, r0
 80088d4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80088d6:	2c00      	cmp	r4, #0
 80088d8:	d10e      	bne.n	80088f8 <_dtoa_r+0x38>
 80088da:	2010      	movs	r0, #16
 80088dc:	f000 fe0e 	bl	80094fc <malloc>
 80088e0:	1e02      	subs	r2, r0, #0
 80088e2:	6278      	str	r0, [r7, #36]	; 0x24
 80088e4:	d104      	bne.n	80088f0 <_dtoa_r+0x30>
 80088e6:	21ea      	movs	r1, #234	; 0xea
 80088e8:	4bc7      	ldr	r3, [pc, #796]	; (8008c08 <_dtoa_r+0x348>)
 80088ea:	48c8      	ldr	r0, [pc, #800]	; (8008c0c <_dtoa_r+0x34c>)
 80088ec:	f001 fc42 	bl	800a174 <__assert_func>
 80088f0:	6044      	str	r4, [r0, #4]
 80088f2:	6084      	str	r4, [r0, #8]
 80088f4:	6004      	str	r4, [r0, #0]
 80088f6:	60c4      	str	r4, [r0, #12]
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	6819      	ldr	r1, [r3, #0]
 80088fc:	2900      	cmp	r1, #0
 80088fe:	d00a      	beq.n	8008916 <_dtoa_r+0x56>
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	2301      	movs	r3, #1
 8008904:	4093      	lsls	r3, r2
 8008906:	604a      	str	r2, [r1, #4]
 8008908:	608b      	str	r3, [r1, #8]
 800890a:	0038      	movs	r0, r7
 800890c:	f000 fe58 	bl	80095c0 <_Bfree>
 8008910:	2200      	movs	r2, #0
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	da20      	bge.n	800895e <_dtoa_r+0x9e>
 800891c:	2301      	movs	r3, #1
 800891e:	602b      	str	r3, [r5, #0]
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	085b      	lsrs	r3, r3, #1
 8008926:	9309      	str	r3, [sp, #36]	; 0x24
 8008928:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800892a:	4bb9      	ldr	r3, [pc, #740]	; (8008c10 <_dtoa_r+0x350>)
 800892c:	4ab8      	ldr	r2, [pc, #736]	; (8008c10 <_dtoa_r+0x350>)
 800892e:	402b      	ands	r3, r5
 8008930:	4293      	cmp	r3, r2
 8008932:	d117      	bne.n	8008964 <_dtoa_r+0xa4>
 8008934:	4bb7      	ldr	r3, [pc, #732]	; (8008c14 <_dtoa_r+0x354>)
 8008936:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008938:	0328      	lsls	r0, r5, #12
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	9b02      	ldr	r3, [sp, #8]
 800893e:	0b00      	lsrs	r0, r0, #12
 8008940:	4318      	orrs	r0, r3
 8008942:	d101      	bne.n	8008948 <_dtoa_r+0x88>
 8008944:	f000 fdbf 	bl	80094c6 <_dtoa_r+0xc06>
 8008948:	48b3      	ldr	r0, [pc, #716]	; (8008c18 <_dtoa_r+0x358>)
 800894a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800894c:	9006      	str	r0, [sp, #24]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <_dtoa_r+0x98>
 8008952:	4bb2      	ldr	r3, [pc, #712]	; (8008c1c <_dtoa_r+0x35c>)
 8008954:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	9806      	ldr	r0, [sp, #24]
 800895a:	b01d      	add	sp, #116	; 0x74
 800895c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800895e:	2300      	movs	r3, #0
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	e7e1      	b.n	8008928 <_dtoa_r+0x68>
 8008964:	9b08      	ldr	r3, [sp, #32]
 8008966:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008968:	9312      	str	r3, [sp, #72]	; 0x48
 800896a:	9413      	str	r4, [sp, #76]	; 0x4c
 800896c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800896e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008970:	2200      	movs	r2, #0
 8008972:	2300      	movs	r3, #0
 8008974:	f7f7 fd6a 	bl	800044c <__aeabi_dcmpeq>
 8008978:	1e04      	subs	r4, r0, #0
 800897a:	d009      	beq.n	8008990 <_dtoa_r+0xd0>
 800897c:	2301      	movs	r3, #1
 800897e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	4ba7      	ldr	r3, [pc, #668]	; (8008c20 <_dtoa_r+0x360>)
 8008984:	9306      	str	r3, [sp, #24]
 8008986:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0e5      	beq.n	8008958 <_dtoa_r+0x98>
 800898c:	4ba5      	ldr	r3, [pc, #660]	; (8008c24 <_dtoa_r+0x364>)
 800898e:	e7e1      	b.n	8008954 <_dtoa_r+0x94>
 8008990:	ab1a      	add	r3, sp, #104	; 0x68
 8008992:	9301      	str	r3, [sp, #4]
 8008994:	ab1b      	add	r3, sp, #108	; 0x6c
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	0038      	movs	r0, r7
 800899a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800899c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800899e:	f001 f903 	bl	8009ba8 <__d2b>
 80089a2:	006e      	lsls	r6, r5, #1
 80089a4:	9005      	str	r0, [sp, #20]
 80089a6:	0d76      	lsrs	r6, r6, #21
 80089a8:	d100      	bne.n	80089ac <_dtoa_r+0xec>
 80089aa:	e07c      	b.n	8008aa6 <_dtoa_r+0x1e6>
 80089ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80089b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089b2:	4a9d      	ldr	r2, [pc, #628]	; (8008c28 <_dtoa_r+0x368>)
 80089b4:	031b      	lsls	r3, r3, #12
 80089b6:	0b1b      	lsrs	r3, r3, #12
 80089b8:	431a      	orrs	r2, r3
 80089ba:	0011      	movs	r1, r2
 80089bc:	4b9b      	ldr	r3, [pc, #620]	; (8008c2c <_dtoa_r+0x36c>)
 80089be:	9418      	str	r4, [sp, #96]	; 0x60
 80089c0:	18f6      	adds	r6, r6, r3
 80089c2:	2200      	movs	r2, #0
 80089c4:	4b9a      	ldr	r3, [pc, #616]	; (8008c30 <_dtoa_r+0x370>)
 80089c6:	f7f9 faeb 	bl	8001fa0 <__aeabi_dsub>
 80089ca:	4a9a      	ldr	r2, [pc, #616]	; (8008c34 <_dtoa_r+0x374>)
 80089cc:	4b9a      	ldr	r3, [pc, #616]	; (8008c38 <_dtoa_r+0x378>)
 80089ce:	f7f9 f87b 	bl	8001ac8 <__aeabi_dmul>
 80089d2:	4a9a      	ldr	r2, [pc, #616]	; (8008c3c <_dtoa_r+0x37c>)
 80089d4:	4b9a      	ldr	r3, [pc, #616]	; (8008c40 <_dtoa_r+0x380>)
 80089d6:	f7f8 f939 	bl	8000c4c <__aeabi_dadd>
 80089da:	0004      	movs	r4, r0
 80089dc:	0030      	movs	r0, r6
 80089de:	000d      	movs	r5, r1
 80089e0:	f7f9 fec4 	bl	800276c <__aeabi_i2d>
 80089e4:	4a97      	ldr	r2, [pc, #604]	; (8008c44 <_dtoa_r+0x384>)
 80089e6:	4b98      	ldr	r3, [pc, #608]	; (8008c48 <_dtoa_r+0x388>)
 80089e8:	f7f9 f86e 	bl	8001ac8 <__aeabi_dmul>
 80089ec:	0002      	movs	r2, r0
 80089ee:	000b      	movs	r3, r1
 80089f0:	0020      	movs	r0, r4
 80089f2:	0029      	movs	r1, r5
 80089f4:	f7f8 f92a 	bl	8000c4c <__aeabi_dadd>
 80089f8:	0004      	movs	r4, r0
 80089fa:	000d      	movs	r5, r1
 80089fc:	f7f9 fe80 	bl	8002700 <__aeabi_d2iz>
 8008a00:	2200      	movs	r2, #0
 8008a02:	9002      	str	r0, [sp, #8]
 8008a04:	2300      	movs	r3, #0
 8008a06:	0020      	movs	r0, r4
 8008a08:	0029      	movs	r1, r5
 8008a0a:	f7f7 fd25 	bl	8000458 <__aeabi_dcmplt>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d00b      	beq.n	8008a2a <_dtoa_r+0x16a>
 8008a12:	9802      	ldr	r0, [sp, #8]
 8008a14:	f7f9 feaa 	bl	800276c <__aeabi_i2d>
 8008a18:	002b      	movs	r3, r5
 8008a1a:	0022      	movs	r2, r4
 8008a1c:	f7f7 fd16 	bl	800044c <__aeabi_dcmpeq>
 8008a20:	4243      	negs	r3, r0
 8008a22:	4158      	adcs	r0, r3
 8008a24:	9b02      	ldr	r3, [sp, #8]
 8008a26:	1a1b      	subs	r3, r3, r0
 8008a28:	9302      	str	r3, [sp, #8]
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	9316      	str	r3, [sp, #88]	; 0x58
 8008a2e:	9b02      	ldr	r3, [sp, #8]
 8008a30:	2b16      	cmp	r3, #22
 8008a32:	d80f      	bhi.n	8008a54 <_dtoa_r+0x194>
 8008a34:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a36:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008a38:	00da      	lsls	r2, r3, #3
 8008a3a:	4b84      	ldr	r3, [pc, #528]	; (8008c4c <_dtoa_r+0x38c>)
 8008a3c:	189b      	adds	r3, r3, r2
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f7f7 fd09 	bl	8000458 <__aeabi_dcmplt>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d049      	beq.n	8008ade <_dtoa_r+0x21e>
 8008a4a:	9b02      	ldr	r3, [sp, #8]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	9302      	str	r3, [sp, #8]
 8008a50:	2300      	movs	r3, #0
 8008a52:	9316      	str	r3, [sp, #88]	; 0x58
 8008a54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008a56:	1b9e      	subs	r6, r3, r6
 8008a58:	2300      	movs	r3, #0
 8008a5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a5c:	0033      	movs	r3, r6
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	930d      	str	r3, [sp, #52]	; 0x34
 8008a62:	d504      	bpl.n	8008a6e <_dtoa_r+0x1ae>
 8008a64:	2301      	movs	r3, #1
 8008a66:	1b9b      	subs	r3, r3, r6
 8008a68:	930a      	str	r3, [sp, #40]	; 0x28
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	930d      	str	r3, [sp, #52]	; 0x34
 8008a6e:	9b02      	ldr	r3, [sp, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	db36      	blt.n	8008ae2 <_dtoa_r+0x222>
 8008a74:	9a02      	ldr	r2, [sp, #8]
 8008a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a78:	4694      	mov	ip, r2
 8008a7a:	4463      	add	r3, ip
 8008a7c:	930d      	str	r3, [sp, #52]	; 0x34
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9215      	str	r2, [sp, #84]	; 0x54
 8008a82:	930e      	str	r3, [sp, #56]	; 0x38
 8008a84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a86:	2401      	movs	r4, #1
 8008a88:	2b09      	cmp	r3, #9
 8008a8a:	d864      	bhi.n	8008b56 <_dtoa_r+0x296>
 8008a8c:	2b05      	cmp	r3, #5
 8008a8e:	dd02      	ble.n	8008a96 <_dtoa_r+0x1d6>
 8008a90:	2400      	movs	r4, #0
 8008a92:	3b04      	subs	r3, #4
 8008a94:	9322      	str	r3, [sp, #136]	; 0x88
 8008a96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a98:	1e98      	subs	r0, r3, #2
 8008a9a:	2803      	cmp	r0, #3
 8008a9c:	d864      	bhi.n	8008b68 <_dtoa_r+0x2a8>
 8008a9e:	f7f7 fb3b 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008aa2:	3829      	.short	0x3829
 8008aa4:	5836      	.short	0x5836
 8008aa6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008aa8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008aaa:	189e      	adds	r6, r3, r2
 8008aac:	4b68      	ldr	r3, [pc, #416]	; (8008c50 <_dtoa_r+0x390>)
 8008aae:	18f2      	adds	r2, r6, r3
 8008ab0:	2a20      	cmp	r2, #32
 8008ab2:	dd0f      	ble.n	8008ad4 <_dtoa_r+0x214>
 8008ab4:	2340      	movs	r3, #64	; 0x40
 8008ab6:	1a9b      	subs	r3, r3, r2
 8008ab8:	409d      	lsls	r5, r3
 8008aba:	4b66      	ldr	r3, [pc, #408]	; (8008c54 <_dtoa_r+0x394>)
 8008abc:	9802      	ldr	r0, [sp, #8]
 8008abe:	18f3      	adds	r3, r6, r3
 8008ac0:	40d8      	lsrs	r0, r3
 8008ac2:	4328      	orrs	r0, r5
 8008ac4:	f7f9 fe82 	bl	80027cc <__aeabi_ui2d>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4c63      	ldr	r4, [pc, #396]	; (8008c58 <_dtoa_r+0x398>)
 8008acc:	3e01      	subs	r6, #1
 8008ace:	1909      	adds	r1, r1, r4
 8008ad0:	9318      	str	r3, [sp, #96]	; 0x60
 8008ad2:	e776      	b.n	80089c2 <_dtoa_r+0x102>
 8008ad4:	2320      	movs	r3, #32
 8008ad6:	9802      	ldr	r0, [sp, #8]
 8008ad8:	1a9b      	subs	r3, r3, r2
 8008ada:	4098      	lsls	r0, r3
 8008adc:	e7f2      	b.n	8008ac4 <_dtoa_r+0x204>
 8008ade:	9016      	str	r0, [sp, #88]	; 0x58
 8008ae0:	e7b8      	b.n	8008a54 <_dtoa_r+0x194>
 8008ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae4:	9a02      	ldr	r2, [sp, #8]
 8008ae6:	1a9b      	subs	r3, r3, r2
 8008ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8008aea:	4253      	negs	r3, r2
 8008aec:	930e      	str	r3, [sp, #56]	; 0x38
 8008aee:	2300      	movs	r3, #0
 8008af0:	9315      	str	r3, [sp, #84]	; 0x54
 8008af2:	e7c7      	b.n	8008a84 <_dtoa_r+0x1c4>
 8008af4:	2300      	movs	r3, #0
 8008af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008af8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008afa:	930c      	str	r3, [sp, #48]	; 0x30
 8008afc:	9307      	str	r3, [sp, #28]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dc13      	bgt.n	8008b2a <_dtoa_r+0x26a>
 8008b02:	2301      	movs	r3, #1
 8008b04:	001a      	movs	r2, r3
 8008b06:	930c      	str	r3, [sp, #48]	; 0x30
 8008b08:	9307      	str	r3, [sp, #28]
 8008b0a:	9223      	str	r2, [sp, #140]	; 0x8c
 8008b0c:	e00d      	b.n	8008b2a <_dtoa_r+0x26a>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e7f1      	b.n	8008af6 <_dtoa_r+0x236>
 8008b12:	2300      	movs	r3, #0
 8008b14:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b18:	4694      	mov	ip, r2
 8008b1a:	9b02      	ldr	r3, [sp, #8]
 8008b1c:	4463      	add	r3, ip
 8008b1e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b20:	3301      	adds	r3, #1
 8008b22:	9307      	str	r3, [sp, #28]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dc00      	bgt.n	8008b2a <_dtoa_r+0x26a>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b2e:	6042      	str	r2, [r0, #4]
 8008b30:	3204      	adds	r2, #4
 8008b32:	0015      	movs	r5, r2
 8008b34:	3514      	adds	r5, #20
 8008b36:	6841      	ldr	r1, [r0, #4]
 8008b38:	429d      	cmp	r5, r3
 8008b3a:	d919      	bls.n	8008b70 <_dtoa_r+0x2b0>
 8008b3c:	0038      	movs	r0, r7
 8008b3e:	f000 fcfb 	bl	8009538 <_Balloc>
 8008b42:	9006      	str	r0, [sp, #24]
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d117      	bne.n	8008b78 <_dtoa_r+0x2b8>
 8008b48:	21d5      	movs	r1, #213	; 0xd5
 8008b4a:	0002      	movs	r2, r0
 8008b4c:	4b43      	ldr	r3, [pc, #268]	; (8008c5c <_dtoa_r+0x39c>)
 8008b4e:	0049      	lsls	r1, r1, #1
 8008b50:	e6cb      	b.n	80088ea <_dtoa_r+0x2a>
 8008b52:	2301      	movs	r3, #1
 8008b54:	e7de      	b.n	8008b14 <_dtoa_r+0x254>
 8008b56:	2300      	movs	r3, #0
 8008b58:	940f      	str	r4, [sp, #60]	; 0x3c
 8008b5a:	9322      	str	r3, [sp, #136]	; 0x88
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b60:	9307      	str	r3, [sp, #28]
 8008b62:	2200      	movs	r2, #0
 8008b64:	3313      	adds	r3, #19
 8008b66:	e7d0      	b.n	8008b0a <_dtoa_r+0x24a>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b6c:	3b02      	subs	r3, #2
 8008b6e:	e7f6      	b.n	8008b5e <_dtoa_r+0x29e>
 8008b70:	3101      	adds	r1, #1
 8008b72:	6041      	str	r1, [r0, #4]
 8008b74:	0052      	lsls	r2, r2, #1
 8008b76:	e7dc      	b.n	8008b32 <_dtoa_r+0x272>
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	9a06      	ldr	r2, [sp, #24]
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	9b07      	ldr	r3, [sp, #28]
 8008b80:	2b0e      	cmp	r3, #14
 8008b82:	d900      	bls.n	8008b86 <_dtoa_r+0x2c6>
 8008b84:	e0eb      	b.n	8008d5e <_dtoa_r+0x49e>
 8008b86:	2c00      	cmp	r4, #0
 8008b88:	d100      	bne.n	8008b8c <_dtoa_r+0x2cc>
 8008b8a:	e0e8      	b.n	8008d5e <_dtoa_r+0x49e>
 8008b8c:	9b02      	ldr	r3, [sp, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dd68      	ble.n	8008c64 <_dtoa_r+0x3a4>
 8008b92:	001a      	movs	r2, r3
 8008b94:	210f      	movs	r1, #15
 8008b96:	4b2d      	ldr	r3, [pc, #180]	; (8008c4c <_dtoa_r+0x38c>)
 8008b98:	400a      	ands	r2, r1
 8008b9a:	00d2      	lsls	r2, r2, #3
 8008b9c:	189b      	adds	r3, r3, r2
 8008b9e:	681d      	ldr	r5, [r3, #0]
 8008ba0:	685e      	ldr	r6, [r3, #4]
 8008ba2:	9b02      	ldr	r3, [sp, #8]
 8008ba4:	111c      	asrs	r4, r3, #4
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	9310      	str	r3, [sp, #64]	; 0x40
 8008baa:	9b02      	ldr	r3, [sp, #8]
 8008bac:	05db      	lsls	r3, r3, #23
 8008bae:	d50b      	bpl.n	8008bc8 <_dtoa_r+0x308>
 8008bb0:	4b2b      	ldr	r3, [pc, #172]	; (8008c60 <_dtoa_r+0x3a0>)
 8008bb2:	400c      	ands	r4, r1
 8008bb4:	6a1a      	ldr	r2, [r3, #32]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008bba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008bbc:	f7f8 fb82 	bl	80012c4 <__aeabi_ddiv>
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	9008      	str	r0, [sp, #32]
 8008bc4:	9109      	str	r1, [sp, #36]	; 0x24
 8008bc6:	9310      	str	r3, [sp, #64]	; 0x40
 8008bc8:	4b25      	ldr	r3, [pc, #148]	; (8008c60 <_dtoa_r+0x3a0>)
 8008bca:	9314      	str	r3, [sp, #80]	; 0x50
 8008bcc:	2c00      	cmp	r4, #0
 8008bce:	d108      	bne.n	8008be2 <_dtoa_r+0x322>
 8008bd0:	9808      	ldr	r0, [sp, #32]
 8008bd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bd4:	002a      	movs	r2, r5
 8008bd6:	0033      	movs	r3, r6
 8008bd8:	f7f8 fb74 	bl	80012c4 <__aeabi_ddiv>
 8008bdc:	9008      	str	r0, [sp, #32]
 8008bde:	9109      	str	r1, [sp, #36]	; 0x24
 8008be0:	e05c      	b.n	8008c9c <_dtoa_r+0x3dc>
 8008be2:	2301      	movs	r3, #1
 8008be4:	421c      	tst	r4, r3
 8008be6:	d00b      	beq.n	8008c00 <_dtoa_r+0x340>
 8008be8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bea:	0028      	movs	r0, r5
 8008bec:	3301      	adds	r3, #1
 8008bee:	9310      	str	r3, [sp, #64]	; 0x40
 8008bf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bf2:	0031      	movs	r1, r6
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f7f8 ff66 	bl	8001ac8 <__aeabi_dmul>
 8008bfc:	0005      	movs	r5, r0
 8008bfe:	000e      	movs	r6, r1
 8008c00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c02:	1064      	asrs	r4, r4, #1
 8008c04:	3308      	adds	r3, #8
 8008c06:	e7e0      	b.n	8008bca <_dtoa_r+0x30a>
 8008c08:	0800aee5 	.word	0x0800aee5
 8008c0c:	0800aefc 	.word	0x0800aefc
 8008c10:	7ff00000 	.word	0x7ff00000
 8008c14:	0000270f 	.word	0x0000270f
 8008c18:	0800aee1 	.word	0x0800aee1
 8008c1c:	0800aee4 	.word	0x0800aee4
 8008c20:	0800aeb4 	.word	0x0800aeb4
 8008c24:	0800aeb5 	.word	0x0800aeb5
 8008c28:	3ff00000 	.word	0x3ff00000
 8008c2c:	fffffc01 	.word	0xfffffc01
 8008c30:	3ff80000 	.word	0x3ff80000
 8008c34:	636f4361 	.word	0x636f4361
 8008c38:	3fd287a7 	.word	0x3fd287a7
 8008c3c:	8b60c8b3 	.word	0x8b60c8b3
 8008c40:	3fc68a28 	.word	0x3fc68a28
 8008c44:	509f79fb 	.word	0x509f79fb
 8008c48:	3fd34413 	.word	0x3fd34413
 8008c4c:	0800aff0 	.word	0x0800aff0
 8008c50:	00000432 	.word	0x00000432
 8008c54:	00000412 	.word	0x00000412
 8008c58:	fe100000 	.word	0xfe100000
 8008c5c:	0800af57 	.word	0x0800af57
 8008c60:	0800afc8 	.word	0x0800afc8
 8008c64:	2302      	movs	r3, #2
 8008c66:	9310      	str	r3, [sp, #64]	; 0x40
 8008c68:	9b02      	ldr	r3, [sp, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d016      	beq.n	8008c9c <_dtoa_r+0x3dc>
 8008c6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008c70:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c72:	425c      	negs	r4, r3
 8008c74:	230f      	movs	r3, #15
 8008c76:	4ab6      	ldr	r2, [pc, #728]	; (8008f50 <_dtoa_r+0x690>)
 8008c78:	4023      	ands	r3, r4
 8008c7a:	00db      	lsls	r3, r3, #3
 8008c7c:	18d3      	adds	r3, r2, r3
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f7f8 ff21 	bl	8001ac8 <__aeabi_dmul>
 8008c86:	2601      	movs	r6, #1
 8008c88:	2300      	movs	r3, #0
 8008c8a:	9008      	str	r0, [sp, #32]
 8008c8c:	9109      	str	r1, [sp, #36]	; 0x24
 8008c8e:	4db1      	ldr	r5, [pc, #708]	; (8008f54 <_dtoa_r+0x694>)
 8008c90:	1124      	asrs	r4, r4, #4
 8008c92:	2c00      	cmp	r4, #0
 8008c94:	d000      	beq.n	8008c98 <_dtoa_r+0x3d8>
 8008c96:	e094      	b.n	8008dc2 <_dtoa_r+0x502>
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d19f      	bne.n	8008bdc <_dtoa_r+0x31c>
 8008c9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d100      	bne.n	8008ca4 <_dtoa_r+0x3e4>
 8008ca2:	e09b      	b.n	8008ddc <_dtoa_r+0x51c>
 8008ca4:	9c08      	ldr	r4, [sp, #32]
 8008ca6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ca8:	2200      	movs	r2, #0
 8008caa:	0020      	movs	r0, r4
 8008cac:	0029      	movs	r1, r5
 8008cae:	4baa      	ldr	r3, [pc, #680]	; (8008f58 <_dtoa_r+0x698>)
 8008cb0:	f7f7 fbd2 	bl	8000458 <__aeabi_dcmplt>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d100      	bne.n	8008cba <_dtoa_r+0x3fa>
 8008cb8:	e090      	b.n	8008ddc <_dtoa_r+0x51c>
 8008cba:	9b07      	ldr	r3, [sp, #28]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d100      	bne.n	8008cc2 <_dtoa_r+0x402>
 8008cc0:	e08c      	b.n	8008ddc <_dtoa_r+0x51c>
 8008cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dd46      	ble.n	8008d56 <_dtoa_r+0x496>
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	0020      	movs	r0, r4
 8008cce:	0029      	movs	r1, r5
 8008cd0:	1e5e      	subs	r6, r3, #1
 8008cd2:	4ba2      	ldr	r3, [pc, #648]	; (8008f5c <_dtoa_r+0x69c>)
 8008cd4:	f7f8 fef8 	bl	8001ac8 <__aeabi_dmul>
 8008cd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cda:	9008      	str	r0, [sp, #32]
 8008cdc:	9109      	str	r1, [sp, #36]	; 0x24
 8008cde:	3301      	adds	r3, #1
 8008ce0:	9310      	str	r3, [sp, #64]	; 0x40
 8008ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ce4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008ce6:	9c08      	ldr	r4, [sp, #32]
 8008ce8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008cea:	9314      	str	r3, [sp, #80]	; 0x50
 8008cec:	f7f9 fd3e 	bl	800276c <__aeabi_i2d>
 8008cf0:	0022      	movs	r2, r4
 8008cf2:	002b      	movs	r3, r5
 8008cf4:	f7f8 fee8 	bl	8001ac8 <__aeabi_dmul>
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	4b99      	ldr	r3, [pc, #612]	; (8008f60 <_dtoa_r+0x6a0>)
 8008cfc:	f7f7 ffa6 	bl	8000c4c <__aeabi_dadd>
 8008d00:	9010      	str	r0, [sp, #64]	; 0x40
 8008d02:	9111      	str	r1, [sp, #68]	; 0x44
 8008d04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d08:	9208      	str	r2, [sp, #32]
 8008d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0c:	4a95      	ldr	r2, [pc, #596]	; (8008f64 <_dtoa_r+0x6a4>)
 8008d0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d10:	4694      	mov	ip, r2
 8008d12:	4463      	add	r3, ip
 8008d14:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d16:	9309      	str	r3, [sp, #36]	; 0x24
 8008d18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d161      	bne.n	8008de2 <_dtoa_r+0x522>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	0020      	movs	r0, r4
 8008d22:	0029      	movs	r1, r5
 8008d24:	4b90      	ldr	r3, [pc, #576]	; (8008f68 <_dtoa_r+0x6a8>)
 8008d26:	f7f9 f93b 	bl	8001fa0 <__aeabi_dsub>
 8008d2a:	9a08      	ldr	r2, [sp, #32]
 8008d2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d2e:	0004      	movs	r4, r0
 8008d30:	000d      	movs	r5, r1
 8008d32:	f7f7 fba5 	bl	8000480 <__aeabi_dcmpgt>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d000      	beq.n	8008d3c <_dtoa_r+0x47c>
 8008d3a:	e2af      	b.n	800929c <_dtoa_r+0x9dc>
 8008d3c:	488b      	ldr	r0, [pc, #556]	; (8008f6c <_dtoa_r+0x6ac>)
 8008d3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008d40:	4684      	mov	ip, r0
 8008d42:	4461      	add	r1, ip
 8008d44:	000b      	movs	r3, r1
 8008d46:	0020      	movs	r0, r4
 8008d48:	0029      	movs	r1, r5
 8008d4a:	9a08      	ldr	r2, [sp, #32]
 8008d4c:	f7f7 fb84 	bl	8000458 <__aeabi_dcmplt>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d000      	beq.n	8008d56 <_dtoa_r+0x496>
 8008d54:	e29f      	b.n	8009296 <_dtoa_r+0x9d6>
 8008d56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d58:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008d5a:	9308      	str	r3, [sp, #32]
 8008d5c:	9409      	str	r4, [sp, #36]	; 0x24
 8008d5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	da00      	bge.n	8008d66 <_dtoa_r+0x4a6>
 8008d64:	e172      	b.n	800904c <_dtoa_r+0x78c>
 8008d66:	9a02      	ldr	r2, [sp, #8]
 8008d68:	2a0e      	cmp	r2, #14
 8008d6a:	dd00      	ble.n	8008d6e <_dtoa_r+0x4ae>
 8008d6c:	e16e      	b.n	800904c <_dtoa_r+0x78c>
 8008d6e:	4b78      	ldr	r3, [pc, #480]	; (8008f50 <_dtoa_r+0x690>)
 8008d70:	00d2      	lsls	r2, r2, #3
 8008d72:	189b      	adds	r3, r3, r2
 8008d74:	685c      	ldr	r4, [r3, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	930a      	str	r3, [sp, #40]	; 0x28
 8008d7a:	940b      	str	r4, [sp, #44]	; 0x2c
 8008d7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	db00      	blt.n	8008d84 <_dtoa_r+0x4c4>
 8008d82:	e0f7      	b.n	8008f74 <_dtoa_r+0x6b4>
 8008d84:	9b07      	ldr	r3, [sp, #28]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	dd00      	ble.n	8008d8c <_dtoa_r+0x4cc>
 8008d8a:	e0f3      	b.n	8008f74 <_dtoa_r+0x6b4>
 8008d8c:	d000      	beq.n	8008d90 <_dtoa_r+0x4d0>
 8008d8e:	e282      	b.n	8009296 <_dtoa_r+0x9d6>
 8008d90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d94:	2200      	movs	r2, #0
 8008d96:	4b74      	ldr	r3, [pc, #464]	; (8008f68 <_dtoa_r+0x6a8>)
 8008d98:	f7f8 fe96 	bl	8001ac8 <__aeabi_dmul>
 8008d9c:	9a08      	ldr	r2, [sp, #32]
 8008d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da0:	f7f7 fb78 	bl	8000494 <__aeabi_dcmpge>
 8008da4:	9e07      	ldr	r6, [sp, #28]
 8008da6:	0035      	movs	r5, r6
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d000      	beq.n	8008dae <_dtoa_r+0x4ee>
 8008dac:	e259      	b.n	8009262 <_dtoa_r+0x9a2>
 8008dae:	9b06      	ldr	r3, [sp, #24]
 8008db0:	9a06      	ldr	r2, [sp, #24]
 8008db2:	3301      	adds	r3, #1
 8008db4:	9308      	str	r3, [sp, #32]
 8008db6:	2331      	movs	r3, #49	; 0x31
 8008db8:	7013      	strb	r3, [r2, #0]
 8008dba:	9b02      	ldr	r3, [sp, #8]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	9302      	str	r3, [sp, #8]
 8008dc0:	e254      	b.n	800926c <_dtoa_r+0x9ac>
 8008dc2:	4234      	tst	r4, r6
 8008dc4:	d007      	beq.n	8008dd6 <_dtoa_r+0x516>
 8008dc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dc8:	3301      	adds	r3, #1
 8008dca:	9310      	str	r3, [sp, #64]	; 0x40
 8008dcc:	682a      	ldr	r2, [r5, #0]
 8008dce:	686b      	ldr	r3, [r5, #4]
 8008dd0:	f7f8 fe7a 	bl	8001ac8 <__aeabi_dmul>
 8008dd4:	0033      	movs	r3, r6
 8008dd6:	1064      	asrs	r4, r4, #1
 8008dd8:	3508      	adds	r5, #8
 8008dda:	e75a      	b.n	8008c92 <_dtoa_r+0x3d2>
 8008ddc:	9e02      	ldr	r6, [sp, #8]
 8008dde:	9b07      	ldr	r3, [sp, #28]
 8008de0:	e780      	b.n	8008ce4 <_dtoa_r+0x424>
 8008de2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008de4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008de6:	1e5a      	subs	r2, r3, #1
 8008de8:	4b59      	ldr	r3, [pc, #356]	; (8008f50 <_dtoa_r+0x690>)
 8008dea:	00d2      	lsls	r2, r2, #3
 8008dec:	189b      	adds	r3, r3, r2
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	2900      	cmp	r1, #0
 8008df4:	d051      	beq.n	8008e9a <_dtoa_r+0x5da>
 8008df6:	2000      	movs	r0, #0
 8008df8:	495d      	ldr	r1, [pc, #372]	; (8008f70 <_dtoa_r+0x6b0>)
 8008dfa:	f7f8 fa63 	bl	80012c4 <__aeabi_ddiv>
 8008dfe:	9a08      	ldr	r2, [sp, #32]
 8008e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e02:	f7f9 f8cd 	bl	8001fa0 <__aeabi_dsub>
 8008e06:	9a06      	ldr	r2, [sp, #24]
 8008e08:	9b06      	ldr	r3, [sp, #24]
 8008e0a:	4694      	mov	ip, r2
 8008e0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e10:	9010      	str	r0, [sp, #64]	; 0x40
 8008e12:	9111      	str	r1, [sp, #68]	; 0x44
 8008e14:	4463      	add	r3, ip
 8008e16:	9319      	str	r3, [sp, #100]	; 0x64
 8008e18:	0029      	movs	r1, r5
 8008e1a:	0020      	movs	r0, r4
 8008e1c:	f7f9 fc70 	bl	8002700 <__aeabi_d2iz>
 8008e20:	9014      	str	r0, [sp, #80]	; 0x50
 8008e22:	f7f9 fca3 	bl	800276c <__aeabi_i2d>
 8008e26:	0002      	movs	r2, r0
 8008e28:	000b      	movs	r3, r1
 8008e2a:	0020      	movs	r0, r4
 8008e2c:	0029      	movs	r1, r5
 8008e2e:	f7f9 f8b7 	bl	8001fa0 <__aeabi_dsub>
 8008e32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e36:	3301      	adds	r3, #1
 8008e38:	9308      	str	r3, [sp, #32]
 8008e3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e3c:	0004      	movs	r4, r0
 8008e3e:	3330      	adds	r3, #48	; 0x30
 8008e40:	7013      	strb	r3, [r2, #0]
 8008e42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e46:	000d      	movs	r5, r1
 8008e48:	f7f7 fb06 	bl	8000458 <__aeabi_dcmplt>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d175      	bne.n	8008f3c <_dtoa_r+0x67c>
 8008e50:	0022      	movs	r2, r4
 8008e52:	002b      	movs	r3, r5
 8008e54:	2000      	movs	r0, #0
 8008e56:	4940      	ldr	r1, [pc, #256]	; (8008f58 <_dtoa_r+0x698>)
 8008e58:	f7f9 f8a2 	bl	8001fa0 <__aeabi_dsub>
 8008e5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e60:	f7f7 fafa 	bl	8000458 <__aeabi_dcmplt>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d000      	beq.n	8008e6a <_dtoa_r+0x5aa>
 8008e68:	e0d2      	b.n	8009010 <_dtoa_r+0x750>
 8008e6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e6c:	9a08      	ldr	r2, [sp, #32]
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d100      	bne.n	8008e74 <_dtoa_r+0x5b4>
 8008e72:	e770      	b.n	8008d56 <_dtoa_r+0x496>
 8008e74:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e76:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4b38      	ldr	r3, [pc, #224]	; (8008f5c <_dtoa_r+0x69c>)
 8008e7c:	f7f8 fe24 	bl	8001ac8 <__aeabi_dmul>
 8008e80:	4b36      	ldr	r3, [pc, #216]	; (8008f5c <_dtoa_r+0x69c>)
 8008e82:	9010      	str	r0, [sp, #64]	; 0x40
 8008e84:	9111      	str	r1, [sp, #68]	; 0x44
 8008e86:	2200      	movs	r2, #0
 8008e88:	0020      	movs	r0, r4
 8008e8a:	0029      	movs	r1, r5
 8008e8c:	f7f8 fe1c 	bl	8001ac8 <__aeabi_dmul>
 8008e90:	9b08      	ldr	r3, [sp, #32]
 8008e92:	0004      	movs	r4, r0
 8008e94:	000d      	movs	r5, r1
 8008e96:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e98:	e7be      	b.n	8008e18 <_dtoa_r+0x558>
 8008e9a:	9808      	ldr	r0, [sp, #32]
 8008e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e9e:	f7f8 fe13 	bl	8001ac8 <__aeabi_dmul>
 8008ea2:	9a06      	ldr	r2, [sp, #24]
 8008ea4:	9b06      	ldr	r3, [sp, #24]
 8008ea6:	4694      	mov	ip, r2
 8008ea8:	9308      	str	r3, [sp, #32]
 8008eaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008eac:	9010      	str	r0, [sp, #64]	; 0x40
 8008eae:	9111      	str	r1, [sp, #68]	; 0x44
 8008eb0:	4463      	add	r3, ip
 8008eb2:	9319      	str	r3, [sp, #100]	; 0x64
 8008eb4:	0029      	movs	r1, r5
 8008eb6:	0020      	movs	r0, r4
 8008eb8:	f7f9 fc22 	bl	8002700 <__aeabi_d2iz>
 8008ebc:	9017      	str	r0, [sp, #92]	; 0x5c
 8008ebe:	f7f9 fc55 	bl	800276c <__aeabi_i2d>
 8008ec2:	0002      	movs	r2, r0
 8008ec4:	000b      	movs	r3, r1
 8008ec6:	0020      	movs	r0, r4
 8008ec8:	0029      	movs	r1, r5
 8008eca:	f7f9 f869 	bl	8001fa0 <__aeabi_dsub>
 8008ece:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ed0:	9a08      	ldr	r2, [sp, #32]
 8008ed2:	3330      	adds	r3, #48	; 0x30
 8008ed4:	7013      	strb	r3, [r2, #0]
 8008ed6:	0013      	movs	r3, r2
 8008ed8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008eda:	3301      	adds	r3, #1
 8008edc:	0004      	movs	r4, r0
 8008ede:	000d      	movs	r5, r1
 8008ee0:	9308      	str	r3, [sp, #32]
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d12c      	bne.n	8008f40 <_dtoa_r+0x680>
 8008ee6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008ee8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008eea:	9a06      	ldr	r2, [sp, #24]
 8008eec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008eee:	4694      	mov	ip, r2
 8008ef0:	4463      	add	r3, ip
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	9308      	str	r3, [sp, #32]
 8008ef6:	4b1e      	ldr	r3, [pc, #120]	; (8008f70 <_dtoa_r+0x6b0>)
 8008ef8:	f7f7 fea8 	bl	8000c4c <__aeabi_dadd>
 8008efc:	0002      	movs	r2, r0
 8008efe:	000b      	movs	r3, r1
 8008f00:	0020      	movs	r0, r4
 8008f02:	0029      	movs	r1, r5
 8008f04:	f7f7 fabc 	bl	8000480 <__aeabi_dcmpgt>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d000      	beq.n	8008f0e <_dtoa_r+0x64e>
 8008f0c:	e080      	b.n	8009010 <_dtoa_r+0x750>
 8008f0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f12:	2000      	movs	r0, #0
 8008f14:	4916      	ldr	r1, [pc, #88]	; (8008f70 <_dtoa_r+0x6b0>)
 8008f16:	f7f9 f843 	bl	8001fa0 <__aeabi_dsub>
 8008f1a:	0002      	movs	r2, r0
 8008f1c:	000b      	movs	r3, r1
 8008f1e:	0020      	movs	r0, r4
 8008f20:	0029      	movs	r1, r5
 8008f22:	f7f7 fa99 	bl	8000458 <__aeabi_dcmplt>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d100      	bne.n	8008f2c <_dtoa_r+0x66c>
 8008f2a:	e714      	b.n	8008d56 <_dtoa_r+0x496>
 8008f2c:	9b08      	ldr	r3, [sp, #32]
 8008f2e:	001a      	movs	r2, r3
 8008f30:	3a01      	subs	r2, #1
 8008f32:	9208      	str	r2, [sp, #32]
 8008f34:	7812      	ldrb	r2, [r2, #0]
 8008f36:	2a30      	cmp	r2, #48	; 0x30
 8008f38:	d0f8      	beq.n	8008f2c <_dtoa_r+0x66c>
 8008f3a:	9308      	str	r3, [sp, #32]
 8008f3c:	9602      	str	r6, [sp, #8]
 8008f3e:	e055      	b.n	8008fec <_dtoa_r+0x72c>
 8008f40:	2200      	movs	r2, #0
 8008f42:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <_dtoa_r+0x69c>)
 8008f44:	f7f8 fdc0 	bl	8001ac8 <__aeabi_dmul>
 8008f48:	0004      	movs	r4, r0
 8008f4a:	000d      	movs	r5, r1
 8008f4c:	e7b2      	b.n	8008eb4 <_dtoa_r+0x5f4>
 8008f4e:	46c0      	nop			; (mov r8, r8)
 8008f50:	0800aff0 	.word	0x0800aff0
 8008f54:	0800afc8 	.word	0x0800afc8
 8008f58:	3ff00000 	.word	0x3ff00000
 8008f5c:	40240000 	.word	0x40240000
 8008f60:	401c0000 	.word	0x401c0000
 8008f64:	fcc00000 	.word	0xfcc00000
 8008f68:	40140000 	.word	0x40140000
 8008f6c:	7cc00000 	.word	0x7cc00000
 8008f70:	3fe00000 	.word	0x3fe00000
 8008f74:	9b07      	ldr	r3, [sp, #28]
 8008f76:	9e06      	ldr	r6, [sp, #24]
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	199b      	adds	r3, r3, r6
 8008f7c:	930c      	str	r3, [sp, #48]	; 0x30
 8008f7e:	9c08      	ldr	r4, [sp, #32]
 8008f80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f86:	0020      	movs	r0, r4
 8008f88:	0029      	movs	r1, r5
 8008f8a:	f7f8 f99b 	bl	80012c4 <__aeabi_ddiv>
 8008f8e:	f7f9 fbb7 	bl	8002700 <__aeabi_d2iz>
 8008f92:	9007      	str	r0, [sp, #28]
 8008f94:	f7f9 fbea 	bl	800276c <__aeabi_i2d>
 8008f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f9c:	f7f8 fd94 	bl	8001ac8 <__aeabi_dmul>
 8008fa0:	0002      	movs	r2, r0
 8008fa2:	000b      	movs	r3, r1
 8008fa4:	0020      	movs	r0, r4
 8008fa6:	0029      	movs	r1, r5
 8008fa8:	f7f8 fffa 	bl	8001fa0 <__aeabi_dsub>
 8008fac:	0033      	movs	r3, r6
 8008fae:	9a07      	ldr	r2, [sp, #28]
 8008fb0:	3601      	adds	r6, #1
 8008fb2:	3230      	adds	r2, #48	; 0x30
 8008fb4:	701a      	strb	r2, [r3, #0]
 8008fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fb8:	9608      	str	r6, [sp, #32]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d139      	bne.n	8009032 <_dtoa_r+0x772>
 8008fbe:	0002      	movs	r2, r0
 8008fc0:	000b      	movs	r3, r1
 8008fc2:	f7f7 fe43 	bl	8000c4c <__aeabi_dadd>
 8008fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fca:	0004      	movs	r4, r0
 8008fcc:	000d      	movs	r5, r1
 8008fce:	f7f7 fa57 	bl	8000480 <__aeabi_dcmpgt>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d11b      	bne.n	800900e <_dtoa_r+0x74e>
 8008fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fda:	0020      	movs	r0, r4
 8008fdc:	0029      	movs	r1, r5
 8008fde:	f7f7 fa35 	bl	800044c <__aeabi_dcmpeq>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d002      	beq.n	8008fec <_dtoa_r+0x72c>
 8008fe6:	9b07      	ldr	r3, [sp, #28]
 8008fe8:	07db      	lsls	r3, r3, #31
 8008fea:	d410      	bmi.n	800900e <_dtoa_r+0x74e>
 8008fec:	0038      	movs	r0, r7
 8008fee:	9905      	ldr	r1, [sp, #20]
 8008ff0:	f000 fae6 	bl	80095c0 <_Bfree>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	9a08      	ldr	r2, [sp, #32]
 8008ff8:	9802      	ldr	r0, [sp, #8]
 8008ffa:	7013      	strb	r3, [r2, #0]
 8008ffc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ffe:	3001      	adds	r0, #1
 8009000:	6018      	str	r0, [r3, #0]
 8009002:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009004:	2b00      	cmp	r3, #0
 8009006:	d100      	bne.n	800900a <_dtoa_r+0x74a>
 8009008:	e4a6      	b.n	8008958 <_dtoa_r+0x98>
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	e4a4      	b.n	8008958 <_dtoa_r+0x98>
 800900e:	9e02      	ldr	r6, [sp, #8]
 8009010:	9b08      	ldr	r3, [sp, #32]
 8009012:	9308      	str	r3, [sp, #32]
 8009014:	3b01      	subs	r3, #1
 8009016:	781a      	ldrb	r2, [r3, #0]
 8009018:	2a39      	cmp	r2, #57	; 0x39
 800901a:	d106      	bne.n	800902a <_dtoa_r+0x76a>
 800901c:	9a06      	ldr	r2, [sp, #24]
 800901e:	429a      	cmp	r2, r3
 8009020:	d1f7      	bne.n	8009012 <_dtoa_r+0x752>
 8009022:	2230      	movs	r2, #48	; 0x30
 8009024:	9906      	ldr	r1, [sp, #24]
 8009026:	3601      	adds	r6, #1
 8009028:	700a      	strb	r2, [r1, #0]
 800902a:	781a      	ldrb	r2, [r3, #0]
 800902c:	3201      	adds	r2, #1
 800902e:	701a      	strb	r2, [r3, #0]
 8009030:	e784      	b.n	8008f3c <_dtoa_r+0x67c>
 8009032:	2200      	movs	r2, #0
 8009034:	4baa      	ldr	r3, [pc, #680]	; (80092e0 <_dtoa_r+0xa20>)
 8009036:	f7f8 fd47 	bl	8001ac8 <__aeabi_dmul>
 800903a:	2200      	movs	r2, #0
 800903c:	2300      	movs	r3, #0
 800903e:	0004      	movs	r4, r0
 8009040:	000d      	movs	r5, r1
 8009042:	f7f7 fa03 	bl	800044c <__aeabi_dcmpeq>
 8009046:	2800      	cmp	r0, #0
 8009048:	d09b      	beq.n	8008f82 <_dtoa_r+0x6c2>
 800904a:	e7cf      	b.n	8008fec <_dtoa_r+0x72c>
 800904c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800904e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009050:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009052:	2d00      	cmp	r5, #0
 8009054:	d012      	beq.n	800907c <_dtoa_r+0x7bc>
 8009056:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009058:	2a01      	cmp	r2, #1
 800905a:	dc66      	bgt.n	800912a <_dtoa_r+0x86a>
 800905c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800905e:	2a00      	cmp	r2, #0
 8009060:	d05d      	beq.n	800911e <_dtoa_r+0x85e>
 8009062:	4aa0      	ldr	r2, [pc, #640]	; (80092e4 <_dtoa_r+0xa24>)
 8009064:	189b      	adds	r3, r3, r2
 8009066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009068:	2101      	movs	r1, #1
 800906a:	18d2      	adds	r2, r2, r3
 800906c:	920a      	str	r2, [sp, #40]	; 0x28
 800906e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009070:	0038      	movs	r0, r7
 8009072:	18d3      	adds	r3, r2, r3
 8009074:	930d      	str	r3, [sp, #52]	; 0x34
 8009076:	f000 fb53 	bl	8009720 <__i2b>
 800907a:	0005      	movs	r5, r0
 800907c:	2c00      	cmp	r4, #0
 800907e:	dd0e      	ble.n	800909e <_dtoa_r+0x7de>
 8009080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009082:	2b00      	cmp	r3, #0
 8009084:	dd0b      	ble.n	800909e <_dtoa_r+0x7de>
 8009086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009088:	0023      	movs	r3, r4
 800908a:	4294      	cmp	r4, r2
 800908c:	dd00      	ble.n	8009090 <_dtoa_r+0x7d0>
 800908e:	0013      	movs	r3, r2
 8009090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009092:	1ae4      	subs	r4, r4, r3
 8009094:	1ad2      	subs	r2, r2, r3
 8009096:	920a      	str	r2, [sp, #40]	; 0x28
 8009098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	930d      	str	r3, [sp, #52]	; 0x34
 800909e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01f      	beq.n	80090e4 <_dtoa_r+0x824>
 80090a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d054      	beq.n	8009154 <_dtoa_r+0x894>
 80090aa:	2e00      	cmp	r6, #0
 80090ac:	dd11      	ble.n	80090d2 <_dtoa_r+0x812>
 80090ae:	0029      	movs	r1, r5
 80090b0:	0032      	movs	r2, r6
 80090b2:	0038      	movs	r0, r7
 80090b4:	f000 fbfa 	bl	80098ac <__pow5mult>
 80090b8:	9a05      	ldr	r2, [sp, #20]
 80090ba:	0001      	movs	r1, r0
 80090bc:	0005      	movs	r5, r0
 80090be:	0038      	movs	r0, r7
 80090c0:	f000 fb44 	bl	800974c <__multiply>
 80090c4:	9905      	ldr	r1, [sp, #20]
 80090c6:	9014      	str	r0, [sp, #80]	; 0x50
 80090c8:	0038      	movs	r0, r7
 80090ca:	f000 fa79 	bl	80095c0 <_Bfree>
 80090ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090d4:	1b9a      	subs	r2, r3, r6
 80090d6:	42b3      	cmp	r3, r6
 80090d8:	d004      	beq.n	80090e4 <_dtoa_r+0x824>
 80090da:	0038      	movs	r0, r7
 80090dc:	9905      	ldr	r1, [sp, #20]
 80090de:	f000 fbe5 	bl	80098ac <__pow5mult>
 80090e2:	9005      	str	r0, [sp, #20]
 80090e4:	2101      	movs	r1, #1
 80090e6:	0038      	movs	r0, r7
 80090e8:	f000 fb1a 	bl	8009720 <__i2b>
 80090ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090ee:	0006      	movs	r6, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	dd31      	ble.n	8009158 <_dtoa_r+0x898>
 80090f4:	001a      	movs	r2, r3
 80090f6:	0001      	movs	r1, r0
 80090f8:	0038      	movs	r0, r7
 80090fa:	f000 fbd7 	bl	80098ac <__pow5mult>
 80090fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009100:	0006      	movs	r6, r0
 8009102:	2b01      	cmp	r3, #1
 8009104:	dd2d      	ble.n	8009162 <_dtoa_r+0x8a2>
 8009106:	2300      	movs	r3, #0
 8009108:	930e      	str	r3, [sp, #56]	; 0x38
 800910a:	6933      	ldr	r3, [r6, #16]
 800910c:	3303      	adds	r3, #3
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	18f3      	adds	r3, r6, r3
 8009112:	6858      	ldr	r0, [r3, #4]
 8009114:	f000 fabc 	bl	8009690 <__hi0bits>
 8009118:	2320      	movs	r3, #32
 800911a:	1a18      	subs	r0, r3, r0
 800911c:	e039      	b.n	8009192 <_dtoa_r+0x8d2>
 800911e:	2336      	movs	r3, #54	; 0x36
 8009120:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009122:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009124:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009126:	1a9b      	subs	r3, r3, r2
 8009128:	e79d      	b.n	8009066 <_dtoa_r+0x7a6>
 800912a:	9b07      	ldr	r3, [sp, #28]
 800912c:	1e5e      	subs	r6, r3, #1
 800912e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009130:	42b3      	cmp	r3, r6
 8009132:	db07      	blt.n	8009144 <_dtoa_r+0x884>
 8009134:	1b9e      	subs	r6, r3, r6
 8009136:	9b07      	ldr	r3, [sp, #28]
 8009138:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800913a:	2b00      	cmp	r3, #0
 800913c:	da93      	bge.n	8009066 <_dtoa_r+0x7a6>
 800913e:	1ae4      	subs	r4, r4, r3
 8009140:	2300      	movs	r3, #0
 8009142:	e790      	b.n	8009066 <_dtoa_r+0x7a6>
 8009144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009146:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009148:	1af3      	subs	r3, r6, r3
 800914a:	18d3      	adds	r3, r2, r3
 800914c:	960e      	str	r6, [sp, #56]	; 0x38
 800914e:	9315      	str	r3, [sp, #84]	; 0x54
 8009150:	2600      	movs	r6, #0
 8009152:	e7f0      	b.n	8009136 <_dtoa_r+0x876>
 8009154:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009156:	e7c0      	b.n	80090da <_dtoa_r+0x81a>
 8009158:	2300      	movs	r3, #0
 800915a:	930e      	str	r3, [sp, #56]	; 0x38
 800915c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800915e:	2b01      	cmp	r3, #1
 8009160:	dc13      	bgt.n	800918a <_dtoa_r+0x8ca>
 8009162:	2300      	movs	r3, #0
 8009164:	930e      	str	r3, [sp, #56]	; 0x38
 8009166:	9b08      	ldr	r3, [sp, #32]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10e      	bne.n	800918a <_dtoa_r+0x8ca>
 800916c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916e:	031b      	lsls	r3, r3, #12
 8009170:	d10b      	bne.n	800918a <_dtoa_r+0x8ca>
 8009172:	4b5d      	ldr	r3, [pc, #372]	; (80092e8 <_dtoa_r+0xa28>)
 8009174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009176:	4213      	tst	r3, r2
 8009178:	d007      	beq.n	800918a <_dtoa_r+0x8ca>
 800917a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800917c:	3301      	adds	r3, #1
 800917e:	930a      	str	r3, [sp, #40]	; 0x28
 8009180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009182:	3301      	adds	r3, #1
 8009184:	930d      	str	r3, [sp, #52]	; 0x34
 8009186:	2301      	movs	r3, #1
 8009188:	930e      	str	r3, [sp, #56]	; 0x38
 800918a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800918c:	2001      	movs	r0, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1bb      	bne.n	800910a <_dtoa_r+0x84a>
 8009192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009194:	221f      	movs	r2, #31
 8009196:	1818      	adds	r0, r3, r0
 8009198:	0003      	movs	r3, r0
 800919a:	4013      	ands	r3, r2
 800919c:	4210      	tst	r0, r2
 800919e:	d046      	beq.n	800922e <_dtoa_r+0x96e>
 80091a0:	3201      	adds	r2, #1
 80091a2:	1ad2      	subs	r2, r2, r3
 80091a4:	2a04      	cmp	r2, #4
 80091a6:	dd3f      	ble.n	8009228 <_dtoa_r+0x968>
 80091a8:	221c      	movs	r2, #28
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ae:	18e4      	adds	r4, r4, r3
 80091b0:	18d2      	adds	r2, r2, r3
 80091b2:	920a      	str	r2, [sp, #40]	; 0x28
 80091b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091b6:	18d3      	adds	r3, r2, r3
 80091b8:	930d      	str	r3, [sp, #52]	; 0x34
 80091ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091bc:	2b00      	cmp	r3, #0
 80091be:	dd05      	ble.n	80091cc <_dtoa_r+0x90c>
 80091c0:	001a      	movs	r2, r3
 80091c2:	0038      	movs	r0, r7
 80091c4:	9905      	ldr	r1, [sp, #20]
 80091c6:	f000 fbcd 	bl	8009964 <__lshift>
 80091ca:	9005      	str	r0, [sp, #20]
 80091cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	dd05      	ble.n	80091de <_dtoa_r+0x91e>
 80091d2:	0031      	movs	r1, r6
 80091d4:	001a      	movs	r2, r3
 80091d6:	0038      	movs	r0, r7
 80091d8:	f000 fbc4 	bl	8009964 <__lshift>
 80091dc:	0006      	movs	r6, r0
 80091de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d026      	beq.n	8009232 <_dtoa_r+0x972>
 80091e4:	0031      	movs	r1, r6
 80091e6:	9805      	ldr	r0, [sp, #20]
 80091e8:	f000 fc2a 	bl	8009a40 <__mcmp>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	da20      	bge.n	8009232 <_dtoa_r+0x972>
 80091f0:	9b02      	ldr	r3, [sp, #8]
 80091f2:	220a      	movs	r2, #10
 80091f4:	3b01      	subs	r3, #1
 80091f6:	9302      	str	r3, [sp, #8]
 80091f8:	0038      	movs	r0, r7
 80091fa:	2300      	movs	r3, #0
 80091fc:	9905      	ldr	r1, [sp, #20]
 80091fe:	f000 fa03 	bl	8009608 <__multadd>
 8009202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009204:	9005      	str	r0, [sp, #20]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d100      	bne.n	800920c <_dtoa_r+0x94c>
 800920a:	e166      	b.n	80094da <_dtoa_r+0xc1a>
 800920c:	2300      	movs	r3, #0
 800920e:	0029      	movs	r1, r5
 8009210:	220a      	movs	r2, #10
 8009212:	0038      	movs	r0, r7
 8009214:	f000 f9f8 	bl	8009608 <__multadd>
 8009218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800921a:	0005      	movs	r5, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	dc47      	bgt.n	80092b0 <_dtoa_r+0x9f0>
 8009220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009222:	2b02      	cmp	r3, #2
 8009224:	dc0d      	bgt.n	8009242 <_dtoa_r+0x982>
 8009226:	e043      	b.n	80092b0 <_dtoa_r+0x9f0>
 8009228:	2a04      	cmp	r2, #4
 800922a:	d0c6      	beq.n	80091ba <_dtoa_r+0x8fa>
 800922c:	0013      	movs	r3, r2
 800922e:	331c      	adds	r3, #28
 8009230:	e7bc      	b.n	80091ac <_dtoa_r+0x8ec>
 8009232:	9b07      	ldr	r3, [sp, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	dc35      	bgt.n	80092a4 <_dtoa_r+0x9e4>
 8009238:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800923a:	2b02      	cmp	r3, #2
 800923c:	dd32      	ble.n	80092a4 <_dtoa_r+0x9e4>
 800923e:	9b07      	ldr	r3, [sp, #28]
 8009240:	930c      	str	r3, [sp, #48]	; 0x30
 8009242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10c      	bne.n	8009262 <_dtoa_r+0x9a2>
 8009248:	0031      	movs	r1, r6
 800924a:	2205      	movs	r2, #5
 800924c:	0038      	movs	r0, r7
 800924e:	f000 f9db 	bl	8009608 <__multadd>
 8009252:	0006      	movs	r6, r0
 8009254:	0001      	movs	r1, r0
 8009256:	9805      	ldr	r0, [sp, #20]
 8009258:	f000 fbf2 	bl	8009a40 <__mcmp>
 800925c:	2800      	cmp	r0, #0
 800925e:	dd00      	ble.n	8009262 <_dtoa_r+0x9a2>
 8009260:	e5a5      	b.n	8008dae <_dtoa_r+0x4ee>
 8009262:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009264:	43db      	mvns	r3, r3
 8009266:	9302      	str	r3, [sp, #8]
 8009268:	9b06      	ldr	r3, [sp, #24]
 800926a:	9308      	str	r3, [sp, #32]
 800926c:	2400      	movs	r4, #0
 800926e:	0031      	movs	r1, r6
 8009270:	0038      	movs	r0, r7
 8009272:	f000 f9a5 	bl	80095c0 <_Bfree>
 8009276:	2d00      	cmp	r5, #0
 8009278:	d100      	bne.n	800927c <_dtoa_r+0x9bc>
 800927a:	e6b7      	b.n	8008fec <_dtoa_r+0x72c>
 800927c:	2c00      	cmp	r4, #0
 800927e:	d005      	beq.n	800928c <_dtoa_r+0x9cc>
 8009280:	42ac      	cmp	r4, r5
 8009282:	d003      	beq.n	800928c <_dtoa_r+0x9cc>
 8009284:	0021      	movs	r1, r4
 8009286:	0038      	movs	r0, r7
 8009288:	f000 f99a 	bl	80095c0 <_Bfree>
 800928c:	0029      	movs	r1, r5
 800928e:	0038      	movs	r0, r7
 8009290:	f000 f996 	bl	80095c0 <_Bfree>
 8009294:	e6aa      	b.n	8008fec <_dtoa_r+0x72c>
 8009296:	2600      	movs	r6, #0
 8009298:	0035      	movs	r5, r6
 800929a:	e7e2      	b.n	8009262 <_dtoa_r+0x9a2>
 800929c:	9602      	str	r6, [sp, #8]
 800929e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80092a0:	0035      	movs	r5, r6
 80092a2:	e584      	b.n	8008dae <_dtoa_r+0x4ee>
 80092a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d100      	bne.n	80092ac <_dtoa_r+0x9ec>
 80092aa:	e0ce      	b.n	800944a <_dtoa_r+0xb8a>
 80092ac:	9b07      	ldr	r3, [sp, #28]
 80092ae:	930c      	str	r3, [sp, #48]	; 0x30
 80092b0:	2c00      	cmp	r4, #0
 80092b2:	dd05      	ble.n	80092c0 <_dtoa_r+0xa00>
 80092b4:	0029      	movs	r1, r5
 80092b6:	0022      	movs	r2, r4
 80092b8:	0038      	movs	r0, r7
 80092ba:	f000 fb53 	bl	8009964 <__lshift>
 80092be:	0005      	movs	r5, r0
 80092c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092c2:	0028      	movs	r0, r5
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d022      	beq.n	800930e <_dtoa_r+0xa4e>
 80092c8:	0038      	movs	r0, r7
 80092ca:	6869      	ldr	r1, [r5, #4]
 80092cc:	f000 f934 	bl	8009538 <_Balloc>
 80092d0:	1e04      	subs	r4, r0, #0
 80092d2:	d10f      	bne.n	80092f4 <_dtoa_r+0xa34>
 80092d4:	0002      	movs	r2, r0
 80092d6:	4b05      	ldr	r3, [pc, #20]	; (80092ec <_dtoa_r+0xa2c>)
 80092d8:	4905      	ldr	r1, [pc, #20]	; (80092f0 <_dtoa_r+0xa30>)
 80092da:	f7ff fb06 	bl	80088ea <_dtoa_r+0x2a>
 80092de:	46c0      	nop			; (mov r8, r8)
 80092e0:	40240000 	.word	0x40240000
 80092e4:	00000433 	.word	0x00000433
 80092e8:	7ff00000 	.word	0x7ff00000
 80092ec:	0800af57 	.word	0x0800af57
 80092f0:	000002ea 	.word	0x000002ea
 80092f4:	0029      	movs	r1, r5
 80092f6:	692b      	ldr	r3, [r5, #16]
 80092f8:	310c      	adds	r1, #12
 80092fa:	1c9a      	adds	r2, r3, #2
 80092fc:	0092      	lsls	r2, r2, #2
 80092fe:	300c      	adds	r0, #12
 8009300:	f000 f911 	bl	8009526 <memcpy>
 8009304:	2201      	movs	r2, #1
 8009306:	0021      	movs	r1, r4
 8009308:	0038      	movs	r0, r7
 800930a:	f000 fb2b 	bl	8009964 <__lshift>
 800930e:	9b06      	ldr	r3, [sp, #24]
 8009310:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009312:	930a      	str	r3, [sp, #40]	; 0x28
 8009314:	3b01      	subs	r3, #1
 8009316:	189b      	adds	r3, r3, r2
 8009318:	2201      	movs	r2, #1
 800931a:	002c      	movs	r4, r5
 800931c:	0005      	movs	r5, r0
 800931e:	9314      	str	r3, [sp, #80]	; 0x50
 8009320:	9b08      	ldr	r3, [sp, #32]
 8009322:	4013      	ands	r3, r2
 8009324:	930f      	str	r3, [sp, #60]	; 0x3c
 8009326:	0031      	movs	r1, r6
 8009328:	9805      	ldr	r0, [sp, #20]
 800932a:	f7ff fa3d 	bl	80087a8 <quorem>
 800932e:	0003      	movs	r3, r0
 8009330:	0021      	movs	r1, r4
 8009332:	3330      	adds	r3, #48	; 0x30
 8009334:	900d      	str	r0, [sp, #52]	; 0x34
 8009336:	9805      	ldr	r0, [sp, #20]
 8009338:	9307      	str	r3, [sp, #28]
 800933a:	f000 fb81 	bl	8009a40 <__mcmp>
 800933e:	002a      	movs	r2, r5
 8009340:	900e      	str	r0, [sp, #56]	; 0x38
 8009342:	0031      	movs	r1, r6
 8009344:	0038      	movs	r0, r7
 8009346:	f000 fb97 	bl	8009a78 <__mdiff>
 800934a:	68c3      	ldr	r3, [r0, #12]
 800934c:	9008      	str	r0, [sp, #32]
 800934e:	9310      	str	r3, [sp, #64]	; 0x40
 8009350:	2301      	movs	r3, #1
 8009352:	930c      	str	r3, [sp, #48]	; 0x30
 8009354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009356:	2b00      	cmp	r3, #0
 8009358:	d104      	bne.n	8009364 <_dtoa_r+0xaa4>
 800935a:	0001      	movs	r1, r0
 800935c:	9805      	ldr	r0, [sp, #20]
 800935e:	f000 fb6f 	bl	8009a40 <__mcmp>
 8009362:	900c      	str	r0, [sp, #48]	; 0x30
 8009364:	0038      	movs	r0, r7
 8009366:	9908      	ldr	r1, [sp, #32]
 8009368:	f000 f92a 	bl	80095c0 <_Bfree>
 800936c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800936e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009370:	3301      	adds	r3, #1
 8009372:	9308      	str	r3, [sp, #32]
 8009374:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009376:	4313      	orrs	r3, r2
 8009378:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800937a:	4313      	orrs	r3, r2
 800937c:	d10c      	bne.n	8009398 <_dtoa_r+0xad8>
 800937e:	9b07      	ldr	r3, [sp, #28]
 8009380:	2b39      	cmp	r3, #57	; 0x39
 8009382:	d026      	beq.n	80093d2 <_dtoa_r+0xb12>
 8009384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009386:	2b00      	cmp	r3, #0
 8009388:	dd02      	ble.n	8009390 <_dtoa_r+0xad0>
 800938a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800938c:	3331      	adds	r3, #49	; 0x31
 800938e:	9307      	str	r3, [sp, #28]
 8009390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009392:	9a07      	ldr	r2, [sp, #28]
 8009394:	701a      	strb	r2, [r3, #0]
 8009396:	e76a      	b.n	800926e <_dtoa_r+0x9ae>
 8009398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800939a:	2b00      	cmp	r3, #0
 800939c:	db04      	blt.n	80093a8 <_dtoa_r+0xae8>
 800939e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80093a0:	4313      	orrs	r3, r2
 80093a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093a4:	4313      	orrs	r3, r2
 80093a6:	d11f      	bne.n	80093e8 <_dtoa_r+0xb28>
 80093a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	ddf0      	ble.n	8009390 <_dtoa_r+0xad0>
 80093ae:	9905      	ldr	r1, [sp, #20]
 80093b0:	2201      	movs	r2, #1
 80093b2:	0038      	movs	r0, r7
 80093b4:	f000 fad6 	bl	8009964 <__lshift>
 80093b8:	0031      	movs	r1, r6
 80093ba:	9005      	str	r0, [sp, #20]
 80093bc:	f000 fb40 	bl	8009a40 <__mcmp>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	dc03      	bgt.n	80093cc <_dtoa_r+0xb0c>
 80093c4:	d1e4      	bne.n	8009390 <_dtoa_r+0xad0>
 80093c6:	9b07      	ldr	r3, [sp, #28]
 80093c8:	07db      	lsls	r3, r3, #31
 80093ca:	d5e1      	bpl.n	8009390 <_dtoa_r+0xad0>
 80093cc:	9b07      	ldr	r3, [sp, #28]
 80093ce:	2b39      	cmp	r3, #57	; 0x39
 80093d0:	d1db      	bne.n	800938a <_dtoa_r+0xaca>
 80093d2:	2339      	movs	r3, #57	; 0x39
 80093d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093d6:	7013      	strb	r3, [r2, #0]
 80093d8:	9b08      	ldr	r3, [sp, #32]
 80093da:	9308      	str	r3, [sp, #32]
 80093dc:	3b01      	subs	r3, #1
 80093de:	781a      	ldrb	r2, [r3, #0]
 80093e0:	2a39      	cmp	r2, #57	; 0x39
 80093e2:	d068      	beq.n	80094b6 <_dtoa_r+0xbf6>
 80093e4:	3201      	adds	r2, #1
 80093e6:	e7d5      	b.n	8009394 <_dtoa_r+0xad4>
 80093e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	dd07      	ble.n	80093fe <_dtoa_r+0xb3e>
 80093ee:	9b07      	ldr	r3, [sp, #28]
 80093f0:	2b39      	cmp	r3, #57	; 0x39
 80093f2:	d0ee      	beq.n	80093d2 <_dtoa_r+0xb12>
 80093f4:	9b07      	ldr	r3, [sp, #28]
 80093f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093f8:	3301      	adds	r3, #1
 80093fa:	7013      	strb	r3, [r2, #0]
 80093fc:	e737      	b.n	800926e <_dtoa_r+0x9ae>
 80093fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009400:	9a07      	ldr	r2, [sp, #28]
 8009402:	701a      	strb	r2, [r3, #0]
 8009404:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009408:	4293      	cmp	r3, r2
 800940a:	d03e      	beq.n	800948a <_dtoa_r+0xbca>
 800940c:	2300      	movs	r3, #0
 800940e:	220a      	movs	r2, #10
 8009410:	9905      	ldr	r1, [sp, #20]
 8009412:	0038      	movs	r0, r7
 8009414:	f000 f8f8 	bl	8009608 <__multadd>
 8009418:	2300      	movs	r3, #0
 800941a:	9005      	str	r0, [sp, #20]
 800941c:	220a      	movs	r2, #10
 800941e:	0021      	movs	r1, r4
 8009420:	0038      	movs	r0, r7
 8009422:	42ac      	cmp	r4, r5
 8009424:	d106      	bne.n	8009434 <_dtoa_r+0xb74>
 8009426:	f000 f8ef 	bl	8009608 <__multadd>
 800942a:	0004      	movs	r4, r0
 800942c:	0005      	movs	r5, r0
 800942e:	9b08      	ldr	r3, [sp, #32]
 8009430:	930a      	str	r3, [sp, #40]	; 0x28
 8009432:	e778      	b.n	8009326 <_dtoa_r+0xa66>
 8009434:	f000 f8e8 	bl	8009608 <__multadd>
 8009438:	0029      	movs	r1, r5
 800943a:	0004      	movs	r4, r0
 800943c:	2300      	movs	r3, #0
 800943e:	220a      	movs	r2, #10
 8009440:	0038      	movs	r0, r7
 8009442:	f000 f8e1 	bl	8009608 <__multadd>
 8009446:	0005      	movs	r5, r0
 8009448:	e7f1      	b.n	800942e <_dtoa_r+0xb6e>
 800944a:	9b07      	ldr	r3, [sp, #28]
 800944c:	930c      	str	r3, [sp, #48]	; 0x30
 800944e:	2400      	movs	r4, #0
 8009450:	0031      	movs	r1, r6
 8009452:	9805      	ldr	r0, [sp, #20]
 8009454:	f7ff f9a8 	bl	80087a8 <quorem>
 8009458:	9b06      	ldr	r3, [sp, #24]
 800945a:	3030      	adds	r0, #48	; 0x30
 800945c:	5518      	strb	r0, [r3, r4]
 800945e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009460:	3401      	adds	r4, #1
 8009462:	9007      	str	r0, [sp, #28]
 8009464:	42a3      	cmp	r3, r4
 8009466:	dd07      	ble.n	8009478 <_dtoa_r+0xbb8>
 8009468:	2300      	movs	r3, #0
 800946a:	220a      	movs	r2, #10
 800946c:	0038      	movs	r0, r7
 800946e:	9905      	ldr	r1, [sp, #20]
 8009470:	f000 f8ca 	bl	8009608 <__multadd>
 8009474:	9005      	str	r0, [sp, #20]
 8009476:	e7eb      	b.n	8009450 <_dtoa_r+0xb90>
 8009478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800947a:	2001      	movs	r0, #1
 800947c:	2b00      	cmp	r3, #0
 800947e:	dd00      	ble.n	8009482 <_dtoa_r+0xbc2>
 8009480:	0018      	movs	r0, r3
 8009482:	2400      	movs	r4, #0
 8009484:	9b06      	ldr	r3, [sp, #24]
 8009486:	181b      	adds	r3, r3, r0
 8009488:	9308      	str	r3, [sp, #32]
 800948a:	9905      	ldr	r1, [sp, #20]
 800948c:	2201      	movs	r2, #1
 800948e:	0038      	movs	r0, r7
 8009490:	f000 fa68 	bl	8009964 <__lshift>
 8009494:	0031      	movs	r1, r6
 8009496:	9005      	str	r0, [sp, #20]
 8009498:	f000 fad2 	bl	8009a40 <__mcmp>
 800949c:	2800      	cmp	r0, #0
 800949e:	dc9b      	bgt.n	80093d8 <_dtoa_r+0xb18>
 80094a0:	d102      	bne.n	80094a8 <_dtoa_r+0xbe8>
 80094a2:	9b07      	ldr	r3, [sp, #28]
 80094a4:	07db      	lsls	r3, r3, #31
 80094a6:	d497      	bmi.n	80093d8 <_dtoa_r+0xb18>
 80094a8:	9b08      	ldr	r3, [sp, #32]
 80094aa:	9308      	str	r3, [sp, #32]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	781a      	ldrb	r2, [r3, #0]
 80094b0:	2a30      	cmp	r2, #48	; 0x30
 80094b2:	d0fa      	beq.n	80094aa <_dtoa_r+0xbea>
 80094b4:	e6db      	b.n	800926e <_dtoa_r+0x9ae>
 80094b6:	9a06      	ldr	r2, [sp, #24]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d18e      	bne.n	80093da <_dtoa_r+0xb1a>
 80094bc:	9b02      	ldr	r3, [sp, #8]
 80094be:	3301      	adds	r3, #1
 80094c0:	9302      	str	r3, [sp, #8]
 80094c2:	2331      	movs	r3, #49	; 0x31
 80094c4:	e799      	b.n	80093fa <_dtoa_r+0xb3a>
 80094c6:	4b09      	ldr	r3, [pc, #36]	; (80094ec <_dtoa_r+0xc2c>)
 80094c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80094ca:	9306      	str	r3, [sp, #24]
 80094cc:	4b08      	ldr	r3, [pc, #32]	; (80094f0 <_dtoa_r+0xc30>)
 80094ce:	2a00      	cmp	r2, #0
 80094d0:	d001      	beq.n	80094d6 <_dtoa_r+0xc16>
 80094d2:	f7ff fa3f 	bl	8008954 <_dtoa_r+0x94>
 80094d6:	f7ff fa3f 	bl	8008958 <_dtoa_r+0x98>
 80094da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dcb6      	bgt.n	800944e <_dtoa_r+0xb8e>
 80094e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	dd00      	ble.n	80094e8 <_dtoa_r+0xc28>
 80094e6:	e6ac      	b.n	8009242 <_dtoa_r+0x982>
 80094e8:	e7b1      	b.n	800944e <_dtoa_r+0xb8e>
 80094ea:	46c0      	nop			; (mov r8, r8)
 80094ec:	0800aed8 	.word	0x0800aed8
 80094f0:	0800aee0 	.word	0x0800aee0

080094f4 <_localeconv_r>:
 80094f4:	4800      	ldr	r0, [pc, #0]	; (80094f8 <_localeconv_r+0x4>)
 80094f6:	4770      	bx	lr
 80094f8:	20000160 	.word	0x20000160

080094fc <malloc>:
 80094fc:	b510      	push	{r4, lr}
 80094fe:	4b03      	ldr	r3, [pc, #12]	; (800950c <malloc+0x10>)
 8009500:	0001      	movs	r1, r0
 8009502:	6818      	ldr	r0, [r3, #0]
 8009504:	f000 fc4c 	bl	8009da0 <_malloc_r>
 8009508:	bd10      	pop	{r4, pc}
 800950a:	46c0      	nop			; (mov r8, r8)
 800950c:	2000000c 	.word	0x2000000c

08009510 <memchr>:
 8009510:	b2c9      	uxtb	r1, r1
 8009512:	1882      	adds	r2, r0, r2
 8009514:	4290      	cmp	r0, r2
 8009516:	d101      	bne.n	800951c <memchr+0xc>
 8009518:	2000      	movs	r0, #0
 800951a:	4770      	bx	lr
 800951c:	7803      	ldrb	r3, [r0, #0]
 800951e:	428b      	cmp	r3, r1
 8009520:	d0fb      	beq.n	800951a <memchr+0xa>
 8009522:	3001      	adds	r0, #1
 8009524:	e7f6      	b.n	8009514 <memchr+0x4>

08009526 <memcpy>:
 8009526:	2300      	movs	r3, #0
 8009528:	b510      	push	{r4, lr}
 800952a:	429a      	cmp	r2, r3
 800952c:	d100      	bne.n	8009530 <memcpy+0xa>
 800952e:	bd10      	pop	{r4, pc}
 8009530:	5ccc      	ldrb	r4, [r1, r3]
 8009532:	54c4      	strb	r4, [r0, r3]
 8009534:	3301      	adds	r3, #1
 8009536:	e7f8      	b.n	800952a <memcpy+0x4>

08009538 <_Balloc>:
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800953c:	0006      	movs	r6, r0
 800953e:	000c      	movs	r4, r1
 8009540:	2d00      	cmp	r5, #0
 8009542:	d10e      	bne.n	8009562 <_Balloc+0x2a>
 8009544:	2010      	movs	r0, #16
 8009546:	f7ff ffd9 	bl	80094fc <malloc>
 800954a:	1e02      	subs	r2, r0, #0
 800954c:	6270      	str	r0, [r6, #36]	; 0x24
 800954e:	d104      	bne.n	800955a <_Balloc+0x22>
 8009550:	2166      	movs	r1, #102	; 0x66
 8009552:	4b19      	ldr	r3, [pc, #100]	; (80095b8 <_Balloc+0x80>)
 8009554:	4819      	ldr	r0, [pc, #100]	; (80095bc <_Balloc+0x84>)
 8009556:	f000 fe0d 	bl	800a174 <__assert_func>
 800955a:	6045      	str	r5, [r0, #4]
 800955c:	6085      	str	r5, [r0, #8]
 800955e:	6005      	str	r5, [r0, #0]
 8009560:	60c5      	str	r5, [r0, #12]
 8009562:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009564:	68eb      	ldr	r3, [r5, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d013      	beq.n	8009592 <_Balloc+0x5a>
 800956a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800956c:	00a2      	lsls	r2, r4, #2
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	189b      	adds	r3, r3, r2
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	2800      	cmp	r0, #0
 8009576:	d118      	bne.n	80095aa <_Balloc+0x72>
 8009578:	2101      	movs	r1, #1
 800957a:	000d      	movs	r5, r1
 800957c:	40a5      	lsls	r5, r4
 800957e:	1d6a      	adds	r2, r5, #5
 8009580:	0030      	movs	r0, r6
 8009582:	0092      	lsls	r2, r2, #2
 8009584:	f000 fb74 	bl	8009c70 <_calloc_r>
 8009588:	2800      	cmp	r0, #0
 800958a:	d00c      	beq.n	80095a6 <_Balloc+0x6e>
 800958c:	6044      	str	r4, [r0, #4]
 800958e:	6085      	str	r5, [r0, #8]
 8009590:	e00d      	b.n	80095ae <_Balloc+0x76>
 8009592:	2221      	movs	r2, #33	; 0x21
 8009594:	2104      	movs	r1, #4
 8009596:	0030      	movs	r0, r6
 8009598:	f000 fb6a 	bl	8009c70 <_calloc_r>
 800959c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800959e:	60e8      	str	r0, [r5, #12]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1e1      	bne.n	800956a <_Balloc+0x32>
 80095a6:	2000      	movs	r0, #0
 80095a8:	bd70      	pop	{r4, r5, r6, pc}
 80095aa:	6802      	ldr	r2, [r0, #0]
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	2300      	movs	r3, #0
 80095b0:	6103      	str	r3, [r0, #16]
 80095b2:	60c3      	str	r3, [r0, #12]
 80095b4:	e7f8      	b.n	80095a8 <_Balloc+0x70>
 80095b6:	46c0      	nop			; (mov r8, r8)
 80095b8:	0800aee5 	.word	0x0800aee5
 80095bc:	0800af68 	.word	0x0800af68

080095c0 <_Bfree>:
 80095c0:	b570      	push	{r4, r5, r6, lr}
 80095c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095c4:	0005      	movs	r5, r0
 80095c6:	000c      	movs	r4, r1
 80095c8:	2e00      	cmp	r6, #0
 80095ca:	d10e      	bne.n	80095ea <_Bfree+0x2a>
 80095cc:	2010      	movs	r0, #16
 80095ce:	f7ff ff95 	bl	80094fc <malloc>
 80095d2:	1e02      	subs	r2, r0, #0
 80095d4:	6268      	str	r0, [r5, #36]	; 0x24
 80095d6:	d104      	bne.n	80095e2 <_Bfree+0x22>
 80095d8:	218a      	movs	r1, #138	; 0x8a
 80095da:	4b09      	ldr	r3, [pc, #36]	; (8009600 <_Bfree+0x40>)
 80095dc:	4809      	ldr	r0, [pc, #36]	; (8009604 <_Bfree+0x44>)
 80095de:	f000 fdc9 	bl	800a174 <__assert_func>
 80095e2:	6046      	str	r6, [r0, #4]
 80095e4:	6086      	str	r6, [r0, #8]
 80095e6:	6006      	str	r6, [r0, #0]
 80095e8:	60c6      	str	r6, [r0, #12]
 80095ea:	2c00      	cmp	r4, #0
 80095ec:	d007      	beq.n	80095fe <_Bfree+0x3e>
 80095ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095f0:	6862      	ldr	r2, [r4, #4]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	0092      	lsls	r2, r2, #2
 80095f6:	189b      	adds	r3, r3, r2
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	6022      	str	r2, [r4, #0]
 80095fc:	601c      	str	r4, [r3, #0]
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	0800aee5 	.word	0x0800aee5
 8009604:	0800af68 	.word	0x0800af68

08009608 <__multadd>:
 8009608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800960a:	000e      	movs	r6, r1
 800960c:	9001      	str	r0, [sp, #4]
 800960e:	000c      	movs	r4, r1
 8009610:	001d      	movs	r5, r3
 8009612:	2000      	movs	r0, #0
 8009614:	690f      	ldr	r7, [r1, #16]
 8009616:	3614      	adds	r6, #20
 8009618:	6833      	ldr	r3, [r6, #0]
 800961a:	3001      	adds	r0, #1
 800961c:	b299      	uxth	r1, r3
 800961e:	4351      	muls	r1, r2
 8009620:	0c1b      	lsrs	r3, r3, #16
 8009622:	4353      	muls	r3, r2
 8009624:	1949      	adds	r1, r1, r5
 8009626:	0c0d      	lsrs	r5, r1, #16
 8009628:	195b      	adds	r3, r3, r5
 800962a:	0c1d      	lsrs	r5, r3, #16
 800962c:	b289      	uxth	r1, r1
 800962e:	041b      	lsls	r3, r3, #16
 8009630:	185b      	adds	r3, r3, r1
 8009632:	c608      	stmia	r6!, {r3}
 8009634:	4287      	cmp	r7, r0
 8009636:	dcef      	bgt.n	8009618 <__multadd+0x10>
 8009638:	2d00      	cmp	r5, #0
 800963a:	d022      	beq.n	8009682 <__multadd+0x7a>
 800963c:	68a3      	ldr	r3, [r4, #8]
 800963e:	42bb      	cmp	r3, r7
 8009640:	dc19      	bgt.n	8009676 <__multadd+0x6e>
 8009642:	6863      	ldr	r3, [r4, #4]
 8009644:	9801      	ldr	r0, [sp, #4]
 8009646:	1c59      	adds	r1, r3, #1
 8009648:	f7ff ff76 	bl	8009538 <_Balloc>
 800964c:	1e06      	subs	r6, r0, #0
 800964e:	d105      	bne.n	800965c <__multadd+0x54>
 8009650:	0002      	movs	r2, r0
 8009652:	21b5      	movs	r1, #181	; 0xb5
 8009654:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <__multadd+0x80>)
 8009656:	480d      	ldr	r0, [pc, #52]	; (800968c <__multadd+0x84>)
 8009658:	f000 fd8c 	bl	800a174 <__assert_func>
 800965c:	0021      	movs	r1, r4
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	310c      	adds	r1, #12
 8009662:	1c9a      	adds	r2, r3, #2
 8009664:	0092      	lsls	r2, r2, #2
 8009666:	300c      	adds	r0, #12
 8009668:	f7ff ff5d 	bl	8009526 <memcpy>
 800966c:	0021      	movs	r1, r4
 800966e:	9801      	ldr	r0, [sp, #4]
 8009670:	f7ff ffa6 	bl	80095c0 <_Bfree>
 8009674:	0034      	movs	r4, r6
 8009676:	1d3b      	adds	r3, r7, #4
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	18e3      	adds	r3, r4, r3
 800967c:	605d      	str	r5, [r3, #4]
 800967e:	1c7b      	adds	r3, r7, #1
 8009680:	6123      	str	r3, [r4, #16]
 8009682:	0020      	movs	r0, r4
 8009684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009686:	46c0      	nop			; (mov r8, r8)
 8009688:	0800af57 	.word	0x0800af57
 800968c:	0800af68 	.word	0x0800af68

08009690 <__hi0bits>:
 8009690:	0003      	movs	r3, r0
 8009692:	0c02      	lsrs	r2, r0, #16
 8009694:	2000      	movs	r0, #0
 8009696:	4282      	cmp	r2, r0
 8009698:	d101      	bne.n	800969e <__hi0bits+0xe>
 800969a:	041b      	lsls	r3, r3, #16
 800969c:	3010      	adds	r0, #16
 800969e:	0e1a      	lsrs	r2, r3, #24
 80096a0:	d101      	bne.n	80096a6 <__hi0bits+0x16>
 80096a2:	3008      	adds	r0, #8
 80096a4:	021b      	lsls	r3, r3, #8
 80096a6:	0f1a      	lsrs	r2, r3, #28
 80096a8:	d101      	bne.n	80096ae <__hi0bits+0x1e>
 80096aa:	3004      	adds	r0, #4
 80096ac:	011b      	lsls	r3, r3, #4
 80096ae:	0f9a      	lsrs	r2, r3, #30
 80096b0:	d101      	bne.n	80096b6 <__hi0bits+0x26>
 80096b2:	3002      	adds	r0, #2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	db03      	blt.n	80096c2 <__hi0bits+0x32>
 80096ba:	3001      	adds	r0, #1
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	d400      	bmi.n	80096c2 <__hi0bits+0x32>
 80096c0:	2020      	movs	r0, #32
 80096c2:	4770      	bx	lr

080096c4 <__lo0bits>:
 80096c4:	6803      	ldr	r3, [r0, #0]
 80096c6:	0002      	movs	r2, r0
 80096c8:	2107      	movs	r1, #7
 80096ca:	0018      	movs	r0, r3
 80096cc:	4008      	ands	r0, r1
 80096ce:	420b      	tst	r3, r1
 80096d0:	d00d      	beq.n	80096ee <__lo0bits+0x2a>
 80096d2:	3906      	subs	r1, #6
 80096d4:	2000      	movs	r0, #0
 80096d6:	420b      	tst	r3, r1
 80096d8:	d105      	bne.n	80096e6 <__lo0bits+0x22>
 80096da:	3002      	adds	r0, #2
 80096dc:	4203      	tst	r3, r0
 80096de:	d003      	beq.n	80096e8 <__lo0bits+0x24>
 80096e0:	40cb      	lsrs	r3, r1
 80096e2:	0008      	movs	r0, r1
 80096e4:	6013      	str	r3, [r2, #0]
 80096e6:	4770      	bx	lr
 80096e8:	089b      	lsrs	r3, r3, #2
 80096ea:	6013      	str	r3, [r2, #0]
 80096ec:	e7fb      	b.n	80096e6 <__lo0bits+0x22>
 80096ee:	b299      	uxth	r1, r3
 80096f0:	2900      	cmp	r1, #0
 80096f2:	d101      	bne.n	80096f8 <__lo0bits+0x34>
 80096f4:	2010      	movs	r0, #16
 80096f6:	0c1b      	lsrs	r3, r3, #16
 80096f8:	b2d9      	uxtb	r1, r3
 80096fa:	2900      	cmp	r1, #0
 80096fc:	d101      	bne.n	8009702 <__lo0bits+0x3e>
 80096fe:	3008      	adds	r0, #8
 8009700:	0a1b      	lsrs	r3, r3, #8
 8009702:	0719      	lsls	r1, r3, #28
 8009704:	d101      	bne.n	800970a <__lo0bits+0x46>
 8009706:	3004      	adds	r0, #4
 8009708:	091b      	lsrs	r3, r3, #4
 800970a:	0799      	lsls	r1, r3, #30
 800970c:	d101      	bne.n	8009712 <__lo0bits+0x4e>
 800970e:	3002      	adds	r0, #2
 8009710:	089b      	lsrs	r3, r3, #2
 8009712:	07d9      	lsls	r1, r3, #31
 8009714:	d4e9      	bmi.n	80096ea <__lo0bits+0x26>
 8009716:	3001      	adds	r0, #1
 8009718:	085b      	lsrs	r3, r3, #1
 800971a:	d1e6      	bne.n	80096ea <__lo0bits+0x26>
 800971c:	2020      	movs	r0, #32
 800971e:	e7e2      	b.n	80096e6 <__lo0bits+0x22>

08009720 <__i2b>:
 8009720:	b510      	push	{r4, lr}
 8009722:	000c      	movs	r4, r1
 8009724:	2101      	movs	r1, #1
 8009726:	f7ff ff07 	bl	8009538 <_Balloc>
 800972a:	2800      	cmp	r0, #0
 800972c:	d106      	bne.n	800973c <__i2b+0x1c>
 800972e:	21a0      	movs	r1, #160	; 0xa0
 8009730:	0002      	movs	r2, r0
 8009732:	4b04      	ldr	r3, [pc, #16]	; (8009744 <__i2b+0x24>)
 8009734:	4804      	ldr	r0, [pc, #16]	; (8009748 <__i2b+0x28>)
 8009736:	0049      	lsls	r1, r1, #1
 8009738:	f000 fd1c 	bl	800a174 <__assert_func>
 800973c:	2301      	movs	r3, #1
 800973e:	6144      	str	r4, [r0, #20]
 8009740:	6103      	str	r3, [r0, #16]
 8009742:	bd10      	pop	{r4, pc}
 8009744:	0800af57 	.word	0x0800af57
 8009748:	0800af68 	.word	0x0800af68

0800974c <__multiply>:
 800974c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800974e:	690b      	ldr	r3, [r1, #16]
 8009750:	0014      	movs	r4, r2
 8009752:	6912      	ldr	r2, [r2, #16]
 8009754:	000d      	movs	r5, r1
 8009756:	b089      	sub	sp, #36	; 0x24
 8009758:	4293      	cmp	r3, r2
 800975a:	da01      	bge.n	8009760 <__multiply+0x14>
 800975c:	0025      	movs	r5, r4
 800975e:	000c      	movs	r4, r1
 8009760:	692f      	ldr	r7, [r5, #16]
 8009762:	6926      	ldr	r6, [r4, #16]
 8009764:	6869      	ldr	r1, [r5, #4]
 8009766:	19bb      	adds	r3, r7, r6
 8009768:	9302      	str	r3, [sp, #8]
 800976a:	68ab      	ldr	r3, [r5, #8]
 800976c:	19ba      	adds	r2, r7, r6
 800976e:	4293      	cmp	r3, r2
 8009770:	da00      	bge.n	8009774 <__multiply+0x28>
 8009772:	3101      	adds	r1, #1
 8009774:	f7ff fee0 	bl	8009538 <_Balloc>
 8009778:	9001      	str	r0, [sp, #4]
 800977a:	2800      	cmp	r0, #0
 800977c:	d106      	bne.n	800978c <__multiply+0x40>
 800977e:	215e      	movs	r1, #94	; 0x5e
 8009780:	0002      	movs	r2, r0
 8009782:	4b48      	ldr	r3, [pc, #288]	; (80098a4 <__multiply+0x158>)
 8009784:	4848      	ldr	r0, [pc, #288]	; (80098a8 <__multiply+0x15c>)
 8009786:	31ff      	adds	r1, #255	; 0xff
 8009788:	f000 fcf4 	bl	800a174 <__assert_func>
 800978c:	9b01      	ldr	r3, [sp, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	3314      	adds	r3, #20
 8009792:	469c      	mov	ip, r3
 8009794:	19bb      	adds	r3, r7, r6
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4463      	add	r3, ip
 800979a:	9303      	str	r3, [sp, #12]
 800979c:	4663      	mov	r3, ip
 800979e:	9903      	ldr	r1, [sp, #12]
 80097a0:	428b      	cmp	r3, r1
 80097a2:	d32c      	bcc.n	80097fe <__multiply+0xb2>
 80097a4:	002b      	movs	r3, r5
 80097a6:	0022      	movs	r2, r4
 80097a8:	3314      	adds	r3, #20
 80097aa:	00bf      	lsls	r7, r7, #2
 80097ac:	3214      	adds	r2, #20
 80097ae:	9306      	str	r3, [sp, #24]
 80097b0:	00b6      	lsls	r6, r6, #2
 80097b2:	19db      	adds	r3, r3, r7
 80097b4:	9304      	str	r3, [sp, #16]
 80097b6:	1993      	adds	r3, r2, r6
 80097b8:	9307      	str	r3, [sp, #28]
 80097ba:	2304      	movs	r3, #4
 80097bc:	9305      	str	r3, [sp, #20]
 80097be:	002b      	movs	r3, r5
 80097c0:	9904      	ldr	r1, [sp, #16]
 80097c2:	3315      	adds	r3, #21
 80097c4:	9200      	str	r2, [sp, #0]
 80097c6:	4299      	cmp	r1, r3
 80097c8:	d305      	bcc.n	80097d6 <__multiply+0x8a>
 80097ca:	1b4b      	subs	r3, r1, r5
 80097cc:	3b15      	subs	r3, #21
 80097ce:	089b      	lsrs	r3, r3, #2
 80097d0:	3301      	adds	r3, #1
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	9305      	str	r3, [sp, #20]
 80097d6:	9b07      	ldr	r3, [sp, #28]
 80097d8:	9a00      	ldr	r2, [sp, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d311      	bcc.n	8009802 <__multiply+0xb6>
 80097de:	9b02      	ldr	r3, [sp, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	dd06      	ble.n	80097f2 <__multiply+0xa6>
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	3b04      	subs	r3, #4
 80097e8:	9303      	str	r3, [sp, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d053      	beq.n	800989a <__multiply+0x14e>
 80097f2:	9b01      	ldr	r3, [sp, #4]
 80097f4:	9a02      	ldr	r2, [sp, #8]
 80097f6:	0018      	movs	r0, r3
 80097f8:	611a      	str	r2, [r3, #16]
 80097fa:	b009      	add	sp, #36	; 0x24
 80097fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097fe:	c304      	stmia	r3!, {r2}
 8009800:	e7cd      	b.n	800979e <__multiply+0x52>
 8009802:	9b00      	ldr	r3, [sp, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	b298      	uxth	r0, r3
 8009808:	2800      	cmp	r0, #0
 800980a:	d01b      	beq.n	8009844 <__multiply+0xf8>
 800980c:	4667      	mov	r7, ip
 800980e:	2400      	movs	r4, #0
 8009810:	9e06      	ldr	r6, [sp, #24]
 8009812:	ce02      	ldmia	r6!, {r1}
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	b28b      	uxth	r3, r1
 8009818:	4343      	muls	r3, r0
 800981a:	b292      	uxth	r2, r2
 800981c:	189b      	adds	r3, r3, r2
 800981e:	191b      	adds	r3, r3, r4
 8009820:	0c0c      	lsrs	r4, r1, #16
 8009822:	4344      	muls	r4, r0
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	0c11      	lsrs	r1, r2, #16
 8009828:	1861      	adds	r1, r4, r1
 800982a:	0c1c      	lsrs	r4, r3, #16
 800982c:	1909      	adds	r1, r1, r4
 800982e:	0c0c      	lsrs	r4, r1, #16
 8009830:	b29b      	uxth	r3, r3
 8009832:	0409      	lsls	r1, r1, #16
 8009834:	430b      	orrs	r3, r1
 8009836:	c708      	stmia	r7!, {r3}
 8009838:	9b04      	ldr	r3, [sp, #16]
 800983a:	42b3      	cmp	r3, r6
 800983c:	d8e9      	bhi.n	8009812 <__multiply+0xc6>
 800983e:	4663      	mov	r3, ip
 8009840:	9a05      	ldr	r2, [sp, #20]
 8009842:	509c      	str	r4, [r3, r2]
 8009844:	9b00      	ldr	r3, [sp, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	0c1e      	lsrs	r6, r3, #16
 800984a:	d020      	beq.n	800988e <__multiply+0x142>
 800984c:	4663      	mov	r3, ip
 800984e:	002c      	movs	r4, r5
 8009850:	4660      	mov	r0, ip
 8009852:	2700      	movs	r7, #0
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3414      	adds	r4, #20
 8009858:	6822      	ldr	r2, [r4, #0]
 800985a:	b29b      	uxth	r3, r3
 800985c:	b291      	uxth	r1, r2
 800985e:	4371      	muls	r1, r6
 8009860:	6802      	ldr	r2, [r0, #0]
 8009862:	0c12      	lsrs	r2, r2, #16
 8009864:	1889      	adds	r1, r1, r2
 8009866:	19cf      	adds	r7, r1, r7
 8009868:	0439      	lsls	r1, r7, #16
 800986a:	430b      	orrs	r3, r1
 800986c:	6003      	str	r3, [r0, #0]
 800986e:	cc02      	ldmia	r4!, {r1}
 8009870:	6843      	ldr	r3, [r0, #4]
 8009872:	0c09      	lsrs	r1, r1, #16
 8009874:	4371      	muls	r1, r6
 8009876:	b29b      	uxth	r3, r3
 8009878:	0c3f      	lsrs	r7, r7, #16
 800987a:	18cb      	adds	r3, r1, r3
 800987c:	9a04      	ldr	r2, [sp, #16]
 800987e:	19db      	adds	r3, r3, r7
 8009880:	0c1f      	lsrs	r7, r3, #16
 8009882:	3004      	adds	r0, #4
 8009884:	42a2      	cmp	r2, r4
 8009886:	d8e7      	bhi.n	8009858 <__multiply+0x10c>
 8009888:	4662      	mov	r2, ip
 800988a:	9905      	ldr	r1, [sp, #20]
 800988c:	5053      	str	r3, [r2, r1]
 800988e:	9b00      	ldr	r3, [sp, #0]
 8009890:	3304      	adds	r3, #4
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	2304      	movs	r3, #4
 8009896:	449c      	add	ip, r3
 8009898:	e79d      	b.n	80097d6 <__multiply+0x8a>
 800989a:	9b02      	ldr	r3, [sp, #8]
 800989c:	3b01      	subs	r3, #1
 800989e:	9302      	str	r3, [sp, #8]
 80098a0:	e79d      	b.n	80097de <__multiply+0x92>
 80098a2:	46c0      	nop			; (mov r8, r8)
 80098a4:	0800af57 	.word	0x0800af57
 80098a8:	0800af68 	.word	0x0800af68

080098ac <__pow5mult>:
 80098ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ae:	2303      	movs	r3, #3
 80098b0:	0015      	movs	r5, r2
 80098b2:	0007      	movs	r7, r0
 80098b4:	000e      	movs	r6, r1
 80098b6:	401a      	ands	r2, r3
 80098b8:	421d      	tst	r5, r3
 80098ba:	d008      	beq.n	80098ce <__pow5mult+0x22>
 80098bc:	4925      	ldr	r1, [pc, #148]	; (8009954 <__pow5mult+0xa8>)
 80098be:	3a01      	subs	r2, #1
 80098c0:	0092      	lsls	r2, r2, #2
 80098c2:	5852      	ldr	r2, [r2, r1]
 80098c4:	2300      	movs	r3, #0
 80098c6:	0031      	movs	r1, r6
 80098c8:	f7ff fe9e 	bl	8009608 <__multadd>
 80098cc:	0006      	movs	r6, r0
 80098ce:	10ad      	asrs	r5, r5, #2
 80098d0:	d03d      	beq.n	800994e <__pow5mult+0xa2>
 80098d2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80098d4:	2c00      	cmp	r4, #0
 80098d6:	d10f      	bne.n	80098f8 <__pow5mult+0x4c>
 80098d8:	2010      	movs	r0, #16
 80098da:	f7ff fe0f 	bl	80094fc <malloc>
 80098de:	1e02      	subs	r2, r0, #0
 80098e0:	6278      	str	r0, [r7, #36]	; 0x24
 80098e2:	d105      	bne.n	80098f0 <__pow5mult+0x44>
 80098e4:	21d7      	movs	r1, #215	; 0xd7
 80098e6:	4b1c      	ldr	r3, [pc, #112]	; (8009958 <__pow5mult+0xac>)
 80098e8:	481c      	ldr	r0, [pc, #112]	; (800995c <__pow5mult+0xb0>)
 80098ea:	0049      	lsls	r1, r1, #1
 80098ec:	f000 fc42 	bl	800a174 <__assert_func>
 80098f0:	6044      	str	r4, [r0, #4]
 80098f2:	6084      	str	r4, [r0, #8]
 80098f4:	6004      	str	r4, [r0, #0]
 80098f6:	60c4      	str	r4, [r0, #12]
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	689c      	ldr	r4, [r3, #8]
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	2c00      	cmp	r4, #0
 8009900:	d108      	bne.n	8009914 <__pow5mult+0x68>
 8009902:	0038      	movs	r0, r7
 8009904:	4916      	ldr	r1, [pc, #88]	; (8009960 <__pow5mult+0xb4>)
 8009906:	f7ff ff0b 	bl	8009720 <__i2b>
 800990a:	9b01      	ldr	r3, [sp, #4]
 800990c:	0004      	movs	r4, r0
 800990e:	6098      	str	r0, [r3, #8]
 8009910:	2300      	movs	r3, #0
 8009912:	6003      	str	r3, [r0, #0]
 8009914:	2301      	movs	r3, #1
 8009916:	421d      	tst	r5, r3
 8009918:	d00a      	beq.n	8009930 <__pow5mult+0x84>
 800991a:	0031      	movs	r1, r6
 800991c:	0022      	movs	r2, r4
 800991e:	0038      	movs	r0, r7
 8009920:	f7ff ff14 	bl	800974c <__multiply>
 8009924:	0031      	movs	r1, r6
 8009926:	9001      	str	r0, [sp, #4]
 8009928:	0038      	movs	r0, r7
 800992a:	f7ff fe49 	bl	80095c0 <_Bfree>
 800992e:	9e01      	ldr	r6, [sp, #4]
 8009930:	106d      	asrs	r5, r5, #1
 8009932:	d00c      	beq.n	800994e <__pow5mult+0xa2>
 8009934:	6820      	ldr	r0, [r4, #0]
 8009936:	2800      	cmp	r0, #0
 8009938:	d107      	bne.n	800994a <__pow5mult+0x9e>
 800993a:	0022      	movs	r2, r4
 800993c:	0021      	movs	r1, r4
 800993e:	0038      	movs	r0, r7
 8009940:	f7ff ff04 	bl	800974c <__multiply>
 8009944:	2300      	movs	r3, #0
 8009946:	6020      	str	r0, [r4, #0]
 8009948:	6003      	str	r3, [r0, #0]
 800994a:	0004      	movs	r4, r0
 800994c:	e7e2      	b.n	8009914 <__pow5mult+0x68>
 800994e:	0030      	movs	r0, r6
 8009950:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009952:	46c0      	nop			; (mov r8, r8)
 8009954:	0800b0b8 	.word	0x0800b0b8
 8009958:	0800aee5 	.word	0x0800aee5
 800995c:	0800af68 	.word	0x0800af68
 8009960:	00000271 	.word	0x00000271

08009964 <__lshift>:
 8009964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009966:	000c      	movs	r4, r1
 8009968:	0017      	movs	r7, r2
 800996a:	6923      	ldr	r3, [r4, #16]
 800996c:	1155      	asrs	r5, r2, #5
 800996e:	b087      	sub	sp, #28
 8009970:	18eb      	adds	r3, r5, r3
 8009972:	9302      	str	r3, [sp, #8]
 8009974:	3301      	adds	r3, #1
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	6849      	ldr	r1, [r1, #4]
 800997a:	68a3      	ldr	r3, [r4, #8]
 800997c:	9004      	str	r0, [sp, #16]
 800997e:	9a01      	ldr	r2, [sp, #4]
 8009980:	4293      	cmp	r3, r2
 8009982:	db10      	blt.n	80099a6 <__lshift+0x42>
 8009984:	9804      	ldr	r0, [sp, #16]
 8009986:	f7ff fdd7 	bl	8009538 <_Balloc>
 800998a:	2300      	movs	r3, #0
 800998c:	0002      	movs	r2, r0
 800998e:	0006      	movs	r6, r0
 8009990:	0019      	movs	r1, r3
 8009992:	3214      	adds	r2, #20
 8009994:	4298      	cmp	r0, r3
 8009996:	d10c      	bne.n	80099b2 <__lshift+0x4e>
 8009998:	21da      	movs	r1, #218	; 0xda
 800999a:	0002      	movs	r2, r0
 800999c:	4b26      	ldr	r3, [pc, #152]	; (8009a38 <__lshift+0xd4>)
 800999e:	4827      	ldr	r0, [pc, #156]	; (8009a3c <__lshift+0xd8>)
 80099a0:	31ff      	adds	r1, #255	; 0xff
 80099a2:	f000 fbe7 	bl	800a174 <__assert_func>
 80099a6:	3101      	adds	r1, #1
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	e7e8      	b.n	800997e <__lshift+0x1a>
 80099ac:	0098      	lsls	r0, r3, #2
 80099ae:	5011      	str	r1, [r2, r0]
 80099b0:	3301      	adds	r3, #1
 80099b2:	42ab      	cmp	r3, r5
 80099b4:	dbfa      	blt.n	80099ac <__lshift+0x48>
 80099b6:	43eb      	mvns	r3, r5
 80099b8:	17db      	asrs	r3, r3, #31
 80099ba:	401d      	ands	r5, r3
 80099bc:	211f      	movs	r1, #31
 80099be:	0023      	movs	r3, r4
 80099c0:	0038      	movs	r0, r7
 80099c2:	00ad      	lsls	r5, r5, #2
 80099c4:	1955      	adds	r5, r2, r5
 80099c6:	6922      	ldr	r2, [r4, #16]
 80099c8:	3314      	adds	r3, #20
 80099ca:	0092      	lsls	r2, r2, #2
 80099cc:	4008      	ands	r0, r1
 80099ce:	4684      	mov	ip, r0
 80099d0:	189a      	adds	r2, r3, r2
 80099d2:	420f      	tst	r7, r1
 80099d4:	d02a      	beq.n	8009a2c <__lshift+0xc8>
 80099d6:	3101      	adds	r1, #1
 80099d8:	1a09      	subs	r1, r1, r0
 80099da:	9105      	str	r1, [sp, #20]
 80099dc:	2100      	movs	r1, #0
 80099de:	9503      	str	r5, [sp, #12]
 80099e0:	4667      	mov	r7, ip
 80099e2:	6818      	ldr	r0, [r3, #0]
 80099e4:	40b8      	lsls	r0, r7
 80099e6:	4301      	orrs	r1, r0
 80099e8:	9803      	ldr	r0, [sp, #12]
 80099ea:	c002      	stmia	r0!, {r1}
 80099ec:	cb02      	ldmia	r3!, {r1}
 80099ee:	9003      	str	r0, [sp, #12]
 80099f0:	9805      	ldr	r0, [sp, #20]
 80099f2:	40c1      	lsrs	r1, r0
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d8f3      	bhi.n	80099e0 <__lshift+0x7c>
 80099f8:	0020      	movs	r0, r4
 80099fa:	3015      	adds	r0, #21
 80099fc:	2304      	movs	r3, #4
 80099fe:	4282      	cmp	r2, r0
 8009a00:	d304      	bcc.n	8009a0c <__lshift+0xa8>
 8009a02:	1b13      	subs	r3, r2, r4
 8009a04:	3b15      	subs	r3, #21
 8009a06:	089b      	lsrs	r3, r3, #2
 8009a08:	3301      	adds	r3, #1
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	50e9      	str	r1, [r5, r3]
 8009a0e:	2900      	cmp	r1, #0
 8009a10:	d002      	beq.n	8009a18 <__lshift+0xb4>
 8009a12:	9b02      	ldr	r3, [sp, #8]
 8009a14:	3302      	adds	r3, #2
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	9b01      	ldr	r3, [sp, #4]
 8009a1a:	9804      	ldr	r0, [sp, #16]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	0021      	movs	r1, r4
 8009a20:	6133      	str	r3, [r6, #16]
 8009a22:	f7ff fdcd 	bl	80095c0 <_Bfree>
 8009a26:	0030      	movs	r0, r6
 8009a28:	b007      	add	sp, #28
 8009a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a2c:	cb02      	ldmia	r3!, {r1}
 8009a2e:	c502      	stmia	r5!, {r1}
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d8fb      	bhi.n	8009a2c <__lshift+0xc8>
 8009a34:	e7f0      	b.n	8009a18 <__lshift+0xb4>
 8009a36:	46c0      	nop			; (mov r8, r8)
 8009a38:	0800af57 	.word	0x0800af57
 8009a3c:	0800af68 	.word	0x0800af68

08009a40 <__mcmp>:
 8009a40:	6902      	ldr	r2, [r0, #16]
 8009a42:	690b      	ldr	r3, [r1, #16]
 8009a44:	b530      	push	{r4, r5, lr}
 8009a46:	0004      	movs	r4, r0
 8009a48:	1ad0      	subs	r0, r2, r3
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d10d      	bne.n	8009a6a <__mcmp+0x2a>
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	3414      	adds	r4, #20
 8009a52:	3114      	adds	r1, #20
 8009a54:	18e2      	adds	r2, r4, r3
 8009a56:	18c9      	adds	r1, r1, r3
 8009a58:	3a04      	subs	r2, #4
 8009a5a:	3904      	subs	r1, #4
 8009a5c:	6815      	ldr	r5, [r2, #0]
 8009a5e:	680b      	ldr	r3, [r1, #0]
 8009a60:	429d      	cmp	r5, r3
 8009a62:	d003      	beq.n	8009a6c <__mcmp+0x2c>
 8009a64:	2001      	movs	r0, #1
 8009a66:	429d      	cmp	r5, r3
 8009a68:	d303      	bcc.n	8009a72 <__mcmp+0x32>
 8009a6a:	bd30      	pop	{r4, r5, pc}
 8009a6c:	4294      	cmp	r4, r2
 8009a6e:	d3f3      	bcc.n	8009a58 <__mcmp+0x18>
 8009a70:	e7fb      	b.n	8009a6a <__mcmp+0x2a>
 8009a72:	4240      	negs	r0, r0
 8009a74:	e7f9      	b.n	8009a6a <__mcmp+0x2a>
	...

08009a78 <__mdiff>:
 8009a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a7a:	000e      	movs	r6, r1
 8009a7c:	0007      	movs	r7, r0
 8009a7e:	0011      	movs	r1, r2
 8009a80:	0030      	movs	r0, r6
 8009a82:	b087      	sub	sp, #28
 8009a84:	0014      	movs	r4, r2
 8009a86:	f7ff ffdb 	bl	8009a40 <__mcmp>
 8009a8a:	1e05      	subs	r5, r0, #0
 8009a8c:	d110      	bne.n	8009ab0 <__mdiff+0x38>
 8009a8e:	0001      	movs	r1, r0
 8009a90:	0038      	movs	r0, r7
 8009a92:	f7ff fd51 	bl	8009538 <_Balloc>
 8009a96:	1e02      	subs	r2, r0, #0
 8009a98:	d104      	bne.n	8009aa4 <__mdiff+0x2c>
 8009a9a:	4b40      	ldr	r3, [pc, #256]	; (8009b9c <__mdiff+0x124>)
 8009a9c:	4940      	ldr	r1, [pc, #256]	; (8009ba0 <__mdiff+0x128>)
 8009a9e:	4841      	ldr	r0, [pc, #260]	; (8009ba4 <__mdiff+0x12c>)
 8009aa0:	f000 fb68 	bl	800a174 <__assert_func>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	6145      	str	r5, [r0, #20]
 8009aa8:	6103      	str	r3, [r0, #16]
 8009aaa:	0010      	movs	r0, r2
 8009aac:	b007      	add	sp, #28
 8009aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	9301      	str	r3, [sp, #4]
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	db04      	blt.n	8009ac2 <__mdiff+0x4a>
 8009ab8:	0023      	movs	r3, r4
 8009aba:	0034      	movs	r4, r6
 8009abc:	001e      	movs	r6, r3
 8009abe:	2300      	movs	r3, #0
 8009ac0:	9301      	str	r3, [sp, #4]
 8009ac2:	0038      	movs	r0, r7
 8009ac4:	6861      	ldr	r1, [r4, #4]
 8009ac6:	f7ff fd37 	bl	8009538 <_Balloc>
 8009aca:	1e02      	subs	r2, r0, #0
 8009acc:	d103      	bne.n	8009ad6 <__mdiff+0x5e>
 8009ace:	2190      	movs	r1, #144	; 0x90
 8009ad0:	4b32      	ldr	r3, [pc, #200]	; (8009b9c <__mdiff+0x124>)
 8009ad2:	0089      	lsls	r1, r1, #2
 8009ad4:	e7e3      	b.n	8009a9e <__mdiff+0x26>
 8009ad6:	9b01      	ldr	r3, [sp, #4]
 8009ad8:	2700      	movs	r7, #0
 8009ada:	60c3      	str	r3, [r0, #12]
 8009adc:	6920      	ldr	r0, [r4, #16]
 8009ade:	3414      	adds	r4, #20
 8009ae0:	9401      	str	r4, [sp, #4]
 8009ae2:	9b01      	ldr	r3, [sp, #4]
 8009ae4:	0084      	lsls	r4, r0, #2
 8009ae6:	191b      	adds	r3, r3, r4
 8009ae8:	0034      	movs	r4, r6
 8009aea:	9302      	str	r3, [sp, #8]
 8009aec:	6933      	ldr	r3, [r6, #16]
 8009aee:	3414      	adds	r4, #20
 8009af0:	0099      	lsls	r1, r3, #2
 8009af2:	1863      	adds	r3, r4, r1
 8009af4:	9303      	str	r3, [sp, #12]
 8009af6:	0013      	movs	r3, r2
 8009af8:	3314      	adds	r3, #20
 8009afa:	469c      	mov	ip, r3
 8009afc:	9305      	str	r3, [sp, #20]
 8009afe:	9b01      	ldr	r3, [sp, #4]
 8009b00:	9304      	str	r3, [sp, #16]
 8009b02:	9b04      	ldr	r3, [sp, #16]
 8009b04:	cc02      	ldmia	r4!, {r1}
 8009b06:	cb20      	ldmia	r3!, {r5}
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	b2ab      	uxth	r3, r5
 8009b0c:	19df      	adds	r7, r3, r7
 8009b0e:	b28b      	uxth	r3, r1
 8009b10:	1afb      	subs	r3, r7, r3
 8009b12:	0c09      	lsrs	r1, r1, #16
 8009b14:	0c2d      	lsrs	r5, r5, #16
 8009b16:	1a6d      	subs	r5, r5, r1
 8009b18:	1419      	asrs	r1, r3, #16
 8009b1a:	186d      	adds	r5, r5, r1
 8009b1c:	4661      	mov	r1, ip
 8009b1e:	142f      	asrs	r7, r5, #16
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	042d      	lsls	r5, r5, #16
 8009b24:	432b      	orrs	r3, r5
 8009b26:	c108      	stmia	r1!, {r3}
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	468c      	mov	ip, r1
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	d8e8      	bhi.n	8009b02 <__mdiff+0x8a>
 8009b30:	0031      	movs	r1, r6
 8009b32:	9c03      	ldr	r4, [sp, #12]
 8009b34:	3115      	adds	r1, #21
 8009b36:	2304      	movs	r3, #4
 8009b38:	428c      	cmp	r4, r1
 8009b3a:	d304      	bcc.n	8009b46 <__mdiff+0xce>
 8009b3c:	1ba3      	subs	r3, r4, r6
 8009b3e:	3b15      	subs	r3, #21
 8009b40:	089b      	lsrs	r3, r3, #2
 8009b42:	3301      	adds	r3, #1
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	9901      	ldr	r1, [sp, #4]
 8009b48:	18cc      	adds	r4, r1, r3
 8009b4a:	9905      	ldr	r1, [sp, #20]
 8009b4c:	0026      	movs	r6, r4
 8009b4e:	18cb      	adds	r3, r1, r3
 8009b50:	469c      	mov	ip, r3
 8009b52:	9902      	ldr	r1, [sp, #8]
 8009b54:	428e      	cmp	r6, r1
 8009b56:	d310      	bcc.n	8009b7a <__mdiff+0x102>
 8009b58:	9e02      	ldr	r6, [sp, #8]
 8009b5a:	1ee1      	subs	r1, r4, #3
 8009b5c:	2500      	movs	r5, #0
 8009b5e:	428e      	cmp	r6, r1
 8009b60:	d304      	bcc.n	8009b6c <__mdiff+0xf4>
 8009b62:	0031      	movs	r1, r6
 8009b64:	3103      	adds	r1, #3
 8009b66:	1b0c      	subs	r4, r1, r4
 8009b68:	08a4      	lsrs	r4, r4, #2
 8009b6a:	00a5      	lsls	r5, r4, #2
 8009b6c:	195b      	adds	r3, r3, r5
 8009b6e:	3b04      	subs	r3, #4
 8009b70:	6819      	ldr	r1, [r3, #0]
 8009b72:	2900      	cmp	r1, #0
 8009b74:	d00f      	beq.n	8009b96 <__mdiff+0x11e>
 8009b76:	6110      	str	r0, [r2, #16]
 8009b78:	e797      	b.n	8009aaa <__mdiff+0x32>
 8009b7a:	ce02      	ldmia	r6!, {r1}
 8009b7c:	b28d      	uxth	r5, r1
 8009b7e:	19ed      	adds	r5, r5, r7
 8009b80:	0c0f      	lsrs	r7, r1, #16
 8009b82:	1429      	asrs	r1, r5, #16
 8009b84:	1879      	adds	r1, r7, r1
 8009b86:	140f      	asrs	r7, r1, #16
 8009b88:	b2ad      	uxth	r5, r5
 8009b8a:	0409      	lsls	r1, r1, #16
 8009b8c:	430d      	orrs	r5, r1
 8009b8e:	4661      	mov	r1, ip
 8009b90:	c120      	stmia	r1!, {r5}
 8009b92:	468c      	mov	ip, r1
 8009b94:	e7dd      	b.n	8009b52 <__mdiff+0xda>
 8009b96:	3801      	subs	r0, #1
 8009b98:	e7e9      	b.n	8009b6e <__mdiff+0xf6>
 8009b9a:	46c0      	nop			; (mov r8, r8)
 8009b9c:	0800af57 	.word	0x0800af57
 8009ba0:	00000232 	.word	0x00000232
 8009ba4:	0800af68 	.word	0x0800af68

08009ba8 <__d2b>:
 8009ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009baa:	2101      	movs	r1, #1
 8009bac:	0014      	movs	r4, r2
 8009bae:	001e      	movs	r6, r3
 8009bb0:	9f08      	ldr	r7, [sp, #32]
 8009bb2:	f7ff fcc1 	bl	8009538 <_Balloc>
 8009bb6:	1e05      	subs	r5, r0, #0
 8009bb8:	d105      	bne.n	8009bc6 <__d2b+0x1e>
 8009bba:	0002      	movs	r2, r0
 8009bbc:	4b26      	ldr	r3, [pc, #152]	; (8009c58 <__d2b+0xb0>)
 8009bbe:	4927      	ldr	r1, [pc, #156]	; (8009c5c <__d2b+0xb4>)
 8009bc0:	4827      	ldr	r0, [pc, #156]	; (8009c60 <__d2b+0xb8>)
 8009bc2:	f000 fad7 	bl	800a174 <__assert_func>
 8009bc6:	0333      	lsls	r3, r6, #12
 8009bc8:	0076      	lsls	r6, r6, #1
 8009bca:	0b1b      	lsrs	r3, r3, #12
 8009bcc:	0d76      	lsrs	r6, r6, #21
 8009bce:	d124      	bne.n	8009c1a <__d2b+0x72>
 8009bd0:	9301      	str	r3, [sp, #4]
 8009bd2:	2c00      	cmp	r4, #0
 8009bd4:	d027      	beq.n	8009c26 <__d2b+0x7e>
 8009bd6:	4668      	mov	r0, sp
 8009bd8:	9400      	str	r4, [sp, #0]
 8009bda:	f7ff fd73 	bl	80096c4 <__lo0bits>
 8009bde:	9c00      	ldr	r4, [sp, #0]
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d01e      	beq.n	8009c22 <__d2b+0x7a>
 8009be4:	9b01      	ldr	r3, [sp, #4]
 8009be6:	2120      	movs	r1, #32
 8009be8:	001a      	movs	r2, r3
 8009bea:	1a09      	subs	r1, r1, r0
 8009bec:	408a      	lsls	r2, r1
 8009bee:	40c3      	lsrs	r3, r0
 8009bf0:	4322      	orrs	r2, r4
 8009bf2:	616a      	str	r2, [r5, #20]
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	9c01      	ldr	r4, [sp, #4]
 8009bf8:	61ac      	str	r4, [r5, #24]
 8009bfa:	1e63      	subs	r3, r4, #1
 8009bfc:	419c      	sbcs	r4, r3
 8009bfe:	3401      	adds	r4, #1
 8009c00:	612c      	str	r4, [r5, #16]
 8009c02:	2e00      	cmp	r6, #0
 8009c04:	d018      	beq.n	8009c38 <__d2b+0x90>
 8009c06:	4b17      	ldr	r3, [pc, #92]	; (8009c64 <__d2b+0xbc>)
 8009c08:	18f6      	adds	r6, r6, r3
 8009c0a:	2335      	movs	r3, #53	; 0x35
 8009c0c:	1836      	adds	r6, r6, r0
 8009c0e:	1a18      	subs	r0, r3, r0
 8009c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c12:	603e      	str	r6, [r7, #0]
 8009c14:	6018      	str	r0, [r3, #0]
 8009c16:	0028      	movs	r0, r5
 8009c18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c1a:	2280      	movs	r2, #128	; 0x80
 8009c1c:	0352      	lsls	r2, r2, #13
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	e7d6      	b.n	8009bd0 <__d2b+0x28>
 8009c22:	616c      	str	r4, [r5, #20]
 8009c24:	e7e7      	b.n	8009bf6 <__d2b+0x4e>
 8009c26:	a801      	add	r0, sp, #4
 8009c28:	f7ff fd4c 	bl	80096c4 <__lo0bits>
 8009c2c:	2401      	movs	r4, #1
 8009c2e:	9b01      	ldr	r3, [sp, #4]
 8009c30:	612c      	str	r4, [r5, #16]
 8009c32:	616b      	str	r3, [r5, #20]
 8009c34:	3020      	adds	r0, #32
 8009c36:	e7e4      	b.n	8009c02 <__d2b+0x5a>
 8009c38:	4b0b      	ldr	r3, [pc, #44]	; (8009c68 <__d2b+0xc0>)
 8009c3a:	18c0      	adds	r0, r0, r3
 8009c3c:	4b0b      	ldr	r3, [pc, #44]	; (8009c6c <__d2b+0xc4>)
 8009c3e:	6038      	str	r0, [r7, #0]
 8009c40:	18e3      	adds	r3, r4, r3
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	18eb      	adds	r3, r5, r3
 8009c46:	6958      	ldr	r0, [r3, #20]
 8009c48:	f7ff fd22 	bl	8009690 <__hi0bits>
 8009c4c:	0164      	lsls	r4, r4, #5
 8009c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c50:	1a24      	subs	r4, r4, r0
 8009c52:	601c      	str	r4, [r3, #0]
 8009c54:	e7df      	b.n	8009c16 <__d2b+0x6e>
 8009c56:	46c0      	nop			; (mov r8, r8)
 8009c58:	0800af57 	.word	0x0800af57
 8009c5c:	0000030a 	.word	0x0000030a
 8009c60:	0800af68 	.word	0x0800af68
 8009c64:	fffffbcd 	.word	0xfffffbcd
 8009c68:	fffffbce 	.word	0xfffffbce
 8009c6c:	3fffffff 	.word	0x3fffffff

08009c70 <_calloc_r>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	0c13      	lsrs	r3, r2, #16
 8009c74:	0c0d      	lsrs	r5, r1, #16
 8009c76:	d11e      	bne.n	8009cb6 <_calloc_r+0x46>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10c      	bne.n	8009c96 <_calloc_r+0x26>
 8009c7c:	b289      	uxth	r1, r1
 8009c7e:	b294      	uxth	r4, r2
 8009c80:	434c      	muls	r4, r1
 8009c82:	0021      	movs	r1, r4
 8009c84:	f000 f88c 	bl	8009da0 <_malloc_r>
 8009c88:	1e05      	subs	r5, r0, #0
 8009c8a:	d01b      	beq.n	8009cc4 <_calloc_r+0x54>
 8009c8c:	0022      	movs	r2, r4
 8009c8e:	2100      	movs	r1, #0
 8009c90:	f7fe f8c0 	bl	8007e14 <memset>
 8009c94:	e016      	b.n	8009cc4 <_calloc_r+0x54>
 8009c96:	1c1d      	adds	r5, r3, #0
 8009c98:	1c0b      	adds	r3, r1, #0
 8009c9a:	b292      	uxth	r2, r2
 8009c9c:	b289      	uxth	r1, r1
 8009c9e:	b29c      	uxth	r4, r3
 8009ca0:	4351      	muls	r1, r2
 8009ca2:	b2ab      	uxth	r3, r5
 8009ca4:	4363      	muls	r3, r4
 8009ca6:	0c0c      	lsrs	r4, r1, #16
 8009ca8:	191c      	adds	r4, r3, r4
 8009caa:	0c22      	lsrs	r2, r4, #16
 8009cac:	d107      	bne.n	8009cbe <_calloc_r+0x4e>
 8009cae:	0424      	lsls	r4, r4, #16
 8009cb0:	b289      	uxth	r1, r1
 8009cb2:	430c      	orrs	r4, r1
 8009cb4:	e7e5      	b.n	8009c82 <_calloc_r+0x12>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <_calloc_r+0x4e>
 8009cba:	1c13      	adds	r3, r2, #0
 8009cbc:	e7ed      	b.n	8009c9a <_calloc_r+0x2a>
 8009cbe:	230c      	movs	r3, #12
 8009cc0:	2500      	movs	r5, #0
 8009cc2:	6003      	str	r3, [r0, #0]
 8009cc4:	0028      	movs	r0, r5
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}

08009cc8 <_free_r>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	0005      	movs	r5, r0
 8009ccc:	2900      	cmp	r1, #0
 8009cce:	d010      	beq.n	8009cf2 <_free_r+0x2a>
 8009cd0:	1f0c      	subs	r4, r1, #4
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	da00      	bge.n	8009cda <_free_r+0x12>
 8009cd8:	18e4      	adds	r4, r4, r3
 8009cda:	0028      	movs	r0, r5
 8009cdc:	f000 fa9e 	bl	800a21c <__malloc_lock>
 8009ce0:	4a1d      	ldr	r2, [pc, #116]	; (8009d58 <_free_r+0x90>)
 8009ce2:	6813      	ldr	r3, [r2, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d105      	bne.n	8009cf4 <_free_r+0x2c>
 8009ce8:	6063      	str	r3, [r4, #4]
 8009cea:	6014      	str	r4, [r2, #0]
 8009cec:	0028      	movs	r0, r5
 8009cee:	f000 fa9d 	bl	800a22c <__malloc_unlock>
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}
 8009cf4:	42a3      	cmp	r3, r4
 8009cf6:	d908      	bls.n	8009d0a <_free_r+0x42>
 8009cf8:	6821      	ldr	r1, [r4, #0]
 8009cfa:	1860      	adds	r0, r4, r1
 8009cfc:	4283      	cmp	r3, r0
 8009cfe:	d1f3      	bne.n	8009ce8 <_free_r+0x20>
 8009d00:	6818      	ldr	r0, [r3, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	1841      	adds	r1, r0, r1
 8009d06:	6021      	str	r1, [r4, #0]
 8009d08:	e7ee      	b.n	8009ce8 <_free_r+0x20>
 8009d0a:	001a      	movs	r2, r3
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <_free_r+0x4e>
 8009d12:	42a3      	cmp	r3, r4
 8009d14:	d9f9      	bls.n	8009d0a <_free_r+0x42>
 8009d16:	6811      	ldr	r1, [r2, #0]
 8009d18:	1850      	adds	r0, r2, r1
 8009d1a:	42a0      	cmp	r0, r4
 8009d1c:	d10b      	bne.n	8009d36 <_free_r+0x6e>
 8009d1e:	6820      	ldr	r0, [r4, #0]
 8009d20:	1809      	adds	r1, r1, r0
 8009d22:	1850      	adds	r0, r2, r1
 8009d24:	6011      	str	r1, [r2, #0]
 8009d26:	4283      	cmp	r3, r0
 8009d28:	d1e0      	bne.n	8009cec <_free_r+0x24>
 8009d2a:	6818      	ldr	r0, [r3, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	1841      	adds	r1, r0, r1
 8009d30:	6011      	str	r1, [r2, #0]
 8009d32:	6053      	str	r3, [r2, #4]
 8009d34:	e7da      	b.n	8009cec <_free_r+0x24>
 8009d36:	42a0      	cmp	r0, r4
 8009d38:	d902      	bls.n	8009d40 <_free_r+0x78>
 8009d3a:	230c      	movs	r3, #12
 8009d3c:	602b      	str	r3, [r5, #0]
 8009d3e:	e7d5      	b.n	8009cec <_free_r+0x24>
 8009d40:	6821      	ldr	r1, [r4, #0]
 8009d42:	1860      	adds	r0, r4, r1
 8009d44:	4283      	cmp	r3, r0
 8009d46:	d103      	bne.n	8009d50 <_free_r+0x88>
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	1841      	adds	r1, r0, r1
 8009d4e:	6021      	str	r1, [r4, #0]
 8009d50:	6063      	str	r3, [r4, #4]
 8009d52:	6054      	str	r4, [r2, #4]
 8009d54:	e7ca      	b.n	8009cec <_free_r+0x24>
 8009d56:	46c0      	nop			; (mov r8, r8)
 8009d58:	200003c8 	.word	0x200003c8

08009d5c <sbrk_aligned>:
 8009d5c:	b570      	push	{r4, r5, r6, lr}
 8009d5e:	4e0f      	ldr	r6, [pc, #60]	; (8009d9c <sbrk_aligned+0x40>)
 8009d60:	000d      	movs	r5, r1
 8009d62:	6831      	ldr	r1, [r6, #0]
 8009d64:	0004      	movs	r4, r0
 8009d66:	2900      	cmp	r1, #0
 8009d68:	d102      	bne.n	8009d70 <sbrk_aligned+0x14>
 8009d6a:	f000 f9f1 	bl	800a150 <_sbrk_r>
 8009d6e:	6030      	str	r0, [r6, #0]
 8009d70:	0029      	movs	r1, r5
 8009d72:	0020      	movs	r0, r4
 8009d74:	f000 f9ec 	bl	800a150 <_sbrk_r>
 8009d78:	1c43      	adds	r3, r0, #1
 8009d7a:	d00a      	beq.n	8009d92 <sbrk_aligned+0x36>
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	1cc5      	adds	r5, r0, #3
 8009d80:	439d      	bics	r5, r3
 8009d82:	42a8      	cmp	r0, r5
 8009d84:	d007      	beq.n	8009d96 <sbrk_aligned+0x3a>
 8009d86:	1a29      	subs	r1, r5, r0
 8009d88:	0020      	movs	r0, r4
 8009d8a:	f000 f9e1 	bl	800a150 <_sbrk_r>
 8009d8e:	1c43      	adds	r3, r0, #1
 8009d90:	d101      	bne.n	8009d96 <sbrk_aligned+0x3a>
 8009d92:	2501      	movs	r5, #1
 8009d94:	426d      	negs	r5, r5
 8009d96:	0028      	movs	r0, r5
 8009d98:	bd70      	pop	{r4, r5, r6, pc}
 8009d9a:	46c0      	nop			; (mov r8, r8)
 8009d9c:	200003cc 	.word	0x200003cc

08009da0 <_malloc_r>:
 8009da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009da2:	2203      	movs	r2, #3
 8009da4:	1ccb      	adds	r3, r1, #3
 8009da6:	4393      	bics	r3, r2
 8009da8:	3308      	adds	r3, #8
 8009daa:	0006      	movs	r6, r0
 8009dac:	001f      	movs	r7, r3
 8009dae:	2b0c      	cmp	r3, #12
 8009db0:	d232      	bcs.n	8009e18 <_malloc_r+0x78>
 8009db2:	270c      	movs	r7, #12
 8009db4:	42b9      	cmp	r1, r7
 8009db6:	d831      	bhi.n	8009e1c <_malloc_r+0x7c>
 8009db8:	0030      	movs	r0, r6
 8009dba:	f000 fa2f 	bl	800a21c <__malloc_lock>
 8009dbe:	4d32      	ldr	r5, [pc, #200]	; (8009e88 <_malloc_r+0xe8>)
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	001c      	movs	r4, r3
 8009dc4:	2c00      	cmp	r4, #0
 8009dc6:	d12e      	bne.n	8009e26 <_malloc_r+0x86>
 8009dc8:	0039      	movs	r1, r7
 8009dca:	0030      	movs	r0, r6
 8009dcc:	f7ff ffc6 	bl	8009d5c <sbrk_aligned>
 8009dd0:	0004      	movs	r4, r0
 8009dd2:	1c43      	adds	r3, r0, #1
 8009dd4:	d11e      	bne.n	8009e14 <_malloc_r+0x74>
 8009dd6:	682c      	ldr	r4, [r5, #0]
 8009dd8:	0025      	movs	r5, r4
 8009dda:	2d00      	cmp	r5, #0
 8009ddc:	d14a      	bne.n	8009e74 <_malloc_r+0xd4>
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	0029      	movs	r1, r5
 8009de2:	18e3      	adds	r3, r4, r3
 8009de4:	0030      	movs	r0, r6
 8009de6:	9301      	str	r3, [sp, #4]
 8009de8:	f000 f9b2 	bl	800a150 <_sbrk_r>
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	4283      	cmp	r3, r0
 8009df0:	d143      	bne.n	8009e7a <_malloc_r+0xda>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	3703      	adds	r7, #3
 8009df6:	1aff      	subs	r7, r7, r3
 8009df8:	2303      	movs	r3, #3
 8009dfa:	439f      	bics	r7, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	2f0c      	cmp	r7, #12
 8009e00:	d200      	bcs.n	8009e04 <_malloc_r+0x64>
 8009e02:	270c      	movs	r7, #12
 8009e04:	0039      	movs	r1, r7
 8009e06:	0030      	movs	r0, r6
 8009e08:	f7ff ffa8 	bl	8009d5c <sbrk_aligned>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d034      	beq.n	8009e7a <_malloc_r+0xda>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	19df      	adds	r7, r3, r7
 8009e14:	6027      	str	r7, [r4, #0]
 8009e16:	e013      	b.n	8009e40 <_malloc_r+0xa0>
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	dacb      	bge.n	8009db4 <_malloc_r+0x14>
 8009e1c:	230c      	movs	r3, #12
 8009e1e:	2500      	movs	r5, #0
 8009e20:	6033      	str	r3, [r6, #0]
 8009e22:	0028      	movs	r0, r5
 8009e24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e26:	6822      	ldr	r2, [r4, #0]
 8009e28:	1bd1      	subs	r1, r2, r7
 8009e2a:	d420      	bmi.n	8009e6e <_malloc_r+0xce>
 8009e2c:	290b      	cmp	r1, #11
 8009e2e:	d917      	bls.n	8009e60 <_malloc_r+0xc0>
 8009e30:	19e2      	adds	r2, r4, r7
 8009e32:	6027      	str	r7, [r4, #0]
 8009e34:	42a3      	cmp	r3, r4
 8009e36:	d111      	bne.n	8009e5c <_malloc_r+0xbc>
 8009e38:	602a      	str	r2, [r5, #0]
 8009e3a:	6863      	ldr	r3, [r4, #4]
 8009e3c:	6011      	str	r1, [r2, #0]
 8009e3e:	6053      	str	r3, [r2, #4]
 8009e40:	0030      	movs	r0, r6
 8009e42:	0025      	movs	r5, r4
 8009e44:	f000 f9f2 	bl	800a22c <__malloc_unlock>
 8009e48:	2207      	movs	r2, #7
 8009e4a:	350b      	adds	r5, #11
 8009e4c:	1d23      	adds	r3, r4, #4
 8009e4e:	4395      	bics	r5, r2
 8009e50:	1aea      	subs	r2, r5, r3
 8009e52:	429d      	cmp	r5, r3
 8009e54:	d0e5      	beq.n	8009e22 <_malloc_r+0x82>
 8009e56:	1b5b      	subs	r3, r3, r5
 8009e58:	50a3      	str	r3, [r4, r2]
 8009e5a:	e7e2      	b.n	8009e22 <_malloc_r+0x82>
 8009e5c:	605a      	str	r2, [r3, #4]
 8009e5e:	e7ec      	b.n	8009e3a <_malloc_r+0x9a>
 8009e60:	6862      	ldr	r2, [r4, #4]
 8009e62:	42a3      	cmp	r3, r4
 8009e64:	d101      	bne.n	8009e6a <_malloc_r+0xca>
 8009e66:	602a      	str	r2, [r5, #0]
 8009e68:	e7ea      	b.n	8009e40 <_malloc_r+0xa0>
 8009e6a:	605a      	str	r2, [r3, #4]
 8009e6c:	e7e8      	b.n	8009e40 <_malloc_r+0xa0>
 8009e6e:	0023      	movs	r3, r4
 8009e70:	6864      	ldr	r4, [r4, #4]
 8009e72:	e7a7      	b.n	8009dc4 <_malloc_r+0x24>
 8009e74:	002c      	movs	r4, r5
 8009e76:	686d      	ldr	r5, [r5, #4]
 8009e78:	e7af      	b.n	8009dda <_malloc_r+0x3a>
 8009e7a:	230c      	movs	r3, #12
 8009e7c:	0030      	movs	r0, r6
 8009e7e:	6033      	str	r3, [r6, #0]
 8009e80:	f000 f9d4 	bl	800a22c <__malloc_unlock>
 8009e84:	e7cd      	b.n	8009e22 <_malloc_r+0x82>
 8009e86:	46c0      	nop			; (mov r8, r8)
 8009e88:	200003c8 	.word	0x200003c8

08009e8c <__ssputs_r>:
 8009e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e8e:	688e      	ldr	r6, [r1, #8]
 8009e90:	b085      	sub	sp, #20
 8009e92:	0007      	movs	r7, r0
 8009e94:	000c      	movs	r4, r1
 8009e96:	9203      	str	r2, [sp, #12]
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	429e      	cmp	r6, r3
 8009e9c:	d83c      	bhi.n	8009f18 <__ssputs_r+0x8c>
 8009e9e:	2390      	movs	r3, #144	; 0x90
 8009ea0:	898a      	ldrh	r2, [r1, #12]
 8009ea2:	00db      	lsls	r3, r3, #3
 8009ea4:	421a      	tst	r2, r3
 8009ea6:	d034      	beq.n	8009f12 <__ssputs_r+0x86>
 8009ea8:	6909      	ldr	r1, [r1, #16]
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	6960      	ldr	r0, [r4, #20]
 8009eae:	1a5b      	subs	r3, r3, r1
 8009eb0:	9302      	str	r3, [sp, #8]
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	4343      	muls	r3, r0
 8009eb6:	0fdd      	lsrs	r5, r3, #31
 8009eb8:	18ed      	adds	r5, r5, r3
 8009eba:	9b01      	ldr	r3, [sp, #4]
 8009ebc:	9802      	ldr	r0, [sp, #8]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	181b      	adds	r3, r3, r0
 8009ec2:	106d      	asrs	r5, r5, #1
 8009ec4:	42ab      	cmp	r3, r5
 8009ec6:	d900      	bls.n	8009eca <__ssputs_r+0x3e>
 8009ec8:	001d      	movs	r5, r3
 8009eca:	0553      	lsls	r3, r2, #21
 8009ecc:	d532      	bpl.n	8009f34 <__ssputs_r+0xa8>
 8009ece:	0029      	movs	r1, r5
 8009ed0:	0038      	movs	r0, r7
 8009ed2:	f7ff ff65 	bl	8009da0 <_malloc_r>
 8009ed6:	1e06      	subs	r6, r0, #0
 8009ed8:	d109      	bne.n	8009eee <__ssputs_r+0x62>
 8009eda:	230c      	movs	r3, #12
 8009edc:	603b      	str	r3, [r7, #0]
 8009ede:	2340      	movs	r3, #64	; 0x40
 8009ee0:	2001      	movs	r0, #1
 8009ee2:	89a2      	ldrh	r2, [r4, #12]
 8009ee4:	4240      	negs	r0, r0
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	81a3      	strh	r3, [r4, #12]
 8009eea:	b005      	add	sp, #20
 8009eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eee:	9a02      	ldr	r2, [sp, #8]
 8009ef0:	6921      	ldr	r1, [r4, #16]
 8009ef2:	f7ff fb18 	bl	8009526 <memcpy>
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	4a14      	ldr	r2, [pc, #80]	; (8009f4c <__ssputs_r+0xc0>)
 8009efa:	401a      	ands	r2, r3
 8009efc:	2380      	movs	r3, #128	; 0x80
 8009efe:	4313      	orrs	r3, r2
 8009f00:	81a3      	strh	r3, [r4, #12]
 8009f02:	9b02      	ldr	r3, [sp, #8]
 8009f04:	6126      	str	r6, [r4, #16]
 8009f06:	18f6      	adds	r6, r6, r3
 8009f08:	6026      	str	r6, [r4, #0]
 8009f0a:	6165      	str	r5, [r4, #20]
 8009f0c:	9e01      	ldr	r6, [sp, #4]
 8009f0e:	1aed      	subs	r5, r5, r3
 8009f10:	60a5      	str	r5, [r4, #8]
 8009f12:	9b01      	ldr	r3, [sp, #4]
 8009f14:	429e      	cmp	r6, r3
 8009f16:	d900      	bls.n	8009f1a <__ssputs_r+0x8e>
 8009f18:	9e01      	ldr	r6, [sp, #4]
 8009f1a:	0032      	movs	r2, r6
 8009f1c:	9903      	ldr	r1, [sp, #12]
 8009f1e:	6820      	ldr	r0, [r4, #0]
 8009f20:	f000 f968 	bl	800a1f4 <memmove>
 8009f24:	68a3      	ldr	r3, [r4, #8]
 8009f26:	2000      	movs	r0, #0
 8009f28:	1b9b      	subs	r3, r3, r6
 8009f2a:	60a3      	str	r3, [r4, #8]
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	199e      	adds	r6, r3, r6
 8009f30:	6026      	str	r6, [r4, #0]
 8009f32:	e7da      	b.n	8009eea <__ssputs_r+0x5e>
 8009f34:	002a      	movs	r2, r5
 8009f36:	0038      	movs	r0, r7
 8009f38:	f000 f980 	bl	800a23c <_realloc_r>
 8009f3c:	1e06      	subs	r6, r0, #0
 8009f3e:	d1e0      	bne.n	8009f02 <__ssputs_r+0x76>
 8009f40:	0038      	movs	r0, r7
 8009f42:	6921      	ldr	r1, [r4, #16]
 8009f44:	f7ff fec0 	bl	8009cc8 <_free_r>
 8009f48:	e7c7      	b.n	8009eda <__ssputs_r+0x4e>
 8009f4a:	46c0      	nop			; (mov r8, r8)
 8009f4c:	fffffb7f 	.word	0xfffffb7f

08009f50 <_svfiprintf_r>:
 8009f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f52:	b0a1      	sub	sp, #132	; 0x84
 8009f54:	9003      	str	r0, [sp, #12]
 8009f56:	001d      	movs	r5, r3
 8009f58:	898b      	ldrh	r3, [r1, #12]
 8009f5a:	000f      	movs	r7, r1
 8009f5c:	0016      	movs	r6, r2
 8009f5e:	061b      	lsls	r3, r3, #24
 8009f60:	d511      	bpl.n	8009f86 <_svfiprintf_r+0x36>
 8009f62:	690b      	ldr	r3, [r1, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10e      	bne.n	8009f86 <_svfiprintf_r+0x36>
 8009f68:	2140      	movs	r1, #64	; 0x40
 8009f6a:	f7ff ff19 	bl	8009da0 <_malloc_r>
 8009f6e:	6038      	str	r0, [r7, #0]
 8009f70:	6138      	str	r0, [r7, #16]
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d105      	bne.n	8009f82 <_svfiprintf_r+0x32>
 8009f76:	230c      	movs	r3, #12
 8009f78:	9a03      	ldr	r2, [sp, #12]
 8009f7a:	3801      	subs	r0, #1
 8009f7c:	6013      	str	r3, [r2, #0]
 8009f7e:	b021      	add	sp, #132	; 0x84
 8009f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f82:	2340      	movs	r3, #64	; 0x40
 8009f84:	617b      	str	r3, [r7, #20]
 8009f86:	2300      	movs	r3, #0
 8009f88:	ac08      	add	r4, sp, #32
 8009f8a:	6163      	str	r3, [r4, #20]
 8009f8c:	3320      	adds	r3, #32
 8009f8e:	7663      	strb	r3, [r4, #25]
 8009f90:	3310      	adds	r3, #16
 8009f92:	76a3      	strb	r3, [r4, #26]
 8009f94:	9507      	str	r5, [sp, #28]
 8009f96:	0035      	movs	r5, r6
 8009f98:	782b      	ldrb	r3, [r5, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <_svfiprintf_r+0x52>
 8009f9e:	2b25      	cmp	r3, #37	; 0x25
 8009fa0:	d147      	bne.n	800a032 <_svfiprintf_r+0xe2>
 8009fa2:	1bab      	subs	r3, r5, r6
 8009fa4:	9305      	str	r3, [sp, #20]
 8009fa6:	42b5      	cmp	r5, r6
 8009fa8:	d00c      	beq.n	8009fc4 <_svfiprintf_r+0x74>
 8009faa:	0032      	movs	r2, r6
 8009fac:	0039      	movs	r1, r7
 8009fae:	9803      	ldr	r0, [sp, #12]
 8009fb0:	f7ff ff6c 	bl	8009e8c <__ssputs_r>
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	d100      	bne.n	8009fba <_svfiprintf_r+0x6a>
 8009fb8:	e0ae      	b.n	800a118 <_svfiprintf_r+0x1c8>
 8009fba:	6962      	ldr	r2, [r4, #20]
 8009fbc:	9b05      	ldr	r3, [sp, #20]
 8009fbe:	4694      	mov	ip, r2
 8009fc0:	4463      	add	r3, ip
 8009fc2:	6163      	str	r3, [r4, #20]
 8009fc4:	782b      	ldrb	r3, [r5, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d100      	bne.n	8009fcc <_svfiprintf_r+0x7c>
 8009fca:	e0a5      	b.n	800a118 <_svfiprintf_r+0x1c8>
 8009fcc:	2201      	movs	r2, #1
 8009fce:	2300      	movs	r3, #0
 8009fd0:	4252      	negs	r2, r2
 8009fd2:	6062      	str	r2, [r4, #4]
 8009fd4:	a904      	add	r1, sp, #16
 8009fd6:	3254      	adds	r2, #84	; 0x54
 8009fd8:	1852      	adds	r2, r2, r1
 8009fda:	1c6e      	adds	r6, r5, #1
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	60e3      	str	r3, [r4, #12]
 8009fe0:	60a3      	str	r3, [r4, #8]
 8009fe2:	7013      	strb	r3, [r2, #0]
 8009fe4:	65a3      	str	r3, [r4, #88]	; 0x58
 8009fe6:	2205      	movs	r2, #5
 8009fe8:	7831      	ldrb	r1, [r6, #0]
 8009fea:	4854      	ldr	r0, [pc, #336]	; (800a13c <_svfiprintf_r+0x1ec>)
 8009fec:	f7ff fa90 	bl	8009510 <memchr>
 8009ff0:	1c75      	adds	r5, r6, #1
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d11f      	bne.n	800a036 <_svfiprintf_r+0xe6>
 8009ff6:	6822      	ldr	r2, [r4, #0]
 8009ff8:	06d3      	lsls	r3, r2, #27
 8009ffa:	d504      	bpl.n	800a006 <_svfiprintf_r+0xb6>
 8009ffc:	2353      	movs	r3, #83	; 0x53
 8009ffe:	a904      	add	r1, sp, #16
 800a000:	185b      	adds	r3, r3, r1
 800a002:	2120      	movs	r1, #32
 800a004:	7019      	strb	r1, [r3, #0]
 800a006:	0713      	lsls	r3, r2, #28
 800a008:	d504      	bpl.n	800a014 <_svfiprintf_r+0xc4>
 800a00a:	2353      	movs	r3, #83	; 0x53
 800a00c:	a904      	add	r1, sp, #16
 800a00e:	185b      	adds	r3, r3, r1
 800a010:	212b      	movs	r1, #43	; 0x2b
 800a012:	7019      	strb	r1, [r3, #0]
 800a014:	7833      	ldrb	r3, [r6, #0]
 800a016:	2b2a      	cmp	r3, #42	; 0x2a
 800a018:	d016      	beq.n	800a048 <_svfiprintf_r+0xf8>
 800a01a:	0035      	movs	r5, r6
 800a01c:	2100      	movs	r1, #0
 800a01e:	200a      	movs	r0, #10
 800a020:	68e3      	ldr	r3, [r4, #12]
 800a022:	782a      	ldrb	r2, [r5, #0]
 800a024:	1c6e      	adds	r6, r5, #1
 800a026:	3a30      	subs	r2, #48	; 0x30
 800a028:	2a09      	cmp	r2, #9
 800a02a:	d94e      	bls.n	800a0ca <_svfiprintf_r+0x17a>
 800a02c:	2900      	cmp	r1, #0
 800a02e:	d111      	bne.n	800a054 <_svfiprintf_r+0x104>
 800a030:	e017      	b.n	800a062 <_svfiprintf_r+0x112>
 800a032:	3501      	adds	r5, #1
 800a034:	e7b0      	b.n	8009f98 <_svfiprintf_r+0x48>
 800a036:	4b41      	ldr	r3, [pc, #260]	; (800a13c <_svfiprintf_r+0x1ec>)
 800a038:	6822      	ldr	r2, [r4, #0]
 800a03a:	1ac0      	subs	r0, r0, r3
 800a03c:	2301      	movs	r3, #1
 800a03e:	4083      	lsls	r3, r0
 800a040:	4313      	orrs	r3, r2
 800a042:	002e      	movs	r6, r5
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	e7ce      	b.n	8009fe6 <_svfiprintf_r+0x96>
 800a048:	9b07      	ldr	r3, [sp, #28]
 800a04a:	1d19      	adds	r1, r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	9107      	str	r1, [sp, #28]
 800a050:	2b00      	cmp	r3, #0
 800a052:	db01      	blt.n	800a058 <_svfiprintf_r+0x108>
 800a054:	930b      	str	r3, [sp, #44]	; 0x2c
 800a056:	e004      	b.n	800a062 <_svfiprintf_r+0x112>
 800a058:	425b      	negs	r3, r3
 800a05a:	60e3      	str	r3, [r4, #12]
 800a05c:	2302      	movs	r3, #2
 800a05e:	4313      	orrs	r3, r2
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	782b      	ldrb	r3, [r5, #0]
 800a064:	2b2e      	cmp	r3, #46	; 0x2e
 800a066:	d10a      	bne.n	800a07e <_svfiprintf_r+0x12e>
 800a068:	786b      	ldrb	r3, [r5, #1]
 800a06a:	2b2a      	cmp	r3, #42	; 0x2a
 800a06c:	d135      	bne.n	800a0da <_svfiprintf_r+0x18a>
 800a06e:	9b07      	ldr	r3, [sp, #28]
 800a070:	3502      	adds	r5, #2
 800a072:	1d1a      	adds	r2, r3, #4
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	9207      	str	r2, [sp, #28]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	db2b      	blt.n	800a0d4 <_svfiprintf_r+0x184>
 800a07c:	9309      	str	r3, [sp, #36]	; 0x24
 800a07e:	4e30      	ldr	r6, [pc, #192]	; (800a140 <_svfiprintf_r+0x1f0>)
 800a080:	2203      	movs	r2, #3
 800a082:	0030      	movs	r0, r6
 800a084:	7829      	ldrb	r1, [r5, #0]
 800a086:	f7ff fa43 	bl	8009510 <memchr>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d006      	beq.n	800a09c <_svfiprintf_r+0x14c>
 800a08e:	2340      	movs	r3, #64	; 0x40
 800a090:	1b80      	subs	r0, r0, r6
 800a092:	4083      	lsls	r3, r0
 800a094:	6822      	ldr	r2, [r4, #0]
 800a096:	3501      	adds	r5, #1
 800a098:	4313      	orrs	r3, r2
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	7829      	ldrb	r1, [r5, #0]
 800a09e:	2206      	movs	r2, #6
 800a0a0:	4828      	ldr	r0, [pc, #160]	; (800a144 <_svfiprintf_r+0x1f4>)
 800a0a2:	1c6e      	adds	r6, r5, #1
 800a0a4:	7621      	strb	r1, [r4, #24]
 800a0a6:	f7ff fa33 	bl	8009510 <memchr>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d03c      	beq.n	800a128 <_svfiprintf_r+0x1d8>
 800a0ae:	4b26      	ldr	r3, [pc, #152]	; (800a148 <_svfiprintf_r+0x1f8>)
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d125      	bne.n	800a100 <_svfiprintf_r+0x1b0>
 800a0b4:	2207      	movs	r2, #7
 800a0b6:	9b07      	ldr	r3, [sp, #28]
 800a0b8:	3307      	adds	r3, #7
 800a0ba:	4393      	bics	r3, r2
 800a0bc:	3308      	adds	r3, #8
 800a0be:	9307      	str	r3, [sp, #28]
 800a0c0:	6963      	ldr	r3, [r4, #20]
 800a0c2:	9a04      	ldr	r2, [sp, #16]
 800a0c4:	189b      	adds	r3, r3, r2
 800a0c6:	6163      	str	r3, [r4, #20]
 800a0c8:	e765      	b.n	8009f96 <_svfiprintf_r+0x46>
 800a0ca:	4343      	muls	r3, r0
 800a0cc:	0035      	movs	r5, r6
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	189b      	adds	r3, r3, r2
 800a0d2:	e7a6      	b.n	800a022 <_svfiprintf_r+0xd2>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	425b      	negs	r3, r3
 800a0d8:	e7d0      	b.n	800a07c <_svfiprintf_r+0x12c>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	200a      	movs	r0, #10
 800a0de:	001a      	movs	r2, r3
 800a0e0:	3501      	adds	r5, #1
 800a0e2:	6063      	str	r3, [r4, #4]
 800a0e4:	7829      	ldrb	r1, [r5, #0]
 800a0e6:	1c6e      	adds	r6, r5, #1
 800a0e8:	3930      	subs	r1, #48	; 0x30
 800a0ea:	2909      	cmp	r1, #9
 800a0ec:	d903      	bls.n	800a0f6 <_svfiprintf_r+0x1a6>
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d0c5      	beq.n	800a07e <_svfiprintf_r+0x12e>
 800a0f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a0f4:	e7c3      	b.n	800a07e <_svfiprintf_r+0x12e>
 800a0f6:	4342      	muls	r2, r0
 800a0f8:	0035      	movs	r5, r6
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	1852      	adds	r2, r2, r1
 800a0fe:	e7f1      	b.n	800a0e4 <_svfiprintf_r+0x194>
 800a100:	ab07      	add	r3, sp, #28
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	003a      	movs	r2, r7
 800a106:	0021      	movs	r1, r4
 800a108:	4b10      	ldr	r3, [pc, #64]	; (800a14c <_svfiprintf_r+0x1fc>)
 800a10a:	9803      	ldr	r0, [sp, #12]
 800a10c:	f7fd ff34 	bl	8007f78 <_printf_float>
 800a110:	9004      	str	r0, [sp, #16]
 800a112:	9b04      	ldr	r3, [sp, #16]
 800a114:	3301      	adds	r3, #1
 800a116:	d1d3      	bne.n	800a0c0 <_svfiprintf_r+0x170>
 800a118:	89bb      	ldrh	r3, [r7, #12]
 800a11a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a11c:	065b      	lsls	r3, r3, #25
 800a11e:	d400      	bmi.n	800a122 <_svfiprintf_r+0x1d2>
 800a120:	e72d      	b.n	8009f7e <_svfiprintf_r+0x2e>
 800a122:	2001      	movs	r0, #1
 800a124:	4240      	negs	r0, r0
 800a126:	e72a      	b.n	8009f7e <_svfiprintf_r+0x2e>
 800a128:	ab07      	add	r3, sp, #28
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	003a      	movs	r2, r7
 800a12e:	0021      	movs	r1, r4
 800a130:	4b06      	ldr	r3, [pc, #24]	; (800a14c <_svfiprintf_r+0x1fc>)
 800a132:	9803      	ldr	r0, [sp, #12]
 800a134:	f7fe f9d2 	bl	80084dc <_printf_i>
 800a138:	e7ea      	b.n	800a110 <_svfiprintf_r+0x1c0>
 800a13a:	46c0      	nop			; (mov r8, r8)
 800a13c:	0800b0c4 	.word	0x0800b0c4
 800a140:	0800b0ca 	.word	0x0800b0ca
 800a144:	0800b0ce 	.word	0x0800b0ce
 800a148:	08007f79 	.word	0x08007f79
 800a14c:	08009e8d 	.word	0x08009e8d

0800a150 <_sbrk_r>:
 800a150:	2300      	movs	r3, #0
 800a152:	b570      	push	{r4, r5, r6, lr}
 800a154:	4d06      	ldr	r5, [pc, #24]	; (800a170 <_sbrk_r+0x20>)
 800a156:	0004      	movs	r4, r0
 800a158:	0008      	movs	r0, r1
 800a15a:	602b      	str	r3, [r5, #0]
 800a15c:	f7fa f850 	bl	8004200 <_sbrk>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d103      	bne.n	800a16c <_sbrk_r+0x1c>
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d000      	beq.n	800a16c <_sbrk_r+0x1c>
 800a16a:	6023      	str	r3, [r4, #0]
 800a16c:	bd70      	pop	{r4, r5, r6, pc}
 800a16e:	46c0      	nop			; (mov r8, r8)
 800a170:	200003d0 	.word	0x200003d0

0800a174 <__assert_func>:
 800a174:	b530      	push	{r4, r5, lr}
 800a176:	0014      	movs	r4, r2
 800a178:	001a      	movs	r2, r3
 800a17a:	4b09      	ldr	r3, [pc, #36]	; (800a1a0 <__assert_func+0x2c>)
 800a17c:	0005      	movs	r5, r0
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	b085      	sub	sp, #20
 800a182:	68d8      	ldr	r0, [r3, #12]
 800a184:	4b07      	ldr	r3, [pc, #28]	; (800a1a4 <__assert_func+0x30>)
 800a186:	2c00      	cmp	r4, #0
 800a188:	d101      	bne.n	800a18e <__assert_func+0x1a>
 800a18a:	4b07      	ldr	r3, [pc, #28]	; (800a1a8 <__assert_func+0x34>)
 800a18c:	001c      	movs	r4, r3
 800a18e:	9301      	str	r3, [sp, #4]
 800a190:	9100      	str	r1, [sp, #0]
 800a192:	002b      	movs	r3, r5
 800a194:	4905      	ldr	r1, [pc, #20]	; (800a1ac <__assert_func+0x38>)
 800a196:	9402      	str	r4, [sp, #8]
 800a198:	f000 f80a 	bl	800a1b0 <fiprintf>
 800a19c:	f000 faba 	bl	800a714 <abort>
 800a1a0:	2000000c 	.word	0x2000000c
 800a1a4:	0800b0d5 	.word	0x0800b0d5
 800a1a8:	0800b110 	.word	0x0800b110
 800a1ac:	0800b0e2 	.word	0x0800b0e2

0800a1b0 <fiprintf>:
 800a1b0:	b40e      	push	{r1, r2, r3}
 800a1b2:	b503      	push	{r0, r1, lr}
 800a1b4:	0001      	movs	r1, r0
 800a1b6:	ab03      	add	r3, sp, #12
 800a1b8:	4804      	ldr	r0, [pc, #16]	; (800a1cc <fiprintf+0x1c>)
 800a1ba:	cb04      	ldmia	r3!, {r2}
 800a1bc:	6800      	ldr	r0, [r0, #0]
 800a1be:	9301      	str	r3, [sp, #4]
 800a1c0:	f000 f892 	bl	800a2e8 <_vfiprintf_r>
 800a1c4:	b002      	add	sp, #8
 800a1c6:	bc08      	pop	{r3}
 800a1c8:	b003      	add	sp, #12
 800a1ca:	4718      	bx	r3
 800a1cc:	2000000c 	.word	0x2000000c

0800a1d0 <__ascii_mbtowc>:
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	2900      	cmp	r1, #0
 800a1d4:	d100      	bne.n	800a1d8 <__ascii_mbtowc+0x8>
 800a1d6:	a901      	add	r1, sp, #4
 800a1d8:	1e10      	subs	r0, r2, #0
 800a1da:	d006      	beq.n	800a1ea <__ascii_mbtowc+0x1a>
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d006      	beq.n	800a1ee <__ascii_mbtowc+0x1e>
 800a1e0:	7813      	ldrb	r3, [r2, #0]
 800a1e2:	600b      	str	r3, [r1, #0]
 800a1e4:	7810      	ldrb	r0, [r2, #0]
 800a1e6:	1e43      	subs	r3, r0, #1
 800a1e8:	4198      	sbcs	r0, r3
 800a1ea:	b002      	add	sp, #8
 800a1ec:	4770      	bx	lr
 800a1ee:	2002      	movs	r0, #2
 800a1f0:	4240      	negs	r0, r0
 800a1f2:	e7fa      	b.n	800a1ea <__ascii_mbtowc+0x1a>

0800a1f4 <memmove>:
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	4288      	cmp	r0, r1
 800a1f8:	d902      	bls.n	800a200 <memmove+0xc>
 800a1fa:	188b      	adds	r3, r1, r2
 800a1fc:	4298      	cmp	r0, r3
 800a1fe:	d303      	bcc.n	800a208 <memmove+0x14>
 800a200:	2300      	movs	r3, #0
 800a202:	e007      	b.n	800a214 <memmove+0x20>
 800a204:	5c8b      	ldrb	r3, [r1, r2]
 800a206:	5483      	strb	r3, [r0, r2]
 800a208:	3a01      	subs	r2, #1
 800a20a:	d2fb      	bcs.n	800a204 <memmove+0x10>
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	5ccc      	ldrb	r4, [r1, r3]
 800a210:	54c4      	strb	r4, [r0, r3]
 800a212:	3301      	adds	r3, #1
 800a214:	429a      	cmp	r2, r3
 800a216:	d1fa      	bne.n	800a20e <memmove+0x1a>
 800a218:	e7f8      	b.n	800a20c <memmove+0x18>
	...

0800a21c <__malloc_lock>:
 800a21c:	b510      	push	{r4, lr}
 800a21e:	4802      	ldr	r0, [pc, #8]	; (800a228 <__malloc_lock+0xc>)
 800a220:	f000 fc4f 	bl	800aac2 <__retarget_lock_acquire_recursive>
 800a224:	bd10      	pop	{r4, pc}
 800a226:	46c0      	nop			; (mov r8, r8)
 800a228:	200003d4 	.word	0x200003d4

0800a22c <__malloc_unlock>:
 800a22c:	b510      	push	{r4, lr}
 800a22e:	4802      	ldr	r0, [pc, #8]	; (800a238 <__malloc_unlock+0xc>)
 800a230:	f000 fc48 	bl	800aac4 <__retarget_lock_release_recursive>
 800a234:	bd10      	pop	{r4, pc}
 800a236:	46c0      	nop			; (mov r8, r8)
 800a238:	200003d4 	.word	0x200003d4

0800a23c <_realloc_r>:
 800a23c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a23e:	0007      	movs	r7, r0
 800a240:	000e      	movs	r6, r1
 800a242:	0014      	movs	r4, r2
 800a244:	2900      	cmp	r1, #0
 800a246:	d105      	bne.n	800a254 <_realloc_r+0x18>
 800a248:	0011      	movs	r1, r2
 800a24a:	f7ff fda9 	bl	8009da0 <_malloc_r>
 800a24e:	0005      	movs	r5, r0
 800a250:	0028      	movs	r0, r5
 800a252:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a254:	2a00      	cmp	r2, #0
 800a256:	d103      	bne.n	800a260 <_realloc_r+0x24>
 800a258:	f7ff fd36 	bl	8009cc8 <_free_r>
 800a25c:	0025      	movs	r5, r4
 800a25e:	e7f7      	b.n	800a250 <_realloc_r+0x14>
 800a260:	f000 fc9e 	bl	800aba0 <_malloc_usable_size_r>
 800a264:	9001      	str	r0, [sp, #4]
 800a266:	4284      	cmp	r4, r0
 800a268:	d803      	bhi.n	800a272 <_realloc_r+0x36>
 800a26a:	0035      	movs	r5, r6
 800a26c:	0843      	lsrs	r3, r0, #1
 800a26e:	42a3      	cmp	r3, r4
 800a270:	d3ee      	bcc.n	800a250 <_realloc_r+0x14>
 800a272:	0021      	movs	r1, r4
 800a274:	0038      	movs	r0, r7
 800a276:	f7ff fd93 	bl	8009da0 <_malloc_r>
 800a27a:	1e05      	subs	r5, r0, #0
 800a27c:	d0e8      	beq.n	800a250 <_realloc_r+0x14>
 800a27e:	9b01      	ldr	r3, [sp, #4]
 800a280:	0022      	movs	r2, r4
 800a282:	429c      	cmp	r4, r3
 800a284:	d900      	bls.n	800a288 <_realloc_r+0x4c>
 800a286:	001a      	movs	r2, r3
 800a288:	0031      	movs	r1, r6
 800a28a:	0028      	movs	r0, r5
 800a28c:	f7ff f94b 	bl	8009526 <memcpy>
 800a290:	0031      	movs	r1, r6
 800a292:	0038      	movs	r0, r7
 800a294:	f7ff fd18 	bl	8009cc8 <_free_r>
 800a298:	e7da      	b.n	800a250 <_realloc_r+0x14>

0800a29a <__sfputc_r>:
 800a29a:	6893      	ldr	r3, [r2, #8]
 800a29c:	b510      	push	{r4, lr}
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	6093      	str	r3, [r2, #8]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	da04      	bge.n	800a2b0 <__sfputc_r+0x16>
 800a2a6:	6994      	ldr	r4, [r2, #24]
 800a2a8:	42a3      	cmp	r3, r4
 800a2aa:	db07      	blt.n	800a2bc <__sfputc_r+0x22>
 800a2ac:	290a      	cmp	r1, #10
 800a2ae:	d005      	beq.n	800a2bc <__sfputc_r+0x22>
 800a2b0:	6813      	ldr	r3, [r2, #0]
 800a2b2:	1c58      	adds	r0, r3, #1
 800a2b4:	6010      	str	r0, [r2, #0]
 800a2b6:	7019      	strb	r1, [r3, #0]
 800a2b8:	0008      	movs	r0, r1
 800a2ba:	bd10      	pop	{r4, pc}
 800a2bc:	f000 f94e 	bl	800a55c <__swbuf_r>
 800a2c0:	0001      	movs	r1, r0
 800a2c2:	e7f9      	b.n	800a2b8 <__sfputc_r+0x1e>

0800a2c4 <__sfputs_r>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	0006      	movs	r6, r0
 800a2c8:	000f      	movs	r7, r1
 800a2ca:	0014      	movs	r4, r2
 800a2cc:	18d5      	adds	r5, r2, r3
 800a2ce:	42ac      	cmp	r4, r5
 800a2d0:	d101      	bne.n	800a2d6 <__sfputs_r+0x12>
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	e007      	b.n	800a2e6 <__sfputs_r+0x22>
 800a2d6:	7821      	ldrb	r1, [r4, #0]
 800a2d8:	003a      	movs	r2, r7
 800a2da:	0030      	movs	r0, r6
 800a2dc:	f7ff ffdd 	bl	800a29a <__sfputc_r>
 800a2e0:	3401      	adds	r4, #1
 800a2e2:	1c43      	adds	r3, r0, #1
 800a2e4:	d1f3      	bne.n	800a2ce <__sfputs_r+0xa>
 800a2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2e8 <_vfiprintf_r>:
 800a2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ea:	b0a1      	sub	sp, #132	; 0x84
 800a2ec:	0006      	movs	r6, r0
 800a2ee:	000c      	movs	r4, r1
 800a2f0:	001f      	movs	r7, r3
 800a2f2:	9203      	str	r2, [sp, #12]
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d004      	beq.n	800a302 <_vfiprintf_r+0x1a>
 800a2f8:	6983      	ldr	r3, [r0, #24]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <_vfiprintf_r+0x1a>
 800a2fe:	f000 fb3f 	bl	800a980 <__sinit>
 800a302:	4b8e      	ldr	r3, [pc, #568]	; (800a53c <_vfiprintf_r+0x254>)
 800a304:	429c      	cmp	r4, r3
 800a306:	d11c      	bne.n	800a342 <_vfiprintf_r+0x5a>
 800a308:	6874      	ldr	r4, [r6, #4]
 800a30a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a30c:	07db      	lsls	r3, r3, #31
 800a30e:	d405      	bmi.n	800a31c <_vfiprintf_r+0x34>
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	059b      	lsls	r3, r3, #22
 800a314:	d402      	bmi.n	800a31c <_vfiprintf_r+0x34>
 800a316:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a318:	f000 fbd3 	bl	800aac2 <__retarget_lock_acquire_recursive>
 800a31c:	89a3      	ldrh	r3, [r4, #12]
 800a31e:	071b      	lsls	r3, r3, #28
 800a320:	d502      	bpl.n	800a328 <_vfiprintf_r+0x40>
 800a322:	6923      	ldr	r3, [r4, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d11d      	bne.n	800a364 <_vfiprintf_r+0x7c>
 800a328:	0021      	movs	r1, r4
 800a32a:	0030      	movs	r0, r6
 800a32c:	f000 f97a 	bl	800a624 <__swsetup_r>
 800a330:	2800      	cmp	r0, #0
 800a332:	d017      	beq.n	800a364 <_vfiprintf_r+0x7c>
 800a334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a336:	07db      	lsls	r3, r3, #31
 800a338:	d50d      	bpl.n	800a356 <_vfiprintf_r+0x6e>
 800a33a:	2001      	movs	r0, #1
 800a33c:	4240      	negs	r0, r0
 800a33e:	b021      	add	sp, #132	; 0x84
 800a340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a342:	4b7f      	ldr	r3, [pc, #508]	; (800a540 <_vfiprintf_r+0x258>)
 800a344:	429c      	cmp	r4, r3
 800a346:	d101      	bne.n	800a34c <_vfiprintf_r+0x64>
 800a348:	68b4      	ldr	r4, [r6, #8]
 800a34a:	e7de      	b.n	800a30a <_vfiprintf_r+0x22>
 800a34c:	4b7d      	ldr	r3, [pc, #500]	; (800a544 <_vfiprintf_r+0x25c>)
 800a34e:	429c      	cmp	r4, r3
 800a350:	d1db      	bne.n	800a30a <_vfiprintf_r+0x22>
 800a352:	68f4      	ldr	r4, [r6, #12]
 800a354:	e7d9      	b.n	800a30a <_vfiprintf_r+0x22>
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	059b      	lsls	r3, r3, #22
 800a35a:	d4ee      	bmi.n	800a33a <_vfiprintf_r+0x52>
 800a35c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a35e:	f000 fbb1 	bl	800aac4 <__retarget_lock_release_recursive>
 800a362:	e7ea      	b.n	800a33a <_vfiprintf_r+0x52>
 800a364:	2300      	movs	r3, #0
 800a366:	ad08      	add	r5, sp, #32
 800a368:	616b      	str	r3, [r5, #20]
 800a36a:	3320      	adds	r3, #32
 800a36c:	766b      	strb	r3, [r5, #25]
 800a36e:	3310      	adds	r3, #16
 800a370:	76ab      	strb	r3, [r5, #26]
 800a372:	9707      	str	r7, [sp, #28]
 800a374:	9f03      	ldr	r7, [sp, #12]
 800a376:	783b      	ldrb	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <_vfiprintf_r+0x98>
 800a37c:	2b25      	cmp	r3, #37	; 0x25
 800a37e:	d14e      	bne.n	800a41e <_vfiprintf_r+0x136>
 800a380:	9b03      	ldr	r3, [sp, #12]
 800a382:	1afb      	subs	r3, r7, r3
 800a384:	9305      	str	r3, [sp, #20]
 800a386:	9b03      	ldr	r3, [sp, #12]
 800a388:	429f      	cmp	r7, r3
 800a38a:	d00d      	beq.n	800a3a8 <_vfiprintf_r+0xc0>
 800a38c:	9b05      	ldr	r3, [sp, #20]
 800a38e:	0021      	movs	r1, r4
 800a390:	0030      	movs	r0, r6
 800a392:	9a03      	ldr	r2, [sp, #12]
 800a394:	f7ff ff96 	bl	800a2c4 <__sfputs_r>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d100      	bne.n	800a39e <_vfiprintf_r+0xb6>
 800a39c:	e0b5      	b.n	800a50a <_vfiprintf_r+0x222>
 800a39e:	696a      	ldr	r2, [r5, #20]
 800a3a0:	9b05      	ldr	r3, [sp, #20]
 800a3a2:	4694      	mov	ip, r2
 800a3a4:	4463      	add	r3, ip
 800a3a6:	616b      	str	r3, [r5, #20]
 800a3a8:	783b      	ldrb	r3, [r7, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d100      	bne.n	800a3b0 <_vfiprintf_r+0xc8>
 800a3ae:	e0ac      	b.n	800a50a <_vfiprintf_r+0x222>
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	1c7b      	adds	r3, r7, #1
 800a3b4:	9303      	str	r3, [sp, #12]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	4252      	negs	r2, r2
 800a3ba:	606a      	str	r2, [r5, #4]
 800a3bc:	a904      	add	r1, sp, #16
 800a3be:	3254      	adds	r2, #84	; 0x54
 800a3c0:	1852      	adds	r2, r2, r1
 800a3c2:	602b      	str	r3, [r5, #0]
 800a3c4:	60eb      	str	r3, [r5, #12]
 800a3c6:	60ab      	str	r3, [r5, #8]
 800a3c8:	7013      	strb	r3, [r2, #0]
 800a3ca:	65ab      	str	r3, [r5, #88]	; 0x58
 800a3cc:	9b03      	ldr	r3, [sp, #12]
 800a3ce:	2205      	movs	r2, #5
 800a3d0:	7819      	ldrb	r1, [r3, #0]
 800a3d2:	485d      	ldr	r0, [pc, #372]	; (800a548 <_vfiprintf_r+0x260>)
 800a3d4:	f7ff f89c 	bl	8009510 <memchr>
 800a3d8:	9b03      	ldr	r3, [sp, #12]
 800a3da:	1c5f      	adds	r7, r3, #1
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d120      	bne.n	800a422 <_vfiprintf_r+0x13a>
 800a3e0:	682a      	ldr	r2, [r5, #0]
 800a3e2:	06d3      	lsls	r3, r2, #27
 800a3e4:	d504      	bpl.n	800a3f0 <_vfiprintf_r+0x108>
 800a3e6:	2353      	movs	r3, #83	; 0x53
 800a3e8:	a904      	add	r1, sp, #16
 800a3ea:	185b      	adds	r3, r3, r1
 800a3ec:	2120      	movs	r1, #32
 800a3ee:	7019      	strb	r1, [r3, #0]
 800a3f0:	0713      	lsls	r3, r2, #28
 800a3f2:	d504      	bpl.n	800a3fe <_vfiprintf_r+0x116>
 800a3f4:	2353      	movs	r3, #83	; 0x53
 800a3f6:	a904      	add	r1, sp, #16
 800a3f8:	185b      	adds	r3, r3, r1
 800a3fa:	212b      	movs	r1, #43	; 0x2b
 800a3fc:	7019      	strb	r1, [r3, #0]
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	2b2a      	cmp	r3, #42	; 0x2a
 800a404:	d016      	beq.n	800a434 <_vfiprintf_r+0x14c>
 800a406:	2100      	movs	r1, #0
 800a408:	68eb      	ldr	r3, [r5, #12]
 800a40a:	9f03      	ldr	r7, [sp, #12]
 800a40c:	783a      	ldrb	r2, [r7, #0]
 800a40e:	1c78      	adds	r0, r7, #1
 800a410:	3a30      	subs	r2, #48	; 0x30
 800a412:	4684      	mov	ip, r0
 800a414:	2a09      	cmp	r2, #9
 800a416:	d94f      	bls.n	800a4b8 <_vfiprintf_r+0x1d0>
 800a418:	2900      	cmp	r1, #0
 800a41a:	d111      	bne.n	800a440 <_vfiprintf_r+0x158>
 800a41c:	e017      	b.n	800a44e <_vfiprintf_r+0x166>
 800a41e:	3701      	adds	r7, #1
 800a420:	e7a9      	b.n	800a376 <_vfiprintf_r+0x8e>
 800a422:	4b49      	ldr	r3, [pc, #292]	; (800a548 <_vfiprintf_r+0x260>)
 800a424:	682a      	ldr	r2, [r5, #0]
 800a426:	1ac0      	subs	r0, r0, r3
 800a428:	2301      	movs	r3, #1
 800a42a:	4083      	lsls	r3, r0
 800a42c:	4313      	orrs	r3, r2
 800a42e:	602b      	str	r3, [r5, #0]
 800a430:	9703      	str	r7, [sp, #12]
 800a432:	e7cb      	b.n	800a3cc <_vfiprintf_r+0xe4>
 800a434:	9b07      	ldr	r3, [sp, #28]
 800a436:	1d19      	adds	r1, r3, #4
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	9107      	str	r1, [sp, #28]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	db01      	blt.n	800a444 <_vfiprintf_r+0x15c>
 800a440:	930b      	str	r3, [sp, #44]	; 0x2c
 800a442:	e004      	b.n	800a44e <_vfiprintf_r+0x166>
 800a444:	425b      	negs	r3, r3
 800a446:	60eb      	str	r3, [r5, #12]
 800a448:	2302      	movs	r3, #2
 800a44a:	4313      	orrs	r3, r2
 800a44c:	602b      	str	r3, [r5, #0]
 800a44e:	783b      	ldrb	r3, [r7, #0]
 800a450:	2b2e      	cmp	r3, #46	; 0x2e
 800a452:	d10a      	bne.n	800a46a <_vfiprintf_r+0x182>
 800a454:	787b      	ldrb	r3, [r7, #1]
 800a456:	2b2a      	cmp	r3, #42	; 0x2a
 800a458:	d137      	bne.n	800a4ca <_vfiprintf_r+0x1e2>
 800a45a:	9b07      	ldr	r3, [sp, #28]
 800a45c:	3702      	adds	r7, #2
 800a45e:	1d1a      	adds	r2, r3, #4
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	9207      	str	r2, [sp, #28]
 800a464:	2b00      	cmp	r3, #0
 800a466:	db2d      	blt.n	800a4c4 <_vfiprintf_r+0x1dc>
 800a468:	9309      	str	r3, [sp, #36]	; 0x24
 800a46a:	2203      	movs	r2, #3
 800a46c:	7839      	ldrb	r1, [r7, #0]
 800a46e:	4837      	ldr	r0, [pc, #220]	; (800a54c <_vfiprintf_r+0x264>)
 800a470:	f7ff f84e 	bl	8009510 <memchr>
 800a474:	2800      	cmp	r0, #0
 800a476:	d007      	beq.n	800a488 <_vfiprintf_r+0x1a0>
 800a478:	4b34      	ldr	r3, [pc, #208]	; (800a54c <_vfiprintf_r+0x264>)
 800a47a:	682a      	ldr	r2, [r5, #0]
 800a47c:	1ac0      	subs	r0, r0, r3
 800a47e:	2340      	movs	r3, #64	; 0x40
 800a480:	4083      	lsls	r3, r0
 800a482:	4313      	orrs	r3, r2
 800a484:	3701      	adds	r7, #1
 800a486:	602b      	str	r3, [r5, #0]
 800a488:	7839      	ldrb	r1, [r7, #0]
 800a48a:	1c7b      	adds	r3, r7, #1
 800a48c:	2206      	movs	r2, #6
 800a48e:	4830      	ldr	r0, [pc, #192]	; (800a550 <_vfiprintf_r+0x268>)
 800a490:	9303      	str	r3, [sp, #12]
 800a492:	7629      	strb	r1, [r5, #24]
 800a494:	f7ff f83c 	bl	8009510 <memchr>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d045      	beq.n	800a528 <_vfiprintf_r+0x240>
 800a49c:	4b2d      	ldr	r3, [pc, #180]	; (800a554 <_vfiprintf_r+0x26c>)
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d127      	bne.n	800a4f2 <_vfiprintf_r+0x20a>
 800a4a2:	2207      	movs	r2, #7
 800a4a4:	9b07      	ldr	r3, [sp, #28]
 800a4a6:	3307      	adds	r3, #7
 800a4a8:	4393      	bics	r3, r2
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	9307      	str	r3, [sp, #28]
 800a4ae:	696b      	ldr	r3, [r5, #20]
 800a4b0:	9a04      	ldr	r2, [sp, #16]
 800a4b2:	189b      	adds	r3, r3, r2
 800a4b4:	616b      	str	r3, [r5, #20]
 800a4b6:	e75d      	b.n	800a374 <_vfiprintf_r+0x8c>
 800a4b8:	210a      	movs	r1, #10
 800a4ba:	434b      	muls	r3, r1
 800a4bc:	4667      	mov	r7, ip
 800a4be:	189b      	adds	r3, r3, r2
 800a4c0:	3909      	subs	r1, #9
 800a4c2:	e7a3      	b.n	800a40c <_vfiprintf_r+0x124>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	425b      	negs	r3, r3
 800a4c8:	e7ce      	b.n	800a468 <_vfiprintf_r+0x180>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	001a      	movs	r2, r3
 800a4ce:	3701      	adds	r7, #1
 800a4d0:	606b      	str	r3, [r5, #4]
 800a4d2:	7839      	ldrb	r1, [r7, #0]
 800a4d4:	1c78      	adds	r0, r7, #1
 800a4d6:	3930      	subs	r1, #48	; 0x30
 800a4d8:	4684      	mov	ip, r0
 800a4da:	2909      	cmp	r1, #9
 800a4dc:	d903      	bls.n	800a4e6 <_vfiprintf_r+0x1fe>
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0c3      	beq.n	800a46a <_vfiprintf_r+0x182>
 800a4e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a4e4:	e7c1      	b.n	800a46a <_vfiprintf_r+0x182>
 800a4e6:	230a      	movs	r3, #10
 800a4e8:	435a      	muls	r2, r3
 800a4ea:	4667      	mov	r7, ip
 800a4ec:	1852      	adds	r2, r2, r1
 800a4ee:	3b09      	subs	r3, #9
 800a4f0:	e7ef      	b.n	800a4d2 <_vfiprintf_r+0x1ea>
 800a4f2:	ab07      	add	r3, sp, #28
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	0022      	movs	r2, r4
 800a4f8:	0029      	movs	r1, r5
 800a4fa:	0030      	movs	r0, r6
 800a4fc:	4b16      	ldr	r3, [pc, #88]	; (800a558 <_vfiprintf_r+0x270>)
 800a4fe:	f7fd fd3b 	bl	8007f78 <_printf_float>
 800a502:	9004      	str	r0, [sp, #16]
 800a504:	9b04      	ldr	r3, [sp, #16]
 800a506:	3301      	adds	r3, #1
 800a508:	d1d1      	bne.n	800a4ae <_vfiprintf_r+0x1c6>
 800a50a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a50c:	07db      	lsls	r3, r3, #31
 800a50e:	d405      	bmi.n	800a51c <_vfiprintf_r+0x234>
 800a510:	89a3      	ldrh	r3, [r4, #12]
 800a512:	059b      	lsls	r3, r3, #22
 800a514:	d402      	bmi.n	800a51c <_vfiprintf_r+0x234>
 800a516:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a518:	f000 fad4 	bl	800aac4 <__retarget_lock_release_recursive>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	065b      	lsls	r3, r3, #25
 800a520:	d500      	bpl.n	800a524 <_vfiprintf_r+0x23c>
 800a522:	e70a      	b.n	800a33a <_vfiprintf_r+0x52>
 800a524:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a526:	e70a      	b.n	800a33e <_vfiprintf_r+0x56>
 800a528:	ab07      	add	r3, sp, #28
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	0022      	movs	r2, r4
 800a52e:	0029      	movs	r1, r5
 800a530:	0030      	movs	r0, r6
 800a532:	4b09      	ldr	r3, [pc, #36]	; (800a558 <_vfiprintf_r+0x270>)
 800a534:	f7fd ffd2 	bl	80084dc <_printf_i>
 800a538:	e7e3      	b.n	800a502 <_vfiprintf_r+0x21a>
 800a53a:	46c0      	nop			; (mov r8, r8)
 800a53c:	0800b23c 	.word	0x0800b23c
 800a540:	0800b25c 	.word	0x0800b25c
 800a544:	0800b21c 	.word	0x0800b21c
 800a548:	0800b0c4 	.word	0x0800b0c4
 800a54c:	0800b0ca 	.word	0x0800b0ca
 800a550:	0800b0ce 	.word	0x0800b0ce
 800a554:	08007f79 	.word	0x08007f79
 800a558:	0800a2c5 	.word	0x0800a2c5

0800a55c <__swbuf_r>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	0005      	movs	r5, r0
 800a560:	000e      	movs	r6, r1
 800a562:	0014      	movs	r4, r2
 800a564:	2800      	cmp	r0, #0
 800a566:	d004      	beq.n	800a572 <__swbuf_r+0x16>
 800a568:	6983      	ldr	r3, [r0, #24]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <__swbuf_r+0x16>
 800a56e:	f000 fa07 	bl	800a980 <__sinit>
 800a572:	4b22      	ldr	r3, [pc, #136]	; (800a5fc <__swbuf_r+0xa0>)
 800a574:	429c      	cmp	r4, r3
 800a576:	d12e      	bne.n	800a5d6 <__swbuf_r+0x7a>
 800a578:	686c      	ldr	r4, [r5, #4]
 800a57a:	69a3      	ldr	r3, [r4, #24]
 800a57c:	60a3      	str	r3, [r4, #8]
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	071b      	lsls	r3, r3, #28
 800a582:	d532      	bpl.n	800a5ea <__swbuf_r+0x8e>
 800a584:	6923      	ldr	r3, [r4, #16]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d02f      	beq.n	800a5ea <__swbuf_r+0x8e>
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	6922      	ldr	r2, [r4, #16]
 800a58e:	b2f7      	uxtb	r7, r6
 800a590:	1a98      	subs	r0, r3, r2
 800a592:	6963      	ldr	r3, [r4, #20]
 800a594:	b2f6      	uxtb	r6, r6
 800a596:	4283      	cmp	r3, r0
 800a598:	dc05      	bgt.n	800a5a6 <__swbuf_r+0x4a>
 800a59a:	0021      	movs	r1, r4
 800a59c:	0028      	movs	r0, r5
 800a59e:	f000 f94d 	bl	800a83c <_fflush_r>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d127      	bne.n	800a5f6 <__swbuf_r+0x9a>
 800a5a6:	68a3      	ldr	r3, [r4, #8]
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	60a3      	str	r3, [r4, #8]
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	1c5a      	adds	r2, r3, #1
 800a5b2:	6022      	str	r2, [r4, #0]
 800a5b4:	701f      	strb	r7, [r3, #0]
 800a5b6:	6963      	ldr	r3, [r4, #20]
 800a5b8:	4283      	cmp	r3, r0
 800a5ba:	d004      	beq.n	800a5c6 <__swbuf_r+0x6a>
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	07db      	lsls	r3, r3, #31
 800a5c0:	d507      	bpl.n	800a5d2 <__swbuf_r+0x76>
 800a5c2:	2e0a      	cmp	r6, #10
 800a5c4:	d105      	bne.n	800a5d2 <__swbuf_r+0x76>
 800a5c6:	0021      	movs	r1, r4
 800a5c8:	0028      	movs	r0, r5
 800a5ca:	f000 f937 	bl	800a83c <_fflush_r>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d111      	bne.n	800a5f6 <__swbuf_r+0x9a>
 800a5d2:	0030      	movs	r0, r6
 800a5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5d6:	4b0a      	ldr	r3, [pc, #40]	; (800a600 <__swbuf_r+0xa4>)
 800a5d8:	429c      	cmp	r4, r3
 800a5da:	d101      	bne.n	800a5e0 <__swbuf_r+0x84>
 800a5dc:	68ac      	ldr	r4, [r5, #8]
 800a5de:	e7cc      	b.n	800a57a <__swbuf_r+0x1e>
 800a5e0:	4b08      	ldr	r3, [pc, #32]	; (800a604 <__swbuf_r+0xa8>)
 800a5e2:	429c      	cmp	r4, r3
 800a5e4:	d1c9      	bne.n	800a57a <__swbuf_r+0x1e>
 800a5e6:	68ec      	ldr	r4, [r5, #12]
 800a5e8:	e7c7      	b.n	800a57a <__swbuf_r+0x1e>
 800a5ea:	0021      	movs	r1, r4
 800a5ec:	0028      	movs	r0, r5
 800a5ee:	f000 f819 	bl	800a624 <__swsetup_r>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d0c9      	beq.n	800a58a <__swbuf_r+0x2e>
 800a5f6:	2601      	movs	r6, #1
 800a5f8:	4276      	negs	r6, r6
 800a5fa:	e7ea      	b.n	800a5d2 <__swbuf_r+0x76>
 800a5fc:	0800b23c 	.word	0x0800b23c
 800a600:	0800b25c 	.word	0x0800b25c
 800a604:	0800b21c 	.word	0x0800b21c

0800a608 <__ascii_wctomb>:
 800a608:	0003      	movs	r3, r0
 800a60a:	1e08      	subs	r0, r1, #0
 800a60c:	d005      	beq.n	800a61a <__ascii_wctomb+0x12>
 800a60e:	2aff      	cmp	r2, #255	; 0xff
 800a610:	d904      	bls.n	800a61c <__ascii_wctomb+0x14>
 800a612:	228a      	movs	r2, #138	; 0x8a
 800a614:	2001      	movs	r0, #1
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	4240      	negs	r0, r0
 800a61a:	4770      	bx	lr
 800a61c:	2001      	movs	r0, #1
 800a61e:	700a      	strb	r2, [r1, #0]
 800a620:	e7fb      	b.n	800a61a <__ascii_wctomb+0x12>
	...

0800a624 <__swsetup_r>:
 800a624:	4b37      	ldr	r3, [pc, #220]	; (800a704 <__swsetup_r+0xe0>)
 800a626:	b570      	push	{r4, r5, r6, lr}
 800a628:	681d      	ldr	r5, [r3, #0]
 800a62a:	0006      	movs	r6, r0
 800a62c:	000c      	movs	r4, r1
 800a62e:	2d00      	cmp	r5, #0
 800a630:	d005      	beq.n	800a63e <__swsetup_r+0x1a>
 800a632:	69ab      	ldr	r3, [r5, #24]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d102      	bne.n	800a63e <__swsetup_r+0x1a>
 800a638:	0028      	movs	r0, r5
 800a63a:	f000 f9a1 	bl	800a980 <__sinit>
 800a63e:	4b32      	ldr	r3, [pc, #200]	; (800a708 <__swsetup_r+0xe4>)
 800a640:	429c      	cmp	r4, r3
 800a642:	d10f      	bne.n	800a664 <__swsetup_r+0x40>
 800a644:	686c      	ldr	r4, [r5, #4]
 800a646:	230c      	movs	r3, #12
 800a648:	5ee2      	ldrsh	r2, [r4, r3]
 800a64a:	b293      	uxth	r3, r2
 800a64c:	0711      	lsls	r1, r2, #28
 800a64e:	d42d      	bmi.n	800a6ac <__swsetup_r+0x88>
 800a650:	06d9      	lsls	r1, r3, #27
 800a652:	d411      	bmi.n	800a678 <__swsetup_r+0x54>
 800a654:	2309      	movs	r3, #9
 800a656:	2001      	movs	r0, #1
 800a658:	6033      	str	r3, [r6, #0]
 800a65a:	3337      	adds	r3, #55	; 0x37
 800a65c:	4313      	orrs	r3, r2
 800a65e:	81a3      	strh	r3, [r4, #12]
 800a660:	4240      	negs	r0, r0
 800a662:	bd70      	pop	{r4, r5, r6, pc}
 800a664:	4b29      	ldr	r3, [pc, #164]	; (800a70c <__swsetup_r+0xe8>)
 800a666:	429c      	cmp	r4, r3
 800a668:	d101      	bne.n	800a66e <__swsetup_r+0x4a>
 800a66a:	68ac      	ldr	r4, [r5, #8]
 800a66c:	e7eb      	b.n	800a646 <__swsetup_r+0x22>
 800a66e:	4b28      	ldr	r3, [pc, #160]	; (800a710 <__swsetup_r+0xec>)
 800a670:	429c      	cmp	r4, r3
 800a672:	d1e8      	bne.n	800a646 <__swsetup_r+0x22>
 800a674:	68ec      	ldr	r4, [r5, #12]
 800a676:	e7e6      	b.n	800a646 <__swsetup_r+0x22>
 800a678:	075b      	lsls	r3, r3, #29
 800a67a:	d513      	bpl.n	800a6a4 <__swsetup_r+0x80>
 800a67c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a67e:	2900      	cmp	r1, #0
 800a680:	d008      	beq.n	800a694 <__swsetup_r+0x70>
 800a682:	0023      	movs	r3, r4
 800a684:	3344      	adds	r3, #68	; 0x44
 800a686:	4299      	cmp	r1, r3
 800a688:	d002      	beq.n	800a690 <__swsetup_r+0x6c>
 800a68a:	0030      	movs	r0, r6
 800a68c:	f7ff fb1c 	bl	8009cc8 <_free_r>
 800a690:	2300      	movs	r3, #0
 800a692:	6363      	str	r3, [r4, #52]	; 0x34
 800a694:	2224      	movs	r2, #36	; 0x24
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	4393      	bics	r3, r2
 800a69a:	81a3      	strh	r3, [r4, #12]
 800a69c:	2300      	movs	r3, #0
 800a69e:	6063      	str	r3, [r4, #4]
 800a6a0:	6923      	ldr	r3, [r4, #16]
 800a6a2:	6023      	str	r3, [r4, #0]
 800a6a4:	2308      	movs	r3, #8
 800a6a6:	89a2      	ldrh	r2, [r4, #12]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	81a3      	strh	r3, [r4, #12]
 800a6ac:	6923      	ldr	r3, [r4, #16]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10b      	bne.n	800a6ca <__swsetup_r+0xa6>
 800a6b2:	21a0      	movs	r1, #160	; 0xa0
 800a6b4:	2280      	movs	r2, #128	; 0x80
 800a6b6:	89a3      	ldrh	r3, [r4, #12]
 800a6b8:	0089      	lsls	r1, r1, #2
 800a6ba:	0092      	lsls	r2, r2, #2
 800a6bc:	400b      	ands	r3, r1
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d003      	beq.n	800a6ca <__swsetup_r+0xa6>
 800a6c2:	0021      	movs	r1, r4
 800a6c4:	0030      	movs	r0, r6
 800a6c6:	f000 fa27 	bl	800ab18 <__smakebuf_r>
 800a6ca:	220c      	movs	r2, #12
 800a6cc:	5ea3      	ldrsh	r3, [r4, r2]
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	001a      	movs	r2, r3
 800a6d2:	b299      	uxth	r1, r3
 800a6d4:	4002      	ands	r2, r0
 800a6d6:	4203      	tst	r3, r0
 800a6d8:	d00f      	beq.n	800a6fa <__swsetup_r+0xd6>
 800a6da:	2200      	movs	r2, #0
 800a6dc:	60a2      	str	r2, [r4, #8]
 800a6de:	6962      	ldr	r2, [r4, #20]
 800a6e0:	4252      	negs	r2, r2
 800a6e2:	61a2      	str	r2, [r4, #24]
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	6922      	ldr	r2, [r4, #16]
 800a6e8:	4282      	cmp	r2, r0
 800a6ea:	d1ba      	bne.n	800a662 <__swsetup_r+0x3e>
 800a6ec:	060a      	lsls	r2, r1, #24
 800a6ee:	d5b8      	bpl.n	800a662 <__swsetup_r+0x3e>
 800a6f0:	2240      	movs	r2, #64	; 0x40
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	81a3      	strh	r3, [r4, #12]
 800a6f6:	3801      	subs	r0, #1
 800a6f8:	e7b3      	b.n	800a662 <__swsetup_r+0x3e>
 800a6fa:	0788      	lsls	r0, r1, #30
 800a6fc:	d400      	bmi.n	800a700 <__swsetup_r+0xdc>
 800a6fe:	6962      	ldr	r2, [r4, #20]
 800a700:	60a2      	str	r2, [r4, #8]
 800a702:	e7ef      	b.n	800a6e4 <__swsetup_r+0xc0>
 800a704:	2000000c 	.word	0x2000000c
 800a708:	0800b23c 	.word	0x0800b23c
 800a70c:	0800b25c 	.word	0x0800b25c
 800a710:	0800b21c 	.word	0x0800b21c

0800a714 <abort>:
 800a714:	2006      	movs	r0, #6
 800a716:	b510      	push	{r4, lr}
 800a718:	f000 fa74 	bl	800ac04 <raise>
 800a71c:	2001      	movs	r0, #1
 800a71e:	f7f9 fcfd 	bl	800411c <_exit>
	...

0800a724 <__sflush_r>:
 800a724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a726:	898b      	ldrh	r3, [r1, #12]
 800a728:	0005      	movs	r5, r0
 800a72a:	000c      	movs	r4, r1
 800a72c:	071a      	lsls	r2, r3, #28
 800a72e:	d45f      	bmi.n	800a7f0 <__sflush_r+0xcc>
 800a730:	684a      	ldr	r2, [r1, #4]
 800a732:	2a00      	cmp	r2, #0
 800a734:	dc04      	bgt.n	800a740 <__sflush_r+0x1c>
 800a736:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a738:	2a00      	cmp	r2, #0
 800a73a:	dc01      	bgt.n	800a740 <__sflush_r+0x1c>
 800a73c:	2000      	movs	r0, #0
 800a73e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a740:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a742:	2f00      	cmp	r7, #0
 800a744:	d0fa      	beq.n	800a73c <__sflush_r+0x18>
 800a746:	2200      	movs	r2, #0
 800a748:	2180      	movs	r1, #128	; 0x80
 800a74a:	682e      	ldr	r6, [r5, #0]
 800a74c:	602a      	str	r2, [r5, #0]
 800a74e:	001a      	movs	r2, r3
 800a750:	0149      	lsls	r1, r1, #5
 800a752:	400a      	ands	r2, r1
 800a754:	420b      	tst	r3, r1
 800a756:	d034      	beq.n	800a7c2 <__sflush_r+0x9e>
 800a758:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	075b      	lsls	r3, r3, #29
 800a75e:	d506      	bpl.n	800a76e <__sflush_r+0x4a>
 800a760:	6863      	ldr	r3, [r4, #4]
 800a762:	1ac0      	subs	r0, r0, r3
 800a764:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <__sflush_r+0x4a>
 800a76a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a76c:	1ac0      	subs	r0, r0, r3
 800a76e:	0002      	movs	r2, r0
 800a770:	6a21      	ldr	r1, [r4, #32]
 800a772:	2300      	movs	r3, #0
 800a774:	0028      	movs	r0, r5
 800a776:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a778:	47b8      	blx	r7
 800a77a:	89a1      	ldrh	r1, [r4, #12]
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d106      	bne.n	800a78e <__sflush_r+0x6a>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	2b1d      	cmp	r3, #29
 800a784:	d831      	bhi.n	800a7ea <__sflush_r+0xc6>
 800a786:	4a2c      	ldr	r2, [pc, #176]	; (800a838 <__sflush_r+0x114>)
 800a788:	40da      	lsrs	r2, r3
 800a78a:	07d3      	lsls	r3, r2, #31
 800a78c:	d52d      	bpl.n	800a7ea <__sflush_r+0xc6>
 800a78e:	2300      	movs	r3, #0
 800a790:	6063      	str	r3, [r4, #4]
 800a792:	6923      	ldr	r3, [r4, #16]
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	04cb      	lsls	r3, r1, #19
 800a798:	d505      	bpl.n	800a7a6 <__sflush_r+0x82>
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	d102      	bne.n	800a7a4 <__sflush_r+0x80>
 800a79e:	682b      	ldr	r3, [r5, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d100      	bne.n	800a7a6 <__sflush_r+0x82>
 800a7a4:	6560      	str	r0, [r4, #84]	; 0x54
 800a7a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7a8:	602e      	str	r6, [r5, #0]
 800a7aa:	2900      	cmp	r1, #0
 800a7ac:	d0c6      	beq.n	800a73c <__sflush_r+0x18>
 800a7ae:	0023      	movs	r3, r4
 800a7b0:	3344      	adds	r3, #68	; 0x44
 800a7b2:	4299      	cmp	r1, r3
 800a7b4:	d002      	beq.n	800a7bc <__sflush_r+0x98>
 800a7b6:	0028      	movs	r0, r5
 800a7b8:	f7ff fa86 	bl	8009cc8 <_free_r>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	6360      	str	r0, [r4, #52]	; 0x34
 800a7c0:	e7bd      	b.n	800a73e <__sflush_r+0x1a>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	0028      	movs	r0, r5
 800a7c6:	6a21      	ldr	r1, [r4, #32]
 800a7c8:	47b8      	blx	r7
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	d1c5      	bne.n	800a75a <__sflush_r+0x36>
 800a7ce:	682b      	ldr	r3, [r5, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d0c2      	beq.n	800a75a <__sflush_r+0x36>
 800a7d4:	2b1d      	cmp	r3, #29
 800a7d6:	d001      	beq.n	800a7dc <__sflush_r+0xb8>
 800a7d8:	2b16      	cmp	r3, #22
 800a7da:	d101      	bne.n	800a7e0 <__sflush_r+0xbc>
 800a7dc:	602e      	str	r6, [r5, #0]
 800a7de:	e7ad      	b.n	800a73c <__sflush_r+0x18>
 800a7e0:	2340      	movs	r3, #64	; 0x40
 800a7e2:	89a2      	ldrh	r2, [r4, #12]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	81a3      	strh	r3, [r4, #12]
 800a7e8:	e7a9      	b.n	800a73e <__sflush_r+0x1a>
 800a7ea:	2340      	movs	r3, #64	; 0x40
 800a7ec:	430b      	orrs	r3, r1
 800a7ee:	e7fa      	b.n	800a7e6 <__sflush_r+0xc2>
 800a7f0:	690f      	ldr	r7, [r1, #16]
 800a7f2:	2f00      	cmp	r7, #0
 800a7f4:	d0a2      	beq.n	800a73c <__sflush_r+0x18>
 800a7f6:	680a      	ldr	r2, [r1, #0]
 800a7f8:	600f      	str	r7, [r1, #0]
 800a7fa:	1bd2      	subs	r2, r2, r7
 800a7fc:	9201      	str	r2, [sp, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	079b      	lsls	r3, r3, #30
 800a802:	d100      	bne.n	800a806 <__sflush_r+0xe2>
 800a804:	694a      	ldr	r2, [r1, #20]
 800a806:	60a2      	str	r2, [r4, #8]
 800a808:	9b01      	ldr	r3, [sp, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	dc00      	bgt.n	800a810 <__sflush_r+0xec>
 800a80e:	e795      	b.n	800a73c <__sflush_r+0x18>
 800a810:	003a      	movs	r2, r7
 800a812:	0028      	movs	r0, r5
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	6a21      	ldr	r1, [r4, #32]
 800a818:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a81a:	47b0      	blx	r6
 800a81c:	2800      	cmp	r0, #0
 800a81e:	dc06      	bgt.n	800a82e <__sflush_r+0x10a>
 800a820:	2340      	movs	r3, #64	; 0x40
 800a822:	2001      	movs	r0, #1
 800a824:	89a2      	ldrh	r2, [r4, #12]
 800a826:	4240      	negs	r0, r0
 800a828:	4313      	orrs	r3, r2
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	e787      	b.n	800a73e <__sflush_r+0x1a>
 800a82e:	9b01      	ldr	r3, [sp, #4]
 800a830:	183f      	adds	r7, r7, r0
 800a832:	1a1b      	subs	r3, r3, r0
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	e7e7      	b.n	800a808 <__sflush_r+0xe4>
 800a838:	20400001 	.word	0x20400001

0800a83c <_fflush_r>:
 800a83c:	690b      	ldr	r3, [r1, #16]
 800a83e:	b570      	push	{r4, r5, r6, lr}
 800a840:	0005      	movs	r5, r0
 800a842:	000c      	movs	r4, r1
 800a844:	2b00      	cmp	r3, #0
 800a846:	d102      	bne.n	800a84e <_fflush_r+0x12>
 800a848:	2500      	movs	r5, #0
 800a84a:	0028      	movs	r0, r5
 800a84c:	bd70      	pop	{r4, r5, r6, pc}
 800a84e:	2800      	cmp	r0, #0
 800a850:	d004      	beq.n	800a85c <_fflush_r+0x20>
 800a852:	6983      	ldr	r3, [r0, #24]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d101      	bne.n	800a85c <_fflush_r+0x20>
 800a858:	f000 f892 	bl	800a980 <__sinit>
 800a85c:	4b14      	ldr	r3, [pc, #80]	; (800a8b0 <_fflush_r+0x74>)
 800a85e:	429c      	cmp	r4, r3
 800a860:	d11b      	bne.n	800a89a <_fflush_r+0x5e>
 800a862:	686c      	ldr	r4, [r5, #4]
 800a864:	220c      	movs	r2, #12
 800a866:	5ea3      	ldrsh	r3, [r4, r2]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d0ed      	beq.n	800a848 <_fflush_r+0xc>
 800a86c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a86e:	07d2      	lsls	r2, r2, #31
 800a870:	d404      	bmi.n	800a87c <_fflush_r+0x40>
 800a872:	059b      	lsls	r3, r3, #22
 800a874:	d402      	bmi.n	800a87c <_fflush_r+0x40>
 800a876:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a878:	f000 f923 	bl	800aac2 <__retarget_lock_acquire_recursive>
 800a87c:	0028      	movs	r0, r5
 800a87e:	0021      	movs	r1, r4
 800a880:	f7ff ff50 	bl	800a724 <__sflush_r>
 800a884:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a886:	0005      	movs	r5, r0
 800a888:	07db      	lsls	r3, r3, #31
 800a88a:	d4de      	bmi.n	800a84a <_fflush_r+0xe>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	059b      	lsls	r3, r3, #22
 800a890:	d4db      	bmi.n	800a84a <_fflush_r+0xe>
 800a892:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a894:	f000 f916 	bl	800aac4 <__retarget_lock_release_recursive>
 800a898:	e7d7      	b.n	800a84a <_fflush_r+0xe>
 800a89a:	4b06      	ldr	r3, [pc, #24]	; (800a8b4 <_fflush_r+0x78>)
 800a89c:	429c      	cmp	r4, r3
 800a89e:	d101      	bne.n	800a8a4 <_fflush_r+0x68>
 800a8a0:	68ac      	ldr	r4, [r5, #8]
 800a8a2:	e7df      	b.n	800a864 <_fflush_r+0x28>
 800a8a4:	4b04      	ldr	r3, [pc, #16]	; (800a8b8 <_fflush_r+0x7c>)
 800a8a6:	429c      	cmp	r4, r3
 800a8a8:	d1dc      	bne.n	800a864 <_fflush_r+0x28>
 800a8aa:	68ec      	ldr	r4, [r5, #12]
 800a8ac:	e7da      	b.n	800a864 <_fflush_r+0x28>
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	0800b23c 	.word	0x0800b23c
 800a8b4:	0800b25c 	.word	0x0800b25c
 800a8b8:	0800b21c 	.word	0x0800b21c

0800a8bc <std>:
 800a8bc:	2300      	movs	r3, #0
 800a8be:	b510      	push	{r4, lr}
 800a8c0:	0004      	movs	r4, r0
 800a8c2:	6003      	str	r3, [r0, #0]
 800a8c4:	6043      	str	r3, [r0, #4]
 800a8c6:	6083      	str	r3, [r0, #8]
 800a8c8:	8181      	strh	r1, [r0, #12]
 800a8ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a8cc:	0019      	movs	r1, r3
 800a8ce:	81c2      	strh	r2, [r0, #14]
 800a8d0:	6103      	str	r3, [r0, #16]
 800a8d2:	6143      	str	r3, [r0, #20]
 800a8d4:	6183      	str	r3, [r0, #24]
 800a8d6:	2208      	movs	r2, #8
 800a8d8:	305c      	adds	r0, #92	; 0x5c
 800a8da:	f7fd fa9b 	bl	8007e14 <memset>
 800a8de:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <std+0x38>)
 800a8e0:	6224      	str	r4, [r4, #32]
 800a8e2:	6263      	str	r3, [r4, #36]	; 0x24
 800a8e4:	4b04      	ldr	r3, [pc, #16]	; (800a8f8 <std+0x3c>)
 800a8e6:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8e8:	4b04      	ldr	r3, [pc, #16]	; (800a8fc <std+0x40>)
 800a8ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8ec:	4b04      	ldr	r3, [pc, #16]	; (800a900 <std+0x44>)
 800a8ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a8f0:	bd10      	pop	{r4, pc}
 800a8f2:	46c0      	nop			; (mov r8, r8)
 800a8f4:	0800ac45 	.word	0x0800ac45
 800a8f8:	0800ac6d 	.word	0x0800ac6d
 800a8fc:	0800aca5 	.word	0x0800aca5
 800a900:	0800acd1 	.word	0x0800acd1

0800a904 <_cleanup_r>:
 800a904:	b510      	push	{r4, lr}
 800a906:	4902      	ldr	r1, [pc, #8]	; (800a910 <_cleanup_r+0xc>)
 800a908:	f000 f8ba 	bl	800aa80 <_fwalk_reent>
 800a90c:	bd10      	pop	{r4, pc}
 800a90e:	46c0      	nop			; (mov r8, r8)
 800a910:	0800a83d 	.word	0x0800a83d

0800a914 <__sfmoreglue>:
 800a914:	b570      	push	{r4, r5, r6, lr}
 800a916:	2568      	movs	r5, #104	; 0x68
 800a918:	1e4a      	subs	r2, r1, #1
 800a91a:	4355      	muls	r5, r2
 800a91c:	000e      	movs	r6, r1
 800a91e:	0029      	movs	r1, r5
 800a920:	3174      	adds	r1, #116	; 0x74
 800a922:	f7ff fa3d 	bl	8009da0 <_malloc_r>
 800a926:	1e04      	subs	r4, r0, #0
 800a928:	d008      	beq.n	800a93c <__sfmoreglue+0x28>
 800a92a:	2100      	movs	r1, #0
 800a92c:	002a      	movs	r2, r5
 800a92e:	6001      	str	r1, [r0, #0]
 800a930:	6046      	str	r6, [r0, #4]
 800a932:	300c      	adds	r0, #12
 800a934:	60a0      	str	r0, [r4, #8]
 800a936:	3268      	adds	r2, #104	; 0x68
 800a938:	f7fd fa6c 	bl	8007e14 <memset>
 800a93c:	0020      	movs	r0, r4
 800a93e:	bd70      	pop	{r4, r5, r6, pc}

0800a940 <__sfp_lock_acquire>:
 800a940:	b510      	push	{r4, lr}
 800a942:	4802      	ldr	r0, [pc, #8]	; (800a94c <__sfp_lock_acquire+0xc>)
 800a944:	f000 f8bd 	bl	800aac2 <__retarget_lock_acquire_recursive>
 800a948:	bd10      	pop	{r4, pc}
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	200003d5 	.word	0x200003d5

0800a950 <__sfp_lock_release>:
 800a950:	b510      	push	{r4, lr}
 800a952:	4802      	ldr	r0, [pc, #8]	; (800a95c <__sfp_lock_release+0xc>)
 800a954:	f000 f8b6 	bl	800aac4 <__retarget_lock_release_recursive>
 800a958:	bd10      	pop	{r4, pc}
 800a95a:	46c0      	nop			; (mov r8, r8)
 800a95c:	200003d5 	.word	0x200003d5

0800a960 <__sinit_lock_acquire>:
 800a960:	b510      	push	{r4, lr}
 800a962:	4802      	ldr	r0, [pc, #8]	; (800a96c <__sinit_lock_acquire+0xc>)
 800a964:	f000 f8ad 	bl	800aac2 <__retarget_lock_acquire_recursive>
 800a968:	bd10      	pop	{r4, pc}
 800a96a:	46c0      	nop			; (mov r8, r8)
 800a96c:	200003d6 	.word	0x200003d6

0800a970 <__sinit_lock_release>:
 800a970:	b510      	push	{r4, lr}
 800a972:	4802      	ldr	r0, [pc, #8]	; (800a97c <__sinit_lock_release+0xc>)
 800a974:	f000 f8a6 	bl	800aac4 <__retarget_lock_release_recursive>
 800a978:	bd10      	pop	{r4, pc}
 800a97a:	46c0      	nop			; (mov r8, r8)
 800a97c:	200003d6 	.word	0x200003d6

0800a980 <__sinit>:
 800a980:	b513      	push	{r0, r1, r4, lr}
 800a982:	0004      	movs	r4, r0
 800a984:	f7ff ffec 	bl	800a960 <__sinit_lock_acquire>
 800a988:	69a3      	ldr	r3, [r4, #24]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <__sinit+0x14>
 800a98e:	f7ff ffef 	bl	800a970 <__sinit_lock_release>
 800a992:	bd13      	pop	{r0, r1, r4, pc}
 800a994:	64a3      	str	r3, [r4, #72]	; 0x48
 800a996:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a998:	6523      	str	r3, [r4, #80]	; 0x50
 800a99a:	4b13      	ldr	r3, [pc, #76]	; (800a9e8 <__sinit+0x68>)
 800a99c:	4a13      	ldr	r2, [pc, #76]	; (800a9ec <__sinit+0x6c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	d101      	bne.n	800a9ac <__sinit+0x2c>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	61a3      	str	r3, [r4, #24]
 800a9ac:	0020      	movs	r0, r4
 800a9ae:	f000 f81f 	bl	800a9f0 <__sfp>
 800a9b2:	6060      	str	r0, [r4, #4]
 800a9b4:	0020      	movs	r0, r4
 800a9b6:	f000 f81b 	bl	800a9f0 <__sfp>
 800a9ba:	60a0      	str	r0, [r4, #8]
 800a9bc:	0020      	movs	r0, r4
 800a9be:	f000 f817 	bl	800a9f0 <__sfp>
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2104      	movs	r1, #4
 800a9c6:	60e0      	str	r0, [r4, #12]
 800a9c8:	6860      	ldr	r0, [r4, #4]
 800a9ca:	f7ff ff77 	bl	800a8bc <std>
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	2109      	movs	r1, #9
 800a9d2:	68a0      	ldr	r0, [r4, #8]
 800a9d4:	f7ff ff72 	bl	800a8bc <std>
 800a9d8:	2202      	movs	r2, #2
 800a9da:	2112      	movs	r1, #18
 800a9dc:	68e0      	ldr	r0, [r4, #12]
 800a9de:	f7ff ff6d 	bl	800a8bc <std>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	61a3      	str	r3, [r4, #24]
 800a9e6:	e7d2      	b.n	800a98e <__sinit+0xe>
 800a9e8:	0800aea0 	.word	0x0800aea0
 800a9ec:	0800a905 	.word	0x0800a905

0800a9f0 <__sfp>:
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	0007      	movs	r7, r0
 800a9f4:	f7ff ffa4 	bl	800a940 <__sfp_lock_acquire>
 800a9f8:	4b1f      	ldr	r3, [pc, #124]	; (800aa78 <__sfp+0x88>)
 800a9fa:	681e      	ldr	r6, [r3, #0]
 800a9fc:	69b3      	ldr	r3, [r6, #24]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d102      	bne.n	800aa08 <__sfp+0x18>
 800aa02:	0030      	movs	r0, r6
 800aa04:	f7ff ffbc 	bl	800a980 <__sinit>
 800aa08:	3648      	adds	r6, #72	; 0x48
 800aa0a:	68b4      	ldr	r4, [r6, #8]
 800aa0c:	6873      	ldr	r3, [r6, #4]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	d504      	bpl.n	800aa1c <__sfp+0x2c>
 800aa12:	6833      	ldr	r3, [r6, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d022      	beq.n	800aa5e <__sfp+0x6e>
 800aa18:	6836      	ldr	r6, [r6, #0]
 800aa1a:	e7f6      	b.n	800aa0a <__sfp+0x1a>
 800aa1c:	220c      	movs	r2, #12
 800aa1e:	5ea5      	ldrsh	r5, [r4, r2]
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	d11a      	bne.n	800aa5a <__sfp+0x6a>
 800aa24:	0020      	movs	r0, r4
 800aa26:	4b15      	ldr	r3, [pc, #84]	; (800aa7c <__sfp+0x8c>)
 800aa28:	3058      	adds	r0, #88	; 0x58
 800aa2a:	60e3      	str	r3, [r4, #12]
 800aa2c:	6665      	str	r5, [r4, #100]	; 0x64
 800aa2e:	f000 f847 	bl	800aac0 <__retarget_lock_init_recursive>
 800aa32:	f7ff ff8d 	bl	800a950 <__sfp_lock_release>
 800aa36:	0020      	movs	r0, r4
 800aa38:	2208      	movs	r2, #8
 800aa3a:	0029      	movs	r1, r5
 800aa3c:	6025      	str	r5, [r4, #0]
 800aa3e:	60a5      	str	r5, [r4, #8]
 800aa40:	6065      	str	r5, [r4, #4]
 800aa42:	6125      	str	r5, [r4, #16]
 800aa44:	6165      	str	r5, [r4, #20]
 800aa46:	61a5      	str	r5, [r4, #24]
 800aa48:	305c      	adds	r0, #92	; 0x5c
 800aa4a:	f7fd f9e3 	bl	8007e14 <memset>
 800aa4e:	6365      	str	r5, [r4, #52]	; 0x34
 800aa50:	63a5      	str	r5, [r4, #56]	; 0x38
 800aa52:	64a5      	str	r5, [r4, #72]	; 0x48
 800aa54:	64e5      	str	r5, [r4, #76]	; 0x4c
 800aa56:	0020      	movs	r0, r4
 800aa58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa5a:	3468      	adds	r4, #104	; 0x68
 800aa5c:	e7d7      	b.n	800aa0e <__sfp+0x1e>
 800aa5e:	2104      	movs	r1, #4
 800aa60:	0038      	movs	r0, r7
 800aa62:	f7ff ff57 	bl	800a914 <__sfmoreglue>
 800aa66:	1e04      	subs	r4, r0, #0
 800aa68:	6030      	str	r0, [r6, #0]
 800aa6a:	d1d5      	bne.n	800aa18 <__sfp+0x28>
 800aa6c:	f7ff ff70 	bl	800a950 <__sfp_lock_release>
 800aa70:	230c      	movs	r3, #12
 800aa72:	603b      	str	r3, [r7, #0]
 800aa74:	e7ef      	b.n	800aa56 <__sfp+0x66>
 800aa76:	46c0      	nop			; (mov r8, r8)
 800aa78:	0800aea0 	.word	0x0800aea0
 800aa7c:	ffff0001 	.word	0xffff0001

0800aa80 <_fwalk_reent>:
 800aa80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa82:	0004      	movs	r4, r0
 800aa84:	0006      	movs	r6, r0
 800aa86:	2700      	movs	r7, #0
 800aa88:	9101      	str	r1, [sp, #4]
 800aa8a:	3448      	adds	r4, #72	; 0x48
 800aa8c:	6863      	ldr	r3, [r4, #4]
 800aa8e:	68a5      	ldr	r5, [r4, #8]
 800aa90:	9300      	str	r3, [sp, #0]
 800aa92:	9b00      	ldr	r3, [sp, #0]
 800aa94:	3b01      	subs	r3, #1
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	d504      	bpl.n	800aaa4 <_fwalk_reent+0x24>
 800aa9a:	6824      	ldr	r4, [r4, #0]
 800aa9c:	2c00      	cmp	r4, #0
 800aa9e:	d1f5      	bne.n	800aa8c <_fwalk_reent+0xc>
 800aaa0:	0038      	movs	r0, r7
 800aaa2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aaa4:	89ab      	ldrh	r3, [r5, #12]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d908      	bls.n	800aabc <_fwalk_reent+0x3c>
 800aaaa:	220e      	movs	r2, #14
 800aaac:	5eab      	ldrsh	r3, [r5, r2]
 800aaae:	3301      	adds	r3, #1
 800aab0:	d004      	beq.n	800aabc <_fwalk_reent+0x3c>
 800aab2:	0029      	movs	r1, r5
 800aab4:	0030      	movs	r0, r6
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	4798      	blx	r3
 800aaba:	4307      	orrs	r7, r0
 800aabc:	3568      	adds	r5, #104	; 0x68
 800aabe:	e7e8      	b.n	800aa92 <_fwalk_reent+0x12>

0800aac0 <__retarget_lock_init_recursive>:
 800aac0:	4770      	bx	lr

0800aac2 <__retarget_lock_acquire_recursive>:
 800aac2:	4770      	bx	lr

0800aac4 <__retarget_lock_release_recursive>:
 800aac4:	4770      	bx	lr
	...

0800aac8 <__swhatbuf_r>:
 800aac8:	b570      	push	{r4, r5, r6, lr}
 800aaca:	000e      	movs	r6, r1
 800aacc:	001d      	movs	r5, r3
 800aace:	230e      	movs	r3, #14
 800aad0:	5ec9      	ldrsh	r1, [r1, r3]
 800aad2:	0014      	movs	r4, r2
 800aad4:	b096      	sub	sp, #88	; 0x58
 800aad6:	2900      	cmp	r1, #0
 800aad8:	da08      	bge.n	800aaec <__swhatbuf_r+0x24>
 800aada:	220c      	movs	r2, #12
 800aadc:	5eb3      	ldrsh	r3, [r6, r2]
 800aade:	2200      	movs	r2, #0
 800aae0:	602a      	str	r2, [r5, #0]
 800aae2:	061b      	lsls	r3, r3, #24
 800aae4:	d411      	bmi.n	800ab0a <__swhatbuf_r+0x42>
 800aae6:	2380      	movs	r3, #128	; 0x80
 800aae8:	00db      	lsls	r3, r3, #3
 800aaea:	e00f      	b.n	800ab0c <__swhatbuf_r+0x44>
 800aaec:	466a      	mov	r2, sp
 800aaee:	f000 f91b 	bl	800ad28 <_fstat_r>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	dbf1      	blt.n	800aada <__swhatbuf_r+0x12>
 800aaf6:	23f0      	movs	r3, #240	; 0xf0
 800aaf8:	9901      	ldr	r1, [sp, #4]
 800aafa:	021b      	lsls	r3, r3, #8
 800aafc:	4019      	ands	r1, r3
 800aafe:	4b05      	ldr	r3, [pc, #20]	; (800ab14 <__swhatbuf_r+0x4c>)
 800ab00:	18c9      	adds	r1, r1, r3
 800ab02:	424b      	negs	r3, r1
 800ab04:	4159      	adcs	r1, r3
 800ab06:	6029      	str	r1, [r5, #0]
 800ab08:	e7ed      	b.n	800aae6 <__swhatbuf_r+0x1e>
 800ab0a:	2340      	movs	r3, #64	; 0x40
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	6023      	str	r3, [r4, #0]
 800ab10:	b016      	add	sp, #88	; 0x58
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	ffffe000 	.word	0xffffe000

0800ab18 <__smakebuf_r>:
 800ab18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab1a:	2602      	movs	r6, #2
 800ab1c:	898b      	ldrh	r3, [r1, #12]
 800ab1e:	0005      	movs	r5, r0
 800ab20:	000c      	movs	r4, r1
 800ab22:	4233      	tst	r3, r6
 800ab24:	d006      	beq.n	800ab34 <__smakebuf_r+0x1c>
 800ab26:	0023      	movs	r3, r4
 800ab28:	3347      	adds	r3, #71	; 0x47
 800ab2a:	6023      	str	r3, [r4, #0]
 800ab2c:	6123      	str	r3, [r4, #16]
 800ab2e:	2301      	movs	r3, #1
 800ab30:	6163      	str	r3, [r4, #20]
 800ab32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ab34:	466a      	mov	r2, sp
 800ab36:	ab01      	add	r3, sp, #4
 800ab38:	f7ff ffc6 	bl	800aac8 <__swhatbuf_r>
 800ab3c:	9900      	ldr	r1, [sp, #0]
 800ab3e:	0007      	movs	r7, r0
 800ab40:	0028      	movs	r0, r5
 800ab42:	f7ff f92d 	bl	8009da0 <_malloc_r>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d108      	bne.n	800ab5c <__smakebuf_r+0x44>
 800ab4a:	220c      	movs	r2, #12
 800ab4c:	5ea3      	ldrsh	r3, [r4, r2]
 800ab4e:	059a      	lsls	r2, r3, #22
 800ab50:	d4ef      	bmi.n	800ab32 <__smakebuf_r+0x1a>
 800ab52:	2203      	movs	r2, #3
 800ab54:	4393      	bics	r3, r2
 800ab56:	431e      	orrs	r6, r3
 800ab58:	81a6      	strh	r6, [r4, #12]
 800ab5a:	e7e4      	b.n	800ab26 <__smakebuf_r+0xe>
 800ab5c:	4b0f      	ldr	r3, [pc, #60]	; (800ab9c <__smakebuf_r+0x84>)
 800ab5e:	62ab      	str	r3, [r5, #40]	; 0x28
 800ab60:	2380      	movs	r3, #128	; 0x80
 800ab62:	89a2      	ldrh	r2, [r4, #12]
 800ab64:	6020      	str	r0, [r4, #0]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	81a3      	strh	r3, [r4, #12]
 800ab6a:	9b00      	ldr	r3, [sp, #0]
 800ab6c:	6120      	str	r0, [r4, #16]
 800ab6e:	6163      	str	r3, [r4, #20]
 800ab70:	9b01      	ldr	r3, [sp, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00d      	beq.n	800ab92 <__smakebuf_r+0x7a>
 800ab76:	0028      	movs	r0, r5
 800ab78:	230e      	movs	r3, #14
 800ab7a:	5ee1      	ldrsh	r1, [r4, r3]
 800ab7c:	f000 f8e6 	bl	800ad4c <_isatty_r>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d006      	beq.n	800ab92 <__smakebuf_r+0x7a>
 800ab84:	2203      	movs	r2, #3
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	4393      	bics	r3, r2
 800ab8a:	001a      	movs	r2, r3
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	89a0      	ldrh	r0, [r4, #12]
 800ab94:	4307      	orrs	r7, r0
 800ab96:	81a7      	strh	r7, [r4, #12]
 800ab98:	e7cb      	b.n	800ab32 <__smakebuf_r+0x1a>
 800ab9a:	46c0      	nop			; (mov r8, r8)
 800ab9c:	0800a905 	.word	0x0800a905

0800aba0 <_malloc_usable_size_r>:
 800aba0:	1f0b      	subs	r3, r1, #4
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	1f18      	subs	r0, r3, #4
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	da01      	bge.n	800abae <_malloc_usable_size_r+0xe>
 800abaa:	580b      	ldr	r3, [r1, r0]
 800abac:	18c0      	adds	r0, r0, r3
 800abae:	4770      	bx	lr

0800abb0 <_raise_r>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	0004      	movs	r4, r0
 800abb4:	000d      	movs	r5, r1
 800abb6:	291f      	cmp	r1, #31
 800abb8:	d904      	bls.n	800abc4 <_raise_r+0x14>
 800abba:	2316      	movs	r3, #22
 800abbc:	6003      	str	r3, [r0, #0]
 800abbe:	2001      	movs	r0, #1
 800abc0:	4240      	negs	r0, r0
 800abc2:	bd70      	pop	{r4, r5, r6, pc}
 800abc4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d004      	beq.n	800abd4 <_raise_r+0x24>
 800abca:	008a      	lsls	r2, r1, #2
 800abcc:	189b      	adds	r3, r3, r2
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	2a00      	cmp	r2, #0
 800abd2:	d108      	bne.n	800abe6 <_raise_r+0x36>
 800abd4:	0020      	movs	r0, r4
 800abd6:	f000 f831 	bl	800ac3c <_getpid_r>
 800abda:	002a      	movs	r2, r5
 800abdc:	0001      	movs	r1, r0
 800abde:	0020      	movs	r0, r4
 800abe0:	f000 f81a 	bl	800ac18 <_kill_r>
 800abe4:	e7ed      	b.n	800abc2 <_raise_r+0x12>
 800abe6:	2000      	movs	r0, #0
 800abe8:	2a01      	cmp	r2, #1
 800abea:	d0ea      	beq.n	800abc2 <_raise_r+0x12>
 800abec:	1c51      	adds	r1, r2, #1
 800abee:	d103      	bne.n	800abf8 <_raise_r+0x48>
 800abf0:	2316      	movs	r3, #22
 800abf2:	3001      	adds	r0, #1
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	e7e4      	b.n	800abc2 <_raise_r+0x12>
 800abf8:	2400      	movs	r4, #0
 800abfa:	0028      	movs	r0, r5
 800abfc:	601c      	str	r4, [r3, #0]
 800abfe:	4790      	blx	r2
 800ac00:	0020      	movs	r0, r4
 800ac02:	e7de      	b.n	800abc2 <_raise_r+0x12>

0800ac04 <raise>:
 800ac04:	b510      	push	{r4, lr}
 800ac06:	4b03      	ldr	r3, [pc, #12]	; (800ac14 <raise+0x10>)
 800ac08:	0001      	movs	r1, r0
 800ac0a:	6818      	ldr	r0, [r3, #0]
 800ac0c:	f7ff ffd0 	bl	800abb0 <_raise_r>
 800ac10:	bd10      	pop	{r4, pc}
 800ac12:	46c0      	nop			; (mov r8, r8)
 800ac14:	2000000c 	.word	0x2000000c

0800ac18 <_kill_r>:
 800ac18:	2300      	movs	r3, #0
 800ac1a:	b570      	push	{r4, r5, r6, lr}
 800ac1c:	4d06      	ldr	r5, [pc, #24]	; (800ac38 <_kill_r+0x20>)
 800ac1e:	0004      	movs	r4, r0
 800ac20:	0008      	movs	r0, r1
 800ac22:	0011      	movs	r1, r2
 800ac24:	602b      	str	r3, [r5, #0]
 800ac26:	f7f9 fa69 	bl	80040fc <_kill>
 800ac2a:	1c43      	adds	r3, r0, #1
 800ac2c:	d103      	bne.n	800ac36 <_kill_r+0x1e>
 800ac2e:	682b      	ldr	r3, [r5, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d000      	beq.n	800ac36 <_kill_r+0x1e>
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	200003d0 	.word	0x200003d0

0800ac3c <_getpid_r>:
 800ac3c:	b510      	push	{r4, lr}
 800ac3e:	f7f9 fa57 	bl	80040f0 <_getpid>
 800ac42:	bd10      	pop	{r4, pc}

0800ac44 <__sread>:
 800ac44:	b570      	push	{r4, r5, r6, lr}
 800ac46:	000c      	movs	r4, r1
 800ac48:	250e      	movs	r5, #14
 800ac4a:	5f49      	ldrsh	r1, [r1, r5]
 800ac4c:	f000 f8a4 	bl	800ad98 <_read_r>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	db03      	blt.n	800ac5c <__sread+0x18>
 800ac54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac56:	181b      	adds	r3, r3, r0
 800ac58:	6563      	str	r3, [r4, #84]	; 0x54
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	4a02      	ldr	r2, [pc, #8]	; (800ac68 <__sread+0x24>)
 800ac60:	4013      	ands	r3, r2
 800ac62:	81a3      	strh	r3, [r4, #12]
 800ac64:	e7f9      	b.n	800ac5a <__sread+0x16>
 800ac66:	46c0      	nop			; (mov r8, r8)
 800ac68:	ffffefff 	.word	0xffffefff

0800ac6c <__swrite>:
 800ac6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6e:	001f      	movs	r7, r3
 800ac70:	898b      	ldrh	r3, [r1, #12]
 800ac72:	0005      	movs	r5, r0
 800ac74:	000c      	movs	r4, r1
 800ac76:	0016      	movs	r6, r2
 800ac78:	05db      	lsls	r3, r3, #23
 800ac7a:	d505      	bpl.n	800ac88 <__swrite+0x1c>
 800ac7c:	230e      	movs	r3, #14
 800ac7e:	5ec9      	ldrsh	r1, [r1, r3]
 800ac80:	2200      	movs	r2, #0
 800ac82:	2302      	movs	r3, #2
 800ac84:	f000 f874 	bl	800ad70 <_lseek_r>
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	4a05      	ldr	r2, [pc, #20]	; (800aca0 <__swrite+0x34>)
 800ac8c:	0028      	movs	r0, r5
 800ac8e:	4013      	ands	r3, r2
 800ac90:	81a3      	strh	r3, [r4, #12]
 800ac92:	0032      	movs	r2, r6
 800ac94:	230e      	movs	r3, #14
 800ac96:	5ee1      	ldrsh	r1, [r4, r3]
 800ac98:	003b      	movs	r3, r7
 800ac9a:	f000 f81f 	bl	800acdc <_write_r>
 800ac9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aca0:	ffffefff 	.word	0xffffefff

0800aca4 <__sseek>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	000c      	movs	r4, r1
 800aca8:	250e      	movs	r5, #14
 800acaa:	5f49      	ldrsh	r1, [r1, r5]
 800acac:	f000 f860 	bl	800ad70 <_lseek_r>
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	1c42      	adds	r2, r0, #1
 800acb4:	d103      	bne.n	800acbe <__sseek+0x1a>
 800acb6:	4a05      	ldr	r2, [pc, #20]	; (800accc <__sseek+0x28>)
 800acb8:	4013      	ands	r3, r2
 800acba:	81a3      	strh	r3, [r4, #12]
 800acbc:	bd70      	pop	{r4, r5, r6, pc}
 800acbe:	2280      	movs	r2, #128	; 0x80
 800acc0:	0152      	lsls	r2, r2, #5
 800acc2:	4313      	orrs	r3, r2
 800acc4:	81a3      	strh	r3, [r4, #12]
 800acc6:	6560      	str	r0, [r4, #84]	; 0x54
 800acc8:	e7f8      	b.n	800acbc <__sseek+0x18>
 800acca:	46c0      	nop			; (mov r8, r8)
 800accc:	ffffefff 	.word	0xffffefff

0800acd0 <__sclose>:
 800acd0:	b510      	push	{r4, lr}
 800acd2:	230e      	movs	r3, #14
 800acd4:	5ec9      	ldrsh	r1, [r1, r3]
 800acd6:	f000 f815 	bl	800ad04 <_close_r>
 800acda:	bd10      	pop	{r4, pc}

0800acdc <_write_r>:
 800acdc:	b570      	push	{r4, r5, r6, lr}
 800acde:	0004      	movs	r4, r0
 800ace0:	0008      	movs	r0, r1
 800ace2:	0011      	movs	r1, r2
 800ace4:	001a      	movs	r2, r3
 800ace6:	2300      	movs	r3, #0
 800ace8:	4d05      	ldr	r5, [pc, #20]	; (800ad00 <_write_r+0x24>)
 800acea:	602b      	str	r3, [r5, #0]
 800acec:	f7f9 fa3f 	bl	800416e <_write>
 800acf0:	1c43      	adds	r3, r0, #1
 800acf2:	d103      	bne.n	800acfc <_write_r+0x20>
 800acf4:	682b      	ldr	r3, [r5, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d000      	beq.n	800acfc <_write_r+0x20>
 800acfa:	6023      	str	r3, [r4, #0]
 800acfc:	bd70      	pop	{r4, r5, r6, pc}
 800acfe:	46c0      	nop			; (mov r8, r8)
 800ad00:	200003d0 	.word	0x200003d0

0800ad04 <_close_r>:
 800ad04:	2300      	movs	r3, #0
 800ad06:	b570      	push	{r4, r5, r6, lr}
 800ad08:	4d06      	ldr	r5, [pc, #24]	; (800ad24 <_close_r+0x20>)
 800ad0a:	0004      	movs	r4, r0
 800ad0c:	0008      	movs	r0, r1
 800ad0e:	602b      	str	r3, [r5, #0]
 800ad10:	f7f9 fa49 	bl	80041a6 <_close>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d103      	bne.n	800ad20 <_close_r+0x1c>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d000      	beq.n	800ad20 <_close_r+0x1c>
 800ad1e:	6023      	str	r3, [r4, #0]
 800ad20:	bd70      	pop	{r4, r5, r6, pc}
 800ad22:	46c0      	nop			; (mov r8, r8)
 800ad24:	200003d0 	.word	0x200003d0

0800ad28 <_fstat_r>:
 800ad28:	2300      	movs	r3, #0
 800ad2a:	b570      	push	{r4, r5, r6, lr}
 800ad2c:	4d06      	ldr	r5, [pc, #24]	; (800ad48 <_fstat_r+0x20>)
 800ad2e:	0004      	movs	r4, r0
 800ad30:	0008      	movs	r0, r1
 800ad32:	0011      	movs	r1, r2
 800ad34:	602b      	str	r3, [r5, #0]
 800ad36:	f7f9 fa40 	bl	80041ba <_fstat>
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	d103      	bne.n	800ad46 <_fstat_r+0x1e>
 800ad3e:	682b      	ldr	r3, [r5, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d000      	beq.n	800ad46 <_fstat_r+0x1e>
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
 800ad48:	200003d0 	.word	0x200003d0

0800ad4c <_isatty_r>:
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	b570      	push	{r4, r5, r6, lr}
 800ad50:	4d06      	ldr	r5, [pc, #24]	; (800ad6c <_isatty_r+0x20>)
 800ad52:	0004      	movs	r4, r0
 800ad54:	0008      	movs	r0, r1
 800ad56:	602b      	str	r3, [r5, #0]
 800ad58:	f7f9 fa3d 	bl	80041d6 <_isatty>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d103      	bne.n	800ad68 <_isatty_r+0x1c>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d000      	beq.n	800ad68 <_isatty_r+0x1c>
 800ad66:	6023      	str	r3, [r4, #0]
 800ad68:	bd70      	pop	{r4, r5, r6, pc}
 800ad6a:	46c0      	nop			; (mov r8, r8)
 800ad6c:	200003d0 	.word	0x200003d0

0800ad70 <_lseek_r>:
 800ad70:	b570      	push	{r4, r5, r6, lr}
 800ad72:	0004      	movs	r4, r0
 800ad74:	0008      	movs	r0, r1
 800ad76:	0011      	movs	r1, r2
 800ad78:	001a      	movs	r2, r3
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	4d05      	ldr	r5, [pc, #20]	; (800ad94 <_lseek_r+0x24>)
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	f7f9 fa32 	bl	80041e8 <_lseek>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d103      	bne.n	800ad90 <_lseek_r+0x20>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d000      	beq.n	800ad90 <_lseek_r+0x20>
 800ad8e:	6023      	str	r3, [r4, #0]
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
 800ad92:	46c0      	nop			; (mov r8, r8)
 800ad94:	200003d0 	.word	0x200003d0

0800ad98 <_read_r>:
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	0004      	movs	r4, r0
 800ad9c:	0008      	movs	r0, r1
 800ad9e:	0011      	movs	r1, r2
 800ada0:	001a      	movs	r2, r3
 800ada2:	2300      	movs	r3, #0
 800ada4:	4d05      	ldr	r5, [pc, #20]	; (800adbc <_read_r+0x24>)
 800ada6:	602b      	str	r3, [r5, #0]
 800ada8:	f7f9 f9c4 	bl	8004134 <_read>
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	d103      	bne.n	800adb8 <_read_r+0x20>
 800adb0:	682b      	ldr	r3, [r5, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d000      	beq.n	800adb8 <_read_r+0x20>
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	bd70      	pop	{r4, r5, r6, pc}
 800adba:	46c0      	nop			; (mov r8, r8)
 800adbc:	200003d0 	.word	0x200003d0

0800adc0 <_init>:
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc2:	46c0      	nop			; (mov r8, r8)
 800adc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc6:	bc08      	pop	{r3}
 800adc8:	469e      	mov	lr, r3
 800adca:	4770      	bx	lr

0800adcc <_fini>:
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	46c0      	nop			; (mov r8, r8)
 800add0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add2:	bc08      	pop	{r3}
 800add4:	469e      	mov	lr, r3
 800add6:	4770      	bx	lr
