
EEE3097S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e8  080031e8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080031e8  080031e8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031e8  080031e8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080031f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  08003258  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08003258  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002181  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ad2  00000000  00000000  00022211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000358  00000000  00000000  00022ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002e0  00000000  00000000  00023040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011516  00000000  00000000  00023320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ba9  00000000  00000000  00034836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000653bc  00000000  00000000  000383df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009d79b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013c0  00000000  00000000  0009d7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d54 	.word	0x08002d54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002d54 	.word	0x08002d54

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b089      	sub	sp, #36	; 0x24
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 800023e:	2300      	movs	r3, #0
 8000240:	61fb      	str	r3, [r7, #28]
 8000242:	e030      	b.n	80002a6 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8000244:	69fb      	ldr	r3, [r7, #28]
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	683a      	ldr	r2, [r7, #0]
 800024a:	18d2      	adds	r2, r2, r3
 800024c:	69fb      	ldr	r3, [r7, #28]
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	6879      	ldr	r1, [r7, #4]
 8000252:	18cb      	adds	r3, r1, r3
 8000254:	7812      	ldrb	r2, [r2, #0]
 8000256:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8000258:	69fb      	ldr	r3, [r7, #28]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	3301      	adds	r3, #1
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	18d2      	adds	r2, r2, r3
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	3301      	adds	r3, #1
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	18cb      	adds	r3, r1, r3
 800026c:	7812      	ldrb	r2, [r2, #0]
 800026e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8000270:	69fb      	ldr	r3, [r7, #28]
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	3302      	adds	r3, #2
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	18d2      	adds	r2, r2, r3
 800027a:	69fb      	ldr	r3, [r7, #28]
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	3302      	adds	r3, #2
 8000280:	6879      	ldr	r1, [r7, #4]
 8000282:	18cb      	adds	r3, r1, r3
 8000284:	7812      	ldrb	r2, [r2, #0]
 8000286:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	3303      	adds	r3, #3
 800028e:	683a      	ldr	r2, [r7, #0]
 8000290:	18d2      	adds	r2, r2, r3
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	3303      	adds	r3, #3
 8000298:	6879      	ldr	r1, [r7, #4]
 800029a:	18cb      	adds	r3, r1, r3
 800029c:	7812      	ldrb	r2, [r2, #0]
 800029e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 80002a0:	69fb      	ldr	r3, [r7, #28]
 80002a2:	3301      	adds	r3, #1
 80002a4:	61fb      	str	r3, [r7, #28]
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d9cb      	bls.n	8000244 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80002ac:	2304      	movs	r3, #4
 80002ae:	61fb      	str	r3, [r7, #28]
 80002b0:	e0a0      	b.n	80003f4 <KeyExpansion+0x1c0>
  {
    {
      k = (i - 1) * 4;
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	3b01      	subs	r3, #1
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	69bb      	ldr	r3, [r7, #24]
 80002be:	18d3      	adds	r3, r2, r3
 80002c0:	781a      	ldrb	r2, [r3, #0]
 80002c2:	210c      	movs	r1, #12
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
 80002c8:	69bb      	ldr	r3, [r7, #24]
 80002ca:	3301      	adds	r3, #1
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	18d3      	adds	r3, r2, r3
 80002d0:	781a      	ldrb	r2, [r3, #0]
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
 80002d6:	69bb      	ldr	r3, [r7, #24]
 80002d8:	3302      	adds	r3, #2
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	18d3      	adds	r3, r2, r3
 80002de:	781a      	ldrb	r2, [r3, #0]
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
 80002e4:	69bb      	ldr	r3, [r7, #24]
 80002e6:	3303      	adds	r3, #3
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	18d3      	adds	r3, r2, r3
 80002ec:	781a      	ldrb	r2, [r3, #0]
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	2203      	movs	r2, #3
 80002f6:	4013      	ands	r3, r2
 80002f8:	d13b      	bne.n	8000372 <KeyExpansion+0x13e>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 80002fa:	2417      	movs	r4, #23
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	0008      	movs	r0, r1
 8000300:	183a      	adds	r2, r7, r0
 8000302:	7812      	ldrb	r2, [r2, #0]
 8000304:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
 8000306:	183b      	adds	r3, r7, r0
 8000308:	785a      	ldrb	r2, [r3, #1]
 800030a:	183b      	adds	r3, r7, r0
 800030c:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 800030e:	183b      	adds	r3, r7, r0
 8000310:	789a      	ldrb	r2, [r3, #2]
 8000312:	183b      	adds	r3, r7, r0
 8000314:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 8000316:	183b      	adds	r3, r7, r0
 8000318:	78da      	ldrb	r2, [r3, #3]
 800031a:	183b      	adds	r3, r7, r0
 800031c:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
 800031e:	183b      	adds	r3, r7, r0
 8000320:	193a      	adds	r2, r7, r4
 8000322:	7812      	ldrb	r2, [r2, #0]
 8000324:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8000326:	183b      	adds	r3, r7, r0
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	001a      	movs	r2, r3
 800032c:	4b36      	ldr	r3, [pc, #216]	; (8000408 <KeyExpansion+0x1d4>)
 800032e:	5c9a      	ldrb	r2, [r3, r2]
 8000330:	183b      	adds	r3, r7, r0
 8000332:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 8000334:	183b      	adds	r3, r7, r0
 8000336:	785b      	ldrb	r3, [r3, #1]
 8000338:	001a      	movs	r2, r3
 800033a:	4b33      	ldr	r3, [pc, #204]	; (8000408 <KeyExpansion+0x1d4>)
 800033c:	5c9a      	ldrb	r2, [r3, r2]
 800033e:	183b      	adds	r3, r7, r0
 8000340:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 8000342:	183b      	adds	r3, r7, r0
 8000344:	789b      	ldrb	r3, [r3, #2]
 8000346:	001a      	movs	r2, r3
 8000348:	4b2f      	ldr	r3, [pc, #188]	; (8000408 <KeyExpansion+0x1d4>)
 800034a:	5c9a      	ldrb	r2, [r3, r2]
 800034c:	183b      	adds	r3, r7, r0
 800034e:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 8000350:	183b      	adds	r3, r7, r0
 8000352:	78db      	ldrb	r3, [r3, #3]
 8000354:	001a      	movs	r2, r3
 8000356:	4b2c      	ldr	r3, [pc, #176]	; (8000408 <KeyExpansion+0x1d4>)
 8000358:	5c9a      	ldrb	r2, [r3, r2]
 800035a:	183b      	adds	r3, r7, r0
 800035c:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 800035e:	183b      	adds	r3, r7, r0
 8000360:	781a      	ldrb	r2, [r3, #0]
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	089b      	lsrs	r3, r3, #2
 8000366:	4929      	ldr	r1, [pc, #164]	; (800040c <KeyExpansion+0x1d8>)
 8000368:	5ccb      	ldrb	r3, [r1, r3]
 800036a:	4053      	eors	r3, r2
 800036c:	b2da      	uxtb	r2, r3
 800036e:	183b      	adds	r3, r7, r0
 8000370:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	613b      	str	r3, [r7, #16]
 8000378:	69fb      	ldr	r3, [r7, #28]
 800037a:	3b04      	subs	r3, #4
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	69bb      	ldr	r3, [r7, #24]
 8000384:	18d3      	adds	r3, r2, r3
 8000386:	7819      	ldrb	r1, [r3, #0]
 8000388:	240c      	movs	r4, #12
 800038a:	193b      	adds	r3, r7, r4
 800038c:	781a      	ldrb	r2, [r3, #0]
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	693b      	ldr	r3, [r7, #16]
 8000392:	18c3      	adds	r3, r0, r3
 8000394:	404a      	eors	r2, r1
 8000396:	b2d2      	uxtb	r2, r2
 8000398:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 800039a:	69bb      	ldr	r3, [r7, #24]
 800039c:	3301      	adds	r3, #1
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	18d3      	adds	r3, r2, r3
 80003a2:	7819      	ldrb	r1, [r3, #0]
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	785a      	ldrb	r2, [r3, #1]
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	3301      	adds	r3, #1
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	18c3      	adds	r3, r0, r3
 80003b0:	404a      	eors	r2, r1
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 80003b6:	69bb      	ldr	r3, [r7, #24]
 80003b8:	3302      	adds	r3, #2
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	18d3      	adds	r3, r2, r3
 80003be:	7819      	ldrb	r1, [r3, #0]
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	789a      	ldrb	r2, [r3, #2]
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	3302      	adds	r3, #2
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	18c3      	adds	r3, r0, r3
 80003cc:	404a      	eors	r2, r1
 80003ce:	b2d2      	uxtb	r2, r2
 80003d0:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 80003d2:	69bb      	ldr	r3, [r7, #24]
 80003d4:	3303      	adds	r3, #3
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	18d3      	adds	r3, r2, r3
 80003da:	7819      	ldrb	r1, [r3, #0]
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	78da      	ldrb	r2, [r3, #3]
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	3303      	adds	r3, #3
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	18c3      	adds	r3, r0, r3
 80003e8:	404a      	eors	r2, r1
 80003ea:	b2d2      	uxtb	r2, r2
 80003ec:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	3301      	adds	r3, #1
 80003f2:	61fb      	str	r3, [r7, #28]
 80003f4:	69fb      	ldr	r3, [r7, #28]
 80003f6:	2b2b      	cmp	r3, #43	; 0x2b
 80003f8:	d800      	bhi.n	80003fc <KeyExpansion+0x1c8>
 80003fa:	e75a      	b.n	80002b2 <KeyExpansion+0x7e>
  }
}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b009      	add	sp, #36	; 0x24
 8000404:	bd90      	pop	{r4, r7, pc}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	08002f44 	.word	0x08002f44
 800040c:	08003144 	.word	0x08003144

08000410 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	683a      	ldr	r2, [r7, #0]
 800041e:	0011      	movs	r1, r2
 8000420:	0018      	movs	r0, r3
 8000422:	f7ff ff07 	bl	8000234 <KeyExpansion>
}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}

0800042e <AES_init_ctx_iv>:
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	b084      	sub	sp, #16
 8000432:	af00      	add	r7, sp, #0
 8000434:	60f8      	str	r0, [r7, #12]
 8000436:	60b9      	str	r1, [r7, #8]
 8000438:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	68ba      	ldr	r2, [r7, #8]
 800043e:	0011      	movs	r1, r2
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff fef7 	bl	8000234 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	33b0      	adds	r3, #176	; 0xb0
 800044a:	6879      	ldr	r1, [r7, #4]
 800044c:	2210      	movs	r2, #16
 800044e:	0018      	movs	r0, r3
 8000450:	f001 fbbc 	bl	8001bcc <memcpy>
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b004      	add	sp, #16
 800045a:	bd80      	pop	{r7, pc}

0800045c <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 800045c:	b5b0      	push	{r4, r5, r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
 8000462:	60b9      	str	r1, [r7, #8]
 8000464:	607a      	str	r2, [r7, #4]
 8000466:	230f      	movs	r3, #15
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	1c02      	adds	r2, r0, #0
 800046c:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 800046e:	2317      	movs	r3, #23
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
 8000476:	e038      	b.n	80004ea <AddRoundKey+0x8e>
  {
    for (j = 0; j < 4; ++j)
 8000478:	2316      	movs	r3, #22
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]
 8000480:	e028      	b.n	80004d4 <AddRoundKey+0x78>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8000482:	2517      	movs	r5, #23
 8000484:	197b      	adds	r3, r7, r5
 8000486:	781a      	ldrb	r2, [r3, #0]
 8000488:	2416      	movs	r4, #22
 800048a:	193b      	adds	r3, r7, r4
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	68b9      	ldr	r1, [r7, #8]
 8000490:	0092      	lsls	r2, r2, #2
 8000492:	188a      	adds	r2, r1, r2
 8000494:	5cd0      	ldrb	r0, [r2, r3]
 8000496:	230f      	movs	r3, #15
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	009a      	lsls	r2, r3, #2
 800049e:	197b      	adds	r3, r7, r5
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	18d3      	adds	r3, r2, r3
 80004a4:	009a      	lsls	r2, r3, #2
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	18d3      	adds	r3, r2, r3
 80004ac:	001a      	movs	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	189b      	adds	r3, r3, r2
 80004b2:	7819      	ldrb	r1, [r3, #0]
 80004b4:	197b      	adds	r3, r7, r5
 80004b6:	781a      	ldrb	r2, [r3, #0]
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4041      	eors	r1, r0
 80004be:	b2c8      	uxtb	r0, r1
 80004c0:	68b9      	ldr	r1, [r7, #8]
 80004c2:	0092      	lsls	r2, r2, #2
 80004c4:	188a      	adds	r2, r1, r2
 80004c6:	1c01      	adds	r1, r0, #0
 80004c8:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	193a      	adds	r2, r7, r4
 80004ce:	7812      	ldrb	r2, [r2, #0]
 80004d0:	3201      	adds	r2, #1
 80004d2:	701a      	strb	r2, [r3, #0]
 80004d4:	2316      	movs	r3, #22
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b03      	cmp	r3, #3
 80004dc:	d9d1      	bls.n	8000482 <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
 80004de:	2217      	movs	r2, #23
 80004e0:	18bb      	adds	r3, r7, r2
 80004e2:	18ba      	adds	r2, r7, r2
 80004e4:	7812      	ldrb	r2, [r2, #0]
 80004e6:	3201      	adds	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	2317      	movs	r3, #23
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d9c1      	bls.n	8000478 <AddRoundKey+0x1c>
    }
  }
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b006      	add	sp, #24
 80004fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000500 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8000508:	230f      	movs	r3, #15
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
 8000510:	e02a      	b.n	8000568 <SubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 8000512:	230e      	movs	r3, #14
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	e01a      	b.n	8000552 <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 800051c:	240e      	movs	r4, #14
 800051e:	193b      	adds	r3, r7, r4
 8000520:	781a      	ldrb	r2, [r3, #0]
 8000522:	250f      	movs	r5, #15
 8000524:	197b      	adds	r3, r7, r5
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	6879      	ldr	r1, [r7, #4]
 800052a:	0092      	lsls	r2, r2, #2
 800052c:	188a      	adds	r2, r1, r2
 800052e:	5cd3      	ldrb	r3, [r2, r3]
 8000530:	0018      	movs	r0, r3
 8000532:	193b      	adds	r3, r7, r4
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	197b      	adds	r3, r7, r5
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	4910      	ldr	r1, [pc, #64]	; (800057c <SubBytes+0x7c>)
 800053c:	5c08      	ldrb	r0, [r1, r0]
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	0092      	lsls	r2, r2, #2
 8000542:	188a      	adds	r2, r1, r2
 8000544:	1c01      	adds	r1, r0, #0
 8000546:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8000548:	193b      	adds	r3, r7, r4
 800054a:	193a      	adds	r2, r7, r4
 800054c:	7812      	ldrb	r2, [r2, #0]
 800054e:	3201      	adds	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	230e      	movs	r3, #14
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b03      	cmp	r3, #3
 800055a:	d9df      	bls.n	800051c <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 800055c:	220f      	movs	r2, #15
 800055e:	18bb      	adds	r3, r7, r2
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	7812      	ldrb	r2, [r2, #0]
 8000564:	3201      	adds	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	230f      	movs	r3, #15
 800056a:	18fb      	adds	r3, r7, r3
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b03      	cmp	r3, #3
 8000570:	d9cf      	bls.n	8000512 <SubBytes+0x12>
    }
  }
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	b004      	add	sp, #16
 800057a:	bdb0      	pop	{r4, r5, r7, pc}
 800057c:	08002f44 	.word	0x08002f44

08000580 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 8000588:	210f      	movs	r1, #15
 800058a:	187b      	adds	r3, r7, r1
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	7852      	ldrb	r2, [r2, #1]
 8000590:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795a      	ldrb	r2, [r3, #5]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	7a5a      	ldrb	r2, [r3, #9]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7b5a      	ldrb	r2, [r3, #13]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	187a      	adds	r2, r7, r1
 80005ae:	7812      	ldrb	r2, [r2, #0]
 80005b0:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7892      	ldrb	r2, [r2, #2]
 80005b8:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7a9a      	ldrb	r2, [r3, #10]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	187a      	adds	r2, r7, r1
 80005c6:	7812      	ldrb	r2, [r2, #0]
 80005c8:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	7992      	ldrb	r2, [r2, #6]
 80005d0:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7b9a      	ldrb	r2, [r3, #14]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	187a      	adds	r2, r7, r1
 80005de:	7812      	ldrb	r2, [r2, #0]
 80005e0:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	78d2      	ldrb	r2, [r2, #3]
 80005e8:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7bda      	ldrb	r2, [r3, #15]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7ada      	ldrb	r2, [r3, #11]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	79da      	ldrb	r2, [r3, #7]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	187a      	adds	r2, r7, r1
 8000606:	7812      	ldrb	r2, [r2, #0]
 8000608:	71da      	strb	r2, [r3, #7]
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b004      	add	sp, #16
 8000610:	bd80      	pop	{r7, pc}

08000612 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	0002      	movs	r2, r0
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	b25a      	sxtb	r2, r3
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	09db      	lsrs	r3, r3, #7
 800062c:	b2db      	uxtb	r3, r3
 800062e:	1c19      	adds	r1, r3, #0
 8000630:	1c0b      	adds	r3, r1, #0
 8000632:	18db      	adds	r3, r3, r3
 8000634:	185b      	adds	r3, r3, r1
 8000636:	1c19      	adds	r1, r3, #0
 8000638:	00c8      	lsls	r0, r1, #3
 800063a:	1c19      	adds	r1, r3, #0
 800063c:	1c03      	adds	r3, r0, #0
 800063e:	18cb      	adds	r3, r1, r3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	b25b      	sxtb	r3, r3
 8000644:	4053      	eors	r3, r2
 8000646:	b25b      	sxtb	r3, r3
 8000648:	b2db      	uxtb	r3, r3
}
 800064a:	0018      	movs	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}

08000652 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8000652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000654:	b085      	sub	sp, #20
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 800065a:	230f      	movs	r3, #15
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	e0ef      	b.n	8000844 <MixColumns+0x1f2>
  {  
    t   = (*state)[i][0];
 8000664:	250f      	movs	r5, #15
 8000666:	197b      	adds	r3, r7, r5
 8000668:	7819      	ldrb	r1, [r3, #0]
 800066a:	230e      	movs	r3, #14
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	0089      	lsls	r1, r1, #2
 8000672:	5c8a      	ldrb	r2, [r1, r2]
 8000674:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8000676:	197b      	adds	r3, r7, r5
 8000678:	781a      	ldrb	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	0092      	lsls	r2, r2, #2
 800067e:	5cd2      	ldrb	r2, [r2, r3]
 8000680:	197b      	adds	r3, r7, r5
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	18cb      	adds	r3, r1, r3
 800068a:	3301      	adds	r3, #1
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4053      	eors	r3, r2
 8000690:	b2da      	uxtb	r2, r3
 8000692:	197b      	adds	r3, r7, r5
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	18cb      	adds	r3, r1, r3
 800069c:	3302      	adds	r3, #2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4053      	eors	r3, r2
 80006a2:	b2d9      	uxtb	r1, r3
 80006a4:	197b      	adds	r3, r7, r5
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	18d3      	adds	r3, r2, r3
 80006ae:	3303      	adds	r3, #3
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	230d      	movs	r3, #13
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	404a      	eors	r2, r1
 80006b8:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 80006ba:	197b      	adds	r3, r7, r5
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	0092      	lsls	r2, r2, #2
 80006c2:	5cd1      	ldrb	r1, [r2, r3]
 80006c4:	197b      	adds	r3, r7, r5
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	18d3      	adds	r3, r2, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	260c      	movs	r6, #12
 80006d4:	19bb      	adds	r3, r7, r6
 80006d6:	404a      	eors	r2, r1
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	19bc      	adds	r4, r7, r6
 80006dc:	19bb      	adds	r3, r7, r6
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff ff96 	bl	8000612 <xtime>
 80006e6:	0003      	movs	r3, r0
 80006e8:	7023      	strb	r3, [r4, #0]
 80006ea:	197b      	adds	r3, r7, r5
 80006ec:	781a      	ldrb	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	0092      	lsls	r2, r2, #2
 80006f2:	5cd1      	ldrb	r1, [r2, r3]
 80006f4:	0030      	movs	r0, r6
 80006f6:	183a      	adds	r2, r7, r0
 80006f8:	230d      	movs	r3, #13
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	7812      	ldrb	r2, [r2, #0]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4053      	eors	r3, r2
 8000702:	b2db      	uxtb	r3, r3
 8000704:	197a      	adds	r2, r7, r5
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	404b      	eors	r3, r1
 800070a:	b2d9      	uxtb	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	0092      	lsls	r2, r2, #2
 8000710:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8000712:	197b      	adds	r3, r7, r5
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	18d3      	adds	r3, r2, r3
 800071c:	3301      	adds	r3, #1
 800071e:	7819      	ldrb	r1, [r3, #0]
 8000720:	197b      	adds	r3, r7, r5
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	18d3      	adds	r3, r2, r3
 800072a:	3302      	adds	r3, #2
 800072c:	781a      	ldrb	r2, [r3, #0]
 800072e:	183b      	adds	r3, r7, r0
 8000730:	404a      	eors	r2, r1
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	183c      	adds	r4, r7, r0
 8000736:	0006      	movs	r6, r0
 8000738:	183b      	adds	r3, r7, r0
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff ff68 	bl	8000612 <xtime>
 8000742:	0003      	movs	r3, r0
 8000744:	7023      	strb	r3, [r4, #0]
 8000746:	197b      	adds	r3, r7, r5
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	18d3      	adds	r3, r2, r3
 8000750:	3301      	adds	r3, #1
 8000752:	7819      	ldrb	r1, [r3, #0]
 8000754:	0030      	movs	r0, r6
 8000756:	183a      	adds	r2, r7, r0
 8000758:	230d      	movs	r3, #13
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	7812      	ldrb	r2, [r2, #0]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4053      	eors	r3, r2
 8000762:	b2da      	uxtb	r2, r3
 8000764:	197b      	adds	r3, r7, r5
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	404a      	eors	r2, r1
 800076a:	b2d1      	uxtb	r1, r2
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	18d3      	adds	r3, r2, r3
 8000772:	3301      	adds	r3, #1
 8000774:	1c0a      	adds	r2, r1, #0
 8000776:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8000778:	197b      	adds	r3, r7, r5
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	18d3      	adds	r3, r2, r3
 8000782:	3302      	adds	r3, #2
 8000784:	7819      	ldrb	r1, [r3, #0]
 8000786:	197b      	adds	r3, r7, r5
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	18d3      	adds	r3, r2, r3
 8000790:	3303      	adds	r3, #3
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	183b      	adds	r3, r7, r0
 8000796:	404a      	eors	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
 800079a:	183c      	adds	r4, r7, r0
 800079c:	0006      	movs	r6, r0
 800079e:	183b      	adds	r3, r7, r0
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff ff35 	bl	8000612 <xtime>
 80007a8:	0003      	movs	r3, r0
 80007aa:	7023      	strb	r3, [r4, #0]
 80007ac:	197b      	adds	r3, r7, r5
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	18d3      	adds	r3, r2, r3
 80007b6:	3302      	adds	r3, #2
 80007b8:	7819      	ldrb	r1, [r3, #0]
 80007ba:	0030      	movs	r0, r6
 80007bc:	183a      	adds	r2, r7, r0
 80007be:	230d      	movs	r3, #13
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4053      	eors	r3, r2
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	197b      	adds	r3, r7, r5
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	404a      	eors	r2, r1
 80007d0:	b2d1      	uxtb	r1, r2
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	18d3      	adds	r3, r2, r3
 80007d8:	3302      	adds	r3, #2
 80007da:	1c0a      	adds	r2, r1, #0
 80007dc:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80007de:	197b      	adds	r3, r7, r5
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	18d3      	adds	r3, r2, r3
 80007e8:	3303      	adds	r3, #3
 80007ea:	7819      	ldrb	r1, [r3, #0]
 80007ec:	183b      	adds	r3, r7, r0
 80007ee:	220e      	movs	r2, #14
 80007f0:	18ba      	adds	r2, r7, r2
 80007f2:	7812      	ldrb	r2, [r2, #0]
 80007f4:	404a      	eors	r2, r1
 80007f6:	701a      	strb	r2, [r3, #0]
 80007f8:	183c      	adds	r4, r7, r0
 80007fa:	0006      	movs	r6, r0
 80007fc:	183b      	adds	r3, r7, r0
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff ff06 	bl	8000612 <xtime>
 8000806:	0003      	movs	r3, r0
 8000808:	7023      	strb	r3, [r4, #0]
 800080a:	197b      	adds	r3, r7, r5
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	18d3      	adds	r3, r2, r3
 8000814:	3303      	adds	r3, #3
 8000816:	7819      	ldrb	r1, [r3, #0]
 8000818:	19ba      	adds	r2, r7, r6
 800081a:	230d      	movs	r3, #13
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	7812      	ldrb	r2, [r2, #0]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	4053      	eors	r3, r2
 8000824:	b2da      	uxtb	r2, r3
 8000826:	197b      	adds	r3, r7, r5
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	404a      	eors	r2, r1
 800082c:	b2d1      	uxtb	r1, r2
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	18d3      	adds	r3, r2, r3
 8000834:	3303      	adds	r3, #3
 8000836:	1c0a      	adds	r2, r1, #0
 8000838:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 800083a:	197b      	adds	r3, r7, r5
 800083c:	197a      	adds	r2, r7, r5
 800083e:	7812      	ldrb	r2, [r2, #0]
 8000840:	3201      	adds	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
 8000844:	230f      	movs	r3, #15
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b03      	cmp	r3, #3
 800084c:	d800      	bhi.n	8000850 <MixColumns+0x1fe>
 800084e:	e709      	b.n	8000664 <MixColumns+0x12>
  }
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b005      	add	sp, #20
 8000858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800085a <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 800085a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085c:	b085      	sub	sp, #20
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	e3bb      	b.n	8000fe0 <InvMixColumns+0x786>
  { 
    a = (*state)[i][0];
 8000868:	260b      	movs	r6, #11
 800086a:	19bb      	adds	r3, r7, r6
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	68f9      	ldr	r1, [r7, #12]
 8000870:	0089      	lsls	r1, r1, #2
 8000872:	5c8a      	ldrb	r2, [r1, r2]
 8000874:	701a      	strb	r2, [r3, #0]
    b = (*state)[i][1];
 8000876:	250a      	movs	r5, #10
 8000878:	197b      	adds	r3, r7, r5
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	188a      	adds	r2, r1, r2
 8000882:	3201      	adds	r2, #1
 8000884:	7812      	ldrb	r2, [r2, #0]
 8000886:	701a      	strb	r2, [r3, #0]
    c = (*state)[i][2];
 8000888:	2409      	movs	r4, #9
 800088a:	193b      	adds	r3, r7, r4
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	0092      	lsls	r2, r2, #2
 8000892:	188a      	adds	r2, r1, r2
 8000894:	3202      	adds	r2, #2
 8000896:	7812      	ldrb	r2, [r2, #0]
 8000898:	701a      	strb	r2, [r3, #0]
    d = (*state)[i][3];
 800089a:	2308      	movs	r3, #8
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	188a      	adds	r2, r1, r2
 80008a6:	3203      	adds	r2, #3
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	701a      	strb	r2, [r3, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 80008ac:	19bb      	adds	r3, r7, r6
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff feae 	bl	8000612 <xtime>
 80008b6:	0003      	movs	r3, r0
 80008b8:	0018      	movs	r0, r3
 80008ba:	f7ff feaa 	bl	8000612 <xtime>
 80008be:	0003      	movs	r3, r0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff fea6 	bl	8000612 <xtime>
 80008c6:	0003      	movs	r3, r0
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff fea2 	bl	8000612 <xtime>
 80008ce:	197b      	adds	r3, r7, r5
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff fe9d 	bl	8000612 <xtime>
 80008d8:	0003      	movs	r3, r0
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff fe99 	bl	8000612 <xtime>
 80008e0:	197b      	adds	r3, r7, r5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	0018      	movs	r0, r3
 80008e6:	f7ff fe94 	bl	8000612 <xtime>
 80008ea:	0003      	movs	r3, r0
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff fe90 	bl	8000612 <xtime>
 80008f2:	0003      	movs	r3, r0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff fe8c 	bl	8000612 <xtime>
 80008fa:	0003      	movs	r3, r0
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fe88 	bl	8000612 <xtime>
 8000902:	193b      	adds	r3, r7, r4
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff fe83 	bl	8000612 <xtime>
 800090c:	193b      	adds	r3, r7, r4
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff fe7e 	bl	8000612 <xtime>
 8000916:	0003      	movs	r3, r0
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff fe7a 	bl	8000612 <xtime>
 800091e:	0003      	movs	r3, r0
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff fe76 	bl	8000612 <xtime>
 8000926:	0003      	movs	r3, r0
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff fe72 	bl	8000612 <xtime>
 800092e:	2208      	movs	r2, #8
 8000930:	0014      	movs	r4, r2
 8000932:	18bb      	adds	r3, r7, r2
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff fe6b 	bl	8000612 <xtime>
 800093c:	193b      	adds	r3, r7, r4
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff fe66 	bl	8000612 <xtime>
 8000946:	0003      	movs	r3, r0
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff fe62 	bl	8000612 <xtime>
 800094e:	0022      	movs	r2, r4
 8000950:	18bb      	adds	r3, r7, r2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	0018      	movs	r0, r3
 8000956:	f7ff fe5c 	bl	8000612 <xtime>
 800095a:	0003      	movs	r3, r0
 800095c:	0018      	movs	r0, r3
 800095e:	f7ff fe58 	bl	8000612 <xtime>
 8000962:	0003      	movs	r3, r0
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff fe54 	bl	8000612 <xtime>
 800096a:	0003      	movs	r3, r0
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff fe50 	bl	8000612 <xtime>
 8000972:	19bb      	adds	r3, r7, r6
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff fe4b 	bl	8000612 <xtime>
 800097c:	0003      	movs	r3, r0
 800097e:	001c      	movs	r4, r3
 8000980:	19bb      	adds	r3, r7, r6
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff fe44 	bl	8000612 <xtime>
 800098a:	0003      	movs	r3, r0
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff fe40 	bl	8000612 <xtime>
 8000992:	0003      	movs	r3, r0
 8000994:	4063      	eors	r3, r4
 8000996:	b2dc      	uxtb	r4, r3
 8000998:	19bb      	adds	r3, r7, r6
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff fe38 	bl	8000612 <xtime>
 80009a2:	0003      	movs	r3, r0
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fe34 	bl	8000612 <xtime>
 80009aa:	0003      	movs	r3, r0
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff fe30 	bl	8000612 <xtime>
 80009b2:	0003      	movs	r3, r0
 80009b4:	4063      	eors	r3, r4
 80009b6:	b2dc      	uxtb	r4, r3
 80009b8:	197b      	adds	r3, r7, r5
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff fe28 	bl	8000612 <xtime>
 80009c2:	0003      	movs	r3, r0
 80009c4:	001a      	movs	r2, r3
 80009c6:	0029      	movs	r1, r5
 80009c8:	197b      	adds	r3, r7, r5
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4053      	eors	r3, r2
 80009ce:	b2dd      	uxtb	r5, r3
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff fe1c 	bl	8000612 <xtime>
 80009da:	0003      	movs	r3, r0
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff fe18 	bl	8000612 <xtime>
 80009e2:	0003      	movs	r3, r0
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff fe14 	bl	8000612 <xtime>
 80009ea:	0003      	movs	r3, r0
 80009ec:	406b      	eors	r3, r5
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	4063      	eors	r3, r4
 80009f2:	b2dc      	uxtb	r4, r3
 80009f4:	2309      	movs	r3, #9
 80009f6:	001d      	movs	r5, r3
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff fe08 	bl	8000612 <xtime>
 8000a02:	0003      	movs	r3, r0
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff fe04 	bl	8000612 <xtime>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	0028      	movs	r0, r5
 8000a10:	183b      	adds	r3, r7, r0
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4053      	eors	r3, r2
 8000a16:	b2dd      	uxtb	r5, r3
 8000a18:	183b      	adds	r3, r7, r0
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff fdf8 	bl	8000612 <xtime>
 8000a22:	0003      	movs	r3, r0
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff fdf4 	bl	8000612 <xtime>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff fdf0 	bl	8000612 <xtime>
 8000a32:	0003      	movs	r3, r0
 8000a34:	406b      	eors	r3, r5
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4063      	eors	r3, r4
 8000a3a:	b2dc      	uxtb	r4, r3
 8000a3c:	2208      	movs	r2, #8
 8000a3e:	0015      	movs	r5, r2
 8000a40:	18bb      	adds	r3, r7, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fde4 	bl	8000612 <xtime>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f7ff fde0 	bl	8000612 <xtime>
 8000a52:	0003      	movs	r3, r0
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff fddc 	bl	8000612 <xtime>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	002b      	movs	r3, r5
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4053      	eors	r3, r2
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	4063      	eors	r3, r4
 8000a6a:	b2d9      	uxtb	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	54d1      	strb	r1, [r2, r3]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 8000a74:	19bb      	adds	r3, r7, r6
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff fdca 	bl	8000612 <xtime>
 8000a7e:	19bb      	adds	r3, r7, r6
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff fdc5 	bl	8000612 <xtime>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f7ff fdc1 	bl	8000612 <xtime>
 8000a90:	19bb      	adds	r3, r7, r6
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff fdbc 	bl	8000612 <xtime>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff fdb8 	bl	8000612 <xtime>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff fdb4 	bl	8000612 <xtime>
 8000aaa:	0003      	movs	r3, r0
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff fdb0 	bl	8000612 <xtime>
 8000ab2:	250a      	movs	r5, #10
 8000ab4:	197b      	adds	r3, r7, r5
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff fdaa 	bl	8000612 <xtime>
 8000abe:	0003      	movs	r3, r0
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f7ff fda6 	bl	8000612 <xtime>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff fda2 	bl	8000612 <xtime>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff fd9e 	bl	8000612 <xtime>
 8000ad6:	2409      	movs	r4, #9
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff fd98 	bl	8000612 <xtime>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff fd94 	bl	8000612 <xtime>
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0018      	movs	r0, r3
 8000af0:	f7ff fd8f 	bl	8000612 <xtime>
 8000af4:	0003      	movs	r3, r0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f7ff fd8b 	bl	8000612 <xtime>
 8000afc:	0003      	movs	r3, r0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f7ff fd87 	bl	8000612 <xtime>
 8000b04:	0003      	movs	r3, r0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff fd83 	bl	8000612 <xtime>
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	001c      	movs	r4, r3
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fd7c 	bl	8000612 <xtime>
 8000b1a:	0023      	movs	r3, r4
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff fd76 	bl	8000612 <xtime>
 8000b26:	0003      	movs	r3, r0
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff fd72 	bl	8000612 <xtime>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff fd6e 	bl	8000612 <xtime>
 8000b36:	0003      	movs	r3, r0
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fd6a 	bl	8000612 <xtime>
 8000b3e:	19bb      	adds	r3, r7, r6
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	0018      	movs	r0, r3
 8000b44:	f7ff fd65 	bl	8000612 <xtime>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fd61 	bl	8000612 <xtime>
 8000b50:	0003      	movs	r3, r0
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff fd5d 	bl	8000612 <xtime>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	19bb      	adds	r3, r7, r6
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4053      	eors	r3, r2
 8000b62:	b2dc      	uxtb	r4, r3
 8000b64:	197b      	adds	r3, r7, r5
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f7ff fd52 	bl	8000612 <xtime>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	001d      	movs	r5, r3
 8000b72:	230a      	movs	r3, #10
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff fd4a 	bl	8000612 <xtime>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff fd46 	bl	8000612 <xtime>
 8000b86:	0003      	movs	r3, r0
 8000b88:	406b      	eors	r3, r5
 8000b8a:	b2dd      	uxtb	r5, r3
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff fd3d 	bl	8000612 <xtime>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff fd39 	bl	8000612 <xtime>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff fd35 	bl	8000612 <xtime>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	406b      	eors	r3, r5
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4063      	eors	r3, r4
 8000bb0:	b2dc      	uxtb	r4, r3
 8000bb2:	2209      	movs	r2, #9
 8000bb4:	0015      	movs	r5, r2
 8000bb6:	18bb      	adds	r3, r7, r2
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff fd29 	bl	8000612 <xtime>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	0029      	movs	r1, r5
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4053      	eors	r3, r2
 8000bcc:	b2dd      	uxtb	r5, r3
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff fd1d 	bl	8000612 <xtime>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff fd19 	bl	8000612 <xtime>
 8000be0:	0003      	movs	r3, r0
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fd15 	bl	8000612 <xtime>
 8000be8:	0003      	movs	r3, r0
 8000bea:	406b      	eors	r3, r5
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4063      	eors	r3, r4
 8000bf0:	b2dc      	uxtb	r4, r3
 8000bf2:	2208      	movs	r2, #8
 8000bf4:	0015      	movs	r5, r2
 8000bf6:	18bb      	adds	r3, r7, r2
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fd09 	bl	8000612 <xtime>
 8000c00:	0003      	movs	r3, r0
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff fd05 	bl	8000612 <xtime>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	001a      	movs	r2, r3
 8000c0c:	0028      	movs	r0, r5
 8000c0e:	183b      	adds	r3, r7, r0
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4053      	eors	r3, r2
 8000c14:	b2dd      	uxtb	r5, r3
 8000c16:	183b      	adds	r3, r7, r0
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff fcf9 	bl	8000612 <xtime>
 8000c20:	0003      	movs	r3, r0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff fcf5 	bl	8000612 <xtime>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fcf1 	bl	8000612 <xtime>
 8000c30:	0003      	movs	r3, r0
 8000c32:	406b      	eors	r3, r5
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4063      	eors	r3, r4
 8000c38:	b2d9      	uxtb	r1, r3
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	3301      	adds	r3, #1
 8000c44:	1c0a      	adds	r2, r1, #0
 8000c46:	701a      	strb	r2, [r3, #0]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8000c48:	19bb      	adds	r3, r7, r6
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fce0 	bl	8000612 <xtime>
 8000c52:	19bb      	adds	r3, r7, r6
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	0018      	movs	r0, r3
 8000c58:	f7ff fcdb 	bl	8000612 <xtime>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff fcd7 	bl	8000612 <xtime>
 8000c64:	0003      	movs	r3, r0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff fcd3 	bl	8000612 <xtime>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff fccf 	bl	8000612 <xtime>
 8000c74:	250a      	movs	r5, #10
 8000c76:	197b      	adds	r3, r7, r5
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fcc9 	bl	8000612 <xtime>
 8000c80:	197b      	adds	r3, r7, r5
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff fcc4 	bl	8000612 <xtime>
 8000c8a:	0003      	movs	r3, r0
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff fcc0 	bl	8000612 <xtime>
 8000c92:	197b      	adds	r3, r7, r5
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fcbb 	bl	8000612 <xtime>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fcb7 	bl	8000612 <xtime>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff fcb3 	bl	8000612 <xtime>
 8000cac:	0003      	movs	r3, r0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fcaf 	bl	8000612 <xtime>
 8000cb4:	2109      	movs	r1, #9
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff fca9 	bl	8000612 <xtime>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fca5 	bl	8000612 <xtime>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff fca1 	bl	8000612 <xtime>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fc9d 	bl	8000612 <xtime>
 8000cd8:	2408      	movs	r4, #8
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f7ff fc97 	bl	8000612 <xtime>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fc93 	bl	8000612 <xtime>
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fc8e 	bl	8000612 <xtime>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff fc8a 	bl	8000612 <xtime>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fc86 	bl	8000612 <xtime>
 8000d06:	0003      	movs	r3, r0
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff fc82 	bl	8000612 <xtime>
 8000d0e:	19bb      	adds	r3, r7, r6
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff fc7d 	bl	8000612 <xtime>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff fc79 	bl	8000612 <xtime>
 8000d20:	0003      	movs	r3, r0
 8000d22:	001a      	movs	r2, r3
 8000d24:	19bb      	adds	r3, r7, r6
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4053      	eors	r3, r2
 8000d2a:	b2dc      	uxtb	r4, r3
 8000d2c:	19bb      	adds	r3, r7, r6
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff fc6e 	bl	8000612 <xtime>
 8000d36:	0003      	movs	r3, r0
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff fc6a 	bl	8000612 <xtime>
 8000d3e:	0003      	movs	r3, r0
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff fc66 	bl	8000612 <xtime>
 8000d46:	0003      	movs	r3, r0
 8000d48:	4063      	eors	r3, r4
 8000d4a:	b2dc      	uxtb	r4, r3
 8000d4c:	197b      	adds	r3, r7, r5
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fc5e 	bl	8000612 <xtime>
 8000d56:	0003      	movs	r3, r0
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff fc5a 	bl	8000612 <xtime>
 8000d5e:	0003      	movs	r3, r0
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff fc56 	bl	8000612 <xtime>
 8000d66:	0003      	movs	r3, r0
 8000d68:	001a      	movs	r2, r3
 8000d6a:	197b      	adds	r3, r7, r5
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4053      	eors	r3, r2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4063      	eors	r3, r4
 8000d74:	b2dc      	uxtb	r4, r3
 8000d76:	2109      	movs	r1, #9
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff fc48 	bl	8000612 <xtime>
 8000d82:	0003      	movs	r3, r0
 8000d84:	001d      	movs	r5, r3
 8000d86:	2109      	movs	r1, #9
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fc40 	bl	8000612 <xtime>
 8000d92:	0003      	movs	r3, r0
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff fc3c 	bl	8000612 <xtime>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	406b      	eors	r3, r5
 8000d9e:	b2dd      	uxtb	r5, r3
 8000da0:	2109      	movs	r1, #9
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff fc33 	bl	8000612 <xtime>
 8000dac:	0003      	movs	r3, r0
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff fc2f 	bl	8000612 <xtime>
 8000db4:	0003      	movs	r3, r0
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff fc2b 	bl	8000612 <xtime>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	406b      	eors	r3, r5
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4063      	eors	r3, r4
 8000dc4:	b2dc      	uxtb	r4, r3
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	001d      	movs	r5, r3
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff fc1f 	bl	8000612 <xtime>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	001a      	movs	r2, r3
 8000dd8:	0028      	movs	r0, r5
 8000dda:	183b      	adds	r3, r7, r0
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4053      	eors	r3, r2
 8000de0:	b2dd      	uxtb	r5, r3
 8000de2:	183b      	adds	r3, r7, r0
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	0018      	movs	r0, r3
 8000de8:	f7ff fc13 	bl	8000612 <xtime>
 8000dec:	0003      	movs	r3, r0
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff fc0f 	bl	8000612 <xtime>
 8000df4:	0003      	movs	r3, r0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff fc0b 	bl	8000612 <xtime>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	406b      	eors	r3, r5
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4063      	eors	r3, r4
 8000e04:	b2d9      	uxtb	r1, r3
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	3302      	adds	r3, #2
 8000e10:	1c0a      	adds	r2, r1, #0
 8000e12:	701a      	strb	r2, [r3, #0]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8000e14:	19bb      	adds	r3, r7, r6
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff fbfa 	bl	8000612 <xtime>
 8000e1e:	0003      	movs	r3, r0
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff fbf6 	bl	8000612 <xtime>
 8000e26:	19bb      	adds	r3, r7, r6
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff fbf1 	bl	8000612 <xtime>
 8000e30:	0003      	movs	r3, r0
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff fbed 	bl	8000612 <xtime>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff fbe9 	bl	8000612 <xtime>
 8000e40:	0003      	movs	r3, r0
 8000e42:	0018      	movs	r0, r3
 8000e44:	f7ff fbe5 	bl	8000612 <xtime>
 8000e48:	250a      	movs	r5, #10
 8000e4a:	197b      	adds	r3, r7, r5
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff fbdf 	bl	8000612 <xtime>
 8000e54:	197b      	adds	r3, r7, r5
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fbda 	bl	8000612 <xtime>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff fbd6 	bl	8000612 <xtime>
 8000e66:	0003      	movs	r3, r0
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f7ff fbd2 	bl	8000612 <xtime>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff fbce 	bl	8000612 <xtime>
 8000e76:	2409      	movs	r4, #9
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f7ff fbc8 	bl	8000612 <xtime>
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	f7ff fbc3 	bl	8000612 <xtime>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff fbbf 	bl	8000612 <xtime>
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff fbba 	bl	8000612 <xtime>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f7ff fbb6 	bl	8000612 <xtime>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff fbb2 	bl	8000612 <xtime>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff fbae 	bl	8000612 <xtime>
 8000eb6:	2008      	movs	r0, #8
 8000eb8:	183b      	adds	r3, r7, r0
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff fba8 	bl	8000612 <xtime>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff fba4 	bl	8000612 <xtime>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff fba0 	bl	8000612 <xtime>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f7ff fb9c 	bl	8000612 <xtime>
 8000eda:	19bb      	adds	r3, r7, r6
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff fb97 	bl	8000612 <xtime>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	19bb      	adds	r3, r7, r6
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4053      	eors	r3, r2
 8000eee:	b2dc      	uxtb	r4, r3
 8000ef0:	19bb      	adds	r3, r7, r6
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f7ff fb8c 	bl	8000612 <xtime>
 8000efa:	0003      	movs	r3, r0
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff fb88 	bl	8000612 <xtime>
 8000f02:	0003      	movs	r3, r0
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff fb84 	bl	8000612 <xtime>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	4063      	eors	r3, r4
 8000f0e:	b2dc      	uxtb	r4, r3
 8000f10:	197b      	adds	r3, r7, r5
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff fb7c 	bl	8000612 <xtime>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff fb78 	bl	8000612 <xtime>
 8000f22:	0003      	movs	r3, r0
 8000f24:	001a      	movs	r2, r3
 8000f26:	0029      	movs	r1, r5
 8000f28:	197b      	adds	r3, r7, r5
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4053      	eors	r3, r2
 8000f2e:	b2dd      	uxtb	r5, r3
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff fb6c 	bl	8000612 <xtime>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff fb68 	bl	8000612 <xtime>
 8000f42:	0003      	movs	r3, r0
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff fb64 	bl	8000612 <xtime>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	406b      	eors	r3, r5
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4063      	eors	r3, r4
 8000f52:	b2dc      	uxtb	r4, r3
 8000f54:	2509      	movs	r5, #9
 8000f56:	197b      	adds	r3, r7, r5
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff fb59 	bl	8000612 <xtime>
 8000f60:	0003      	movs	r3, r0
 8000f62:	0018      	movs	r0, r3
 8000f64:	f7ff fb55 	bl	8000612 <xtime>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff fb51 	bl	8000612 <xtime>
 8000f70:	0003      	movs	r3, r0
 8000f72:	001a      	movs	r2, r3
 8000f74:	197b      	adds	r3, r7, r5
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4053      	eors	r3, r2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4063      	eors	r3, r4
 8000f7e:	b2dc      	uxtb	r4, r3
 8000f80:	2608      	movs	r6, #8
 8000f82:	19bb      	adds	r3, r7, r6
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff fb43 	bl	8000612 <xtime>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	001d      	movs	r5, r3
 8000f90:	19bb      	adds	r3, r7, r6
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff fb3c 	bl	8000612 <xtime>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff fb38 	bl	8000612 <xtime>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	406b      	eors	r3, r5
 8000fa6:	b2dd      	uxtb	r5, r3
 8000fa8:	19bb      	adds	r3, r7, r6
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff fb30 	bl	8000612 <xtime>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff fb2c 	bl	8000612 <xtime>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff fb28 	bl	8000612 <xtime>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	406b      	eors	r3, r5
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4063      	eors	r3, r4
 8000fca:	b2d9      	uxtb	r1, r3
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	18d3      	adds	r3, r2, r3
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	1c0a      	adds	r2, r1, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	dc00      	bgt.n	8000fe8 <InvMixColumns+0x78e>
 8000fe6:	e43f      	b.n	8000868 <InvMixColumns+0xe>
  }
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b005      	add	sp, #20
 8000ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000ff4 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e02a      	b.n	800105c <InvSubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 8001006:	230e      	movs	r3, #14
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
 800100e:	e01a      	b.n	8001046 <InvSubBytes+0x52>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8001010:	240e      	movs	r4, #14
 8001012:	193b      	adds	r3, r7, r4
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	250f      	movs	r5, #15
 8001018:	197b      	adds	r3, r7, r5
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	188a      	adds	r2, r1, r2
 8001022:	5cd3      	ldrb	r3, [r2, r3]
 8001024:	0018      	movs	r0, r3
 8001026:	193b      	adds	r3, r7, r4
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	197b      	adds	r3, r7, r5
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4910      	ldr	r1, [pc, #64]	; (8001070 <InvSubBytes+0x7c>)
 8001030:	5c08      	ldrb	r0, [r1, r0]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	188a      	adds	r2, r1, r2
 8001038:	1c01      	adds	r1, r0, #0
 800103a:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 800103c:	193b      	adds	r3, r7, r4
 800103e:	193a      	adds	r2, r7, r4
 8001040:	7812      	ldrb	r2, [r2, #0]
 8001042:	3201      	adds	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	230e      	movs	r3, #14
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b03      	cmp	r3, #3
 800104e:	d9df      	bls.n	8001010 <InvSubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 8001050:	220f      	movs	r2, #15
 8001052:	18bb      	adds	r3, r7, r2
 8001054:	18ba      	adds	r2, r7, r2
 8001056:	7812      	ldrb	r2, [r2, #0]
 8001058:	3201      	adds	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	230f      	movs	r3, #15
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d9cf      	bls.n	8001006 <InvSubBytes+0x12>
    }
  }
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b004      	add	sp, #16
 800106e:	bdb0      	pop	{r4, r5, r7, pc}
 8001070:	08003044 	.word	0x08003044

08001074 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 800107c:	210f      	movs	r1, #15
 800107e:	187b      	adds	r3, r7, r1
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	7b52      	ldrb	r2, [r2, #13]
 8001084:	701a      	strb	r2, [r3, #0]
  (*state)[3][1] = (*state)[2][1];
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7a5a      	ldrb	r2, [r3, #9]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	795a      	ldrb	r2, [r3, #5]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	785a      	ldrb	r2, [r3, #1]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	187a      	adds	r2, r7, r1
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	7892      	ldrb	r2, [r2, #2]
 80010ac:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7a9a      	ldrb	r2, [r3, #10]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	187a      	adds	r2, r7, r1
 80010ba:	7812      	ldrb	r2, [r2, #0]
 80010bc:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	7992      	ldrb	r2, [r2, #6]
 80010c4:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7b9a      	ldrb	r2, [r3, #14]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	187a      	adds	r2, r7, r1
 80010d2:	7812      	ldrb	r2, [r2, #0]
 80010d4:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	78d2      	ldrb	r2, [r2, #3]
 80010dc:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[1][3];
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	79da      	ldrb	r2, [r3, #7]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7ada      	ldrb	r2, [r3, #11]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7bda      	ldrb	r2, [r3, #15]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	187a      	adds	r2, r7, r1
 80010fa:	7812      	ldrb	r2, [r2, #0]
 80010fc:	73da      	strb	r2, [r3, #15]
}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	b004      	add	sp, #16
 8001104:	bd80      	pop	{r7, pc}

08001106 <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8001106:	b590      	push	{r4, r7, lr}
 8001108:	b085      	sub	sp, #20
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8001110:	240f      	movs	r4, #15
 8001112:	193b      	adds	r3, r7, r4
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	0019      	movs	r1, r3
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff f99c 	bl	800045c <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8001124:	193b      	adds	r3, r7, r4
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
  {
    SubBytes(state);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff f9e7 	bl	8000500 <SubBytes>
    ShiftRows(state);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff fa23 	bl	8000580 <ShiftRows>
    if (round == Nr) {
 800113a:	240f      	movs	r4, #15
 800113c:	193b      	adds	r3, r7, r4
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b0a      	cmp	r3, #10
 8001142:	d010      	beq.n	8001166 <Cipher+0x60>
      break;
    }
    MixColumns(state);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	0018      	movs	r0, r3
 8001148:	f7ff fa83 	bl	8000652 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	193b      	adds	r3, r7, r4
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff f981 	bl	800045c <AddRoundKey>
  for (round = 1; ; ++round)
 800115a:	193b      	adds	r3, r7, r4
 800115c:	193a      	adds	r2, r7, r4
 800115e:	7812      	ldrb	r2, [r2, #0]
 8001160:	3201      	adds	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
    SubBytes(state);
 8001164:	e7e1      	b.n	800112a <Cipher+0x24>
      break;
 8001166:	46c0      	nop			; (mov r8, r8)
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	0019      	movs	r1, r3
 800116e:	200a      	movs	r0, #10
 8001170:	f7ff f974 	bl	800045c <AddRoundKey>
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	b005      	add	sp, #20
 800117a:	bd90      	pop	{r4, r7, pc}

0800117c <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8001186:	240f      	movs	r4, #15
 8001188:	193b      	adds	r3, r7, r4
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	0019      	movs	r1, r3
 8001194:	200a      	movs	r0, #10
 8001196:	f7ff f961 	bl	800045c <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 800119a:	193b      	adds	r3, r7, r4
 800119c:	2209      	movs	r2, #9
 800119e:	701a      	strb	r2, [r3, #0]
  {
    InvShiftRows(state);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff ff66 	bl	8001074 <InvShiftRows>
    InvSubBytes(state);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7ff ff22 	bl	8000ff4 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	240f      	movs	r4, #15
 80011b6:	193b      	adds	r3, r7, r4
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff f94e 	bl	800045c <AddRoundKey>
    if (round == 0) {
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d009      	beq.n	80011dc <InvCipher+0x60>
      break;
    }
    InvMixColumns(state);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff fb45 	bl	800085a <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	193a      	adds	r2, r7, r4
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	3a01      	subs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
    InvShiftRows(state);
 80011da:	e7e1      	b.n	80011a0 <InvCipher+0x24>
      break;
 80011dc:	46c0      	nop			; (mov r8, r8)
  }

}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b005      	add	sp, #20
 80011e4:	bd90      	pop	{r4, r7, pc}

080011e6 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	0011      	movs	r1, r2
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff ff85 	bl	8001106 <Cipher>
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}

08001204 <AES_ECB_decrypt>:

void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	0011      	movs	r1, r2
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff ffb1 	bl	800117c <InvCipher>
}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	b002      	add	sp, #8
 8001220:	bd80      	pop	{r7, pc}

08001222 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
 8001222:	b590      	push	{r4, r7, lr}
 8001224:	b085      	sub	sp, #20
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 800122c:	230f      	movs	r3, #15
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e016      	b.n	8001264 <XorWithIv+0x42>
  {
    buf[i] ^= Iv[i];
 8001236:	240f      	movs	r4, #15
 8001238:	193b      	adds	r3, r7, r4
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	18d3      	adds	r3, r2, r3
 8001240:	7819      	ldrb	r1, [r3, #0]
 8001242:	193b      	adds	r3, r7, r4
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	18d3      	adds	r3, r2, r3
 800124a:	781a      	ldrb	r2, [r3, #0]
 800124c:	193b      	adds	r3, r7, r4
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	18c3      	adds	r3, r0, r3
 8001254:	404a      	eors	r2, r1
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 800125a:	193b      	adds	r3, r7, r4
 800125c:	193a      	adds	r2, r7, r4
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	3201      	adds	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	230f      	movs	r3, #15
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b0f      	cmp	r3, #15
 800126c:	d9e3      	bls.n	8001236 <XorWithIv+0x14>
  }
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b005      	add	sp, #20
 8001276:	bd90      	pop	{r4, r7, pc}

08001278 <AES_CBC_encrypt_buffer>:

void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, uint8_t* buf, size_t length)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t *Iv = ctx->Iv;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	33b0      	adds	r3, #176	; 0xb0
 8001288:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e013      	b.n	80012b8 <AES_CBC_encrypt_buffer+0x40>
  {
    XorWithIv(buf, Iv);
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	0011      	movs	r1, r2
 8001296:	0018      	movs	r0, r3
 8001298:	f7ff ffc3 	bl	8001222 <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	0011      	movs	r1, r2
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff ff2f 	bl	8001106 <Cipher>
    Iv = buf;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	3310      	adds	r3, #16
 80012b0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3310      	adds	r3, #16
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d3e7      	bcc.n	8001290 <AES_CBC_encrypt_buffer+0x18>
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	33b0      	adds	r3, #176	; 0xb0
 80012c4:	6939      	ldr	r1, [r7, #16]
 80012c6:	2210      	movs	r2, #16
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 fc7f 	bl	8001bcc <memcpy>
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b006      	add	sp, #24
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <AES_CBC_decrypt_buffer>:

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 80012d6:	b590      	push	{r4, r7, lr}
 80012d8:	b08b      	sub	sp, #44	; 0x2c
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
 80012e6:	e026      	b.n	8001336 <AES_CBC_decrypt_buffer+0x60>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 80012e8:	2414      	movs	r4, #20
 80012ea:	193a      	adds	r2, r7, r4
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	0010      	movs	r0, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	2310      	movs	r3, #16
 80012f4:	001a      	movs	r2, r3
 80012f6:	f000 fc69 	bl	8001bcc <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	0011      	movs	r1, r2
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff ff3b 	bl	800117c <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	33b0      	adds	r3, #176	; 0xb0
 800130a:	001a      	movs	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff86 	bl	8001222 <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	33b0      	adds	r3, #176	; 0xb0
 800131a:	001a      	movs	r2, r3
 800131c:	193b      	adds	r3, r7, r4
 800131e:	0010      	movs	r0, r2
 8001320:	0019      	movs	r1, r3
 8001322:	2310      	movs	r3, #16
 8001324:	001a      	movs	r2, r3
 8001326:	f000 fc51 	bl	8001bcc <memcpy>
    buf += AES_BLOCKLEN;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3310      	adds	r3, #16
 800132e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	3310      	adds	r3, #16
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	429a      	cmp	r2, r3
 800133c:	d3d4      	bcc.n	80012e8 <AES_CBC_decrypt_buffer+0x12>
  }

}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b00b      	add	sp, #44	; 0x2c
 8001346:	bd90      	pop	{r4, r7, pc}

08001348 <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b08b      	sub	sp, #44	; 0x2c
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  uint8_t buffer[AES_BLOCKLEN];
  
  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
 8001358:	2310      	movs	r3, #16
 800135a:	623b      	str	r3, [r7, #32]
 800135c:	e052      	b.n	8001404 <AES_CTR_xcrypt_buffer+0xbc>
  {
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	2b10      	cmp	r3, #16
 8001362:	d13a      	bne.n	80013da <AES_CTR_xcrypt_buffer+0x92>
    {
      
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	33b0      	adds	r3, #176	; 0xb0
 8001368:	2410      	movs	r4, #16
 800136a:	193a      	adds	r2, r7, r4
 800136c:	0010      	movs	r0, r2
 800136e:	0019      	movs	r1, r3
 8001370:	2310      	movs	r3, #16
 8001372:	001a      	movs	r2, r3
 8001374:	f000 fc2a 	bl	8001bcc <memcpy>
      Cipher((state_t*)buffer,ctx->RoundKey);
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	193b      	adds	r3, r7, r4
 800137c:	0011      	movs	r1, r2
 800137e:	0018      	movs	r0, r3
 8001380:	f7ff fec1 	bl	8001106 <Cipher>

      /* Increment Iv and handle overflow */
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8001384:	230f      	movs	r3, #15
 8001386:	623b      	str	r3, [r7, #32]
 8001388:	e022      	b.n	80013d0 <AES_CTR_xcrypt_buffer+0x88>
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	21b0      	movs	r1, #176	; 0xb0
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	185b      	adds	r3, r3, r1
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2bff      	cmp	r3, #255	; 0xff
 8001398:	d10a      	bne.n	80013b0 <AES_CTR_xcrypt_buffer+0x68>
	{
          ctx->Iv[bi] = 0;
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	21b0      	movs	r1, #176	; 0xb0
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	185b      	adds	r3, r3, r1
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
 80013ae:	e00f      	b.n	80013d0 <AES_CTR_xcrypt_buffer+0x88>
          continue;
        } 
        ctx->Iv[bi] += 1;
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	21b0      	movs	r1, #176	; 0xb0
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	18d3      	adds	r3, r2, r3
 80013b8:	185b      	adds	r3, r3, r1
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	b2d8      	uxtb	r0, r3
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	21b0      	movs	r1, #176	; 0xb0
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	18d3      	adds	r3, r2, r3
 80013c8:	185b      	adds	r3, r3, r1
 80013ca:	1c02      	adds	r2, r0, #0
 80013cc:	701a      	strb	r2, [r3, #0]
        break;   
 80013ce:	e002      	b.n	80013d6 <AES_CTR_xcrypt_buffer+0x8e>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dad9      	bge.n	800138a <AES_CTR_xcrypt_buffer+0x42>
      }
      bi = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	18d3      	adds	r3, r2, r3
 80013e0:	7819      	ldrb	r1, [r3, #0]
 80013e2:	2310      	movs	r3, #16
 80013e4:	18fa      	adds	r2, r7, r3
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	18d3      	adds	r3, r2, r3
 80013ea:	781a      	ldrb	r2, [r3, #0]
 80013ec:	68b8      	ldr	r0, [r7, #8]
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	18c3      	adds	r3, r0, r3
 80013f2:	404a      	eors	r2, r1
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	3301      	adds	r3, #1
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	3301      	adds	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
 8001404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3a8      	bcc.n	800135e <AES_CTR_xcrypt_buffer+0x16>
  }
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b00b      	add	sp, #44	; 0x2c
 8001414:	bd90      	pop	{r4, r7, pc}
	...

08001418 <phex>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
// prints string as hex
static void phex(uint8_t* str)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
#if defined(AES256)
    uint8_t len = 32;
#elif defined(AES192)
    uint8_t len = 24;
#elif defined(AES128)
    uint8_t len = 16;
 8001420:	230e      	movs	r3, #14
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	2210      	movs	r2, #16
 8001426:	701a      	strb	r2, [r3, #0]
#endif

    unsigned char i;
    for (i = 0; i < len; ++i)
 8001428:	230f      	movs	r3, #15
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e010      	b.n	8001454 <phex+0x3c>
        printf("%.2x", str[i]);
 8001432:	240f      	movs	r4, #15
 8001434:	193b      	adds	r3, r7, r4
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	18d3      	adds	r3, r2, r3
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	001a      	movs	r2, r3
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <phex+0x5c>)
 8001442:	0011      	movs	r1, r2
 8001444:	0018      	movs	r0, r3
 8001446:	f000 fbd3 	bl	8001bf0 <iprintf>
    for (i = 0; i < len; ++i)
 800144a:	193b      	adds	r3, r7, r4
 800144c:	193a      	adds	r2, r7, r4
 800144e:	7812      	ldrb	r2, [r2, #0]
 8001450:	3201      	adds	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	230f      	movs	r3, #15
 8001456:	18fa      	adds	r2, r7, r3
 8001458:	230e      	movs	r3, #14
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	7812      	ldrb	r2, [r2, #0]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d3e6      	bcc.n	8001432 <phex+0x1a>
    printf("\n");
 8001464:	200a      	movs	r0, #10
 8001466:	f000 fbdd 	bl	8001c24 <putchar>
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b005      	add	sp, #20
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	08002d6c 	.word	0x08002d6c

08001478 <test_encrypt_ecb_verbose>:

static void test_encrypt_ecb_verbose(void)
{
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b0c6      	sub	sp, #280	; 0x118
 800147c:	af00      	add	r7, sp, #0
    // Example of more verbose verification

    uint8_t i;

    // 128bit key
    uint8_t key[16] =        { (uint8_t) 0x2b, (uint8_t) 0x7e, (uint8_t) 0x15, (uint8_t) 0x16, (uint8_t) 0x28, (uint8_t) 0xae, (uint8_t) 0xd2, (uint8_t) 0xa6, (uint8_t) 0xab, (uint8_t) 0xf7, (uint8_t) 0x15, (uint8_t) 0x88, (uint8_t) 0x09, (uint8_t) 0xcf, (uint8_t) 0x4f, (uint8_t) 0x3c };
 800147e:	1d7b      	adds	r3, r7, #5
 8001480:	33ff      	adds	r3, #255	; 0xff
 8001482:	4a3d      	ldr	r2, [pc, #244]	; (8001578 <test_encrypt_ecb_verbose+0x100>)
 8001484:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001486:	c313      	stmia	r3!, {r0, r1, r4}
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	601a      	str	r2, [r3, #0]
    // 512bit text
    uint8_t plain_text[64] = { (uint8_t) 0x6b, (uint8_t) 0xc1, (uint8_t) 0xbe, (uint8_t) 0xe2, (uint8_t) 0x2e, (uint8_t) 0x40, (uint8_t) 0x9f, (uint8_t) 0x96, (uint8_t) 0xe9, (uint8_t) 0x3d, (uint8_t) 0x7e, (uint8_t) 0x11, (uint8_t) 0x73, (uint8_t) 0x93, (uint8_t) 0x17, (uint8_t) 0x2a,
 800148c:	23c4      	movs	r3, #196	; 0xc4
 800148e:	18fa      	adds	r2, r7, r3
 8001490:	4b3a      	ldr	r3, [pc, #232]	; (800157c <test_encrypt_ecb_verbose+0x104>)
 8001492:	0010      	movs	r0, r2
 8001494:	0019      	movs	r1, r3
 8001496:	2340      	movs	r3, #64	; 0x40
 8001498:	001a      	movs	r2, r3
 800149a:	f000 fb97 	bl	8001bcc <memcpy>
                               (uint8_t) 0xae, (uint8_t) 0x2d, (uint8_t) 0x8a, (uint8_t) 0x57, (uint8_t) 0x1e, (uint8_t) 0x03, (uint8_t) 0xac, (uint8_t) 0x9c, (uint8_t) 0x9e, (uint8_t) 0xb7, (uint8_t) 0x6f, (uint8_t) 0xac, (uint8_t) 0x45, (uint8_t) 0xaf, (uint8_t) 0x8e, (uint8_t) 0x51,
                               (uint8_t) 0x30, (uint8_t) 0xc8, (uint8_t) 0x1c, (uint8_t) 0x46, (uint8_t) 0xa3, (uint8_t) 0x5c, (uint8_t) 0xe4, (uint8_t) 0x11, (uint8_t) 0xe5, (uint8_t) 0xfb, (uint8_t) 0xc1, (uint8_t) 0x19, (uint8_t) 0x1a, (uint8_t) 0x0a, (uint8_t) 0x52, (uint8_t) 0xef,
                               (uint8_t) 0xf6, (uint8_t) 0x9f, (uint8_t) 0x24, (uint8_t) 0x45, (uint8_t) 0xdf, (uint8_t) 0x4f, (uint8_t) 0x9b, (uint8_t) 0x17, (uint8_t) 0xad, (uint8_t) 0x2b, (uint8_t) 0x41, (uint8_t) 0x7b, (uint8_t) 0xe6, (uint8_t) 0x6c, (uint8_t) 0x37, (uint8_t) 0x10 };

    // print text to encrypt, key and IV
    printf("ECB encrypt verbose:\n\n");
 800149e:	4b38      	ldr	r3, [pc, #224]	; (8001580 <test_encrypt_ecb_verbose+0x108>)
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 fc45 	bl	8001d30 <puts>
    printf("plain text:\n");
 80014a6:	4b37      	ldr	r3, [pc, #220]	; (8001584 <test_encrypt_ecb_verbose+0x10c>)
 80014a8:	0018      	movs	r0, r3
 80014aa:	f000 fc41 	bl	8001d30 <puts>
    for (i = (uint8_t) 0; i < (uint8_t) 4; ++i)
 80014ae:	2318      	movs	r3, #24
 80014b0:	33ff      	adds	r3, #255	; 0xff
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e010      	b.n	80014dc <test_encrypt_ecb_verbose+0x64>
    {
        phex(plain_text + i * (uint8_t) 16);
 80014ba:	2418      	movs	r4, #24
 80014bc:	34ff      	adds	r4, #255	; 0xff
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	001a      	movs	r2, r3
 80014c6:	23c4      	movs	r3, #196	; 0xc4
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	189b      	adds	r3, r3, r2
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff ffa3 	bl	8001418 <phex>
    for (i = (uint8_t) 0; i < (uint8_t) 4; ++i)
 80014d2:	193b      	adds	r3, r7, r4
 80014d4:	193a      	adds	r2, r7, r4
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	3201      	adds	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	2418      	movs	r4, #24
 80014de:	34ff      	adds	r4, #255	; 0xff
 80014e0:	193b      	adds	r3, r7, r4
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d9e8      	bls.n	80014ba <test_encrypt_ecb_verbose+0x42>
    }
    printf("\n");
 80014e8:	200a      	movs	r0, #10
 80014ea:	f000 fb9b 	bl	8001c24 <putchar>

    printf("key:\n");
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <test_encrypt_ecb_verbose+0x110>)
 80014f0:	0018      	movs	r0, r3
 80014f2:	f000 fc1d 	bl	8001d30 <puts>
    phex(key);
 80014f6:	1d7b      	adds	r3, r7, #5
 80014f8:	33ff      	adds	r3, #255	; 0xff
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7ff ff8c 	bl	8001418 <phex>
    printf("\n");
 8001500:	200a      	movs	r0, #10
 8001502:	f000 fb8f 	bl	8001c24 <putchar>

    // print the resulting cipher as 4 x 16 byte strings
    printf("ciphertext:\n");
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <test_encrypt_ecb_verbose+0x114>)
 8001508:	0018      	movs	r0, r3
 800150a:	f000 fc11 	bl	8001d30 <puts>

    struct AES_ctx ctx;
    AES_init_ctx(&ctx, key);
 800150e:	1d7a      	adds	r2, r7, #5
 8001510:	32ff      	adds	r2, #255	; 0xff
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	0011      	movs	r1, r2
 8001516:	0018      	movs	r0, r3
 8001518:	f7fe ff7a 	bl	8000410 <AES_init_ctx>

    for (i = 0; i < 4; ++i)
 800151c:	193b      	adds	r3, r7, r4
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	e01b      	b.n	800155c <test_encrypt_ecb_verbose+0xe4>
    {
      AES_ECB_encrypt(&ctx, plain_text + (i * 16));
 8001524:	2418      	movs	r4, #24
 8001526:	34ff      	adds	r4, #255	; 0xff
 8001528:	193b      	adds	r3, r7, r4
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	001a      	movs	r2, r3
 8001530:	25c4      	movs	r5, #196	; 0xc4
 8001532:	197b      	adds	r3, r7, r5
 8001534:	189a      	adds	r2, r3, r2
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	0011      	movs	r1, r2
 800153a:	0018      	movs	r0, r3
 800153c:	f7ff fe53 	bl	80011e6 <AES_ECB_encrypt>
      phex(plain_text + (i * 16));
 8001540:	193b      	adds	r3, r7, r4
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	001a      	movs	r2, r3
 8001548:	197b      	adds	r3, r7, r5
 800154a:	189b      	adds	r3, r3, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff ff63 	bl	8001418 <phex>
    for (i = 0; i < 4; ++i)
 8001552:	193b      	adds	r3, r7, r4
 8001554:	193a      	adds	r2, r7, r4
 8001556:	7812      	ldrb	r2, [r2, #0]
 8001558:	3201      	adds	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	2318      	movs	r3, #24
 800155e:	33ff      	adds	r3, #255	; 0xff
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d9dd      	bls.n	8001524 <test_encrypt_ecb_verbose+0xac>
    }
    printf("\n");
 8001568:	200a      	movs	r0, #10
 800156a:	f000 fb5b 	bl	8001c24 <putchar>
}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b046      	add	sp, #280	; 0x118
 8001574:	bdb0      	pop	{r4, r5, r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	08002dac 	.word	0x08002dac
 800157c:	08002dbc 	.word	0x08002dbc
 8001580:	08002d74 	.word	0x08002d74
 8001584:	08002d8c 	.word	0x08002d8c
 8001588:	08002d98 	.word	0x08002d98
 800158c:	08002da0 	.word	0x08002da0

08001590 <test_encrypt_ecb>:


static int test_encrypt_ecb(void)
{
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	b0bd      	sub	sp, #244	; 0xf4
 8001594:	af00      	add	r7, sp, #0
#elif defined(AES192)
    uint8_t key[] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
                      0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
    uint8_t out[] = { 0xbd, 0x33, 0x4f, 0x1d, 0x6e, 0x45, 0xf2, 0x5f, 0xf7, 0x12, 0xa2, 0x14, 0x57, 0x1f, 0xa5, 0xcc };
#elif defined(AES128)
    uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
 8001596:	21e0      	movs	r1, #224	; 0xe0
 8001598:	187b      	adds	r3, r7, r1
 800159a:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <test_encrypt_ecb+0x80>)
 800159c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800159e:	c331      	stmia	r3!, {r0, r4, r5}
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	601a      	str	r2, [r3, #0]
    uint8_t out[] = { 0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97 };
 80015a4:	25d0      	movs	r5, #208	; 0xd0
 80015a6:	197b      	adds	r3, r7, r5
 80015a8:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <test_encrypt_ecb+0x84>)
 80015aa:	ca51      	ldmia	r2!, {r0, r4, r6}
 80015ac:	c351      	stmia	r3!, {r0, r4, r6}
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	601a      	str	r2, [r3, #0]
#endif

    uint8_t in[]  = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
 80015b2:	24c0      	movs	r4, #192	; 0xc0
 80015b4:	193b      	adds	r3, r7, r4
 80015b6:	4a18      	ldr	r2, [pc, #96]	; (8001618 <test_encrypt_ecb+0x88>)
 80015b8:	ca43      	ldmia	r2!, {r0, r1, r6}
 80015ba:	c343      	stmia	r3!, {r0, r1, r6}
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	601a      	str	r2, [r3, #0]
    struct AES_ctx ctx;

    AES_init_ctx(&ctx, key);
 80015c0:	21e0      	movs	r1, #224	; 0xe0
 80015c2:	187a      	adds	r2, r7, r1
 80015c4:	003b      	movs	r3, r7
 80015c6:	0011      	movs	r1, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7fe ff21 	bl	8000410 <AES_init_ctx>
    AES_ECB_encrypt(&ctx, in);
 80015ce:	193a      	adds	r2, r7, r4
 80015d0:	003b      	movs	r3, r7
 80015d2:	0011      	movs	r1, r2
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff fe06 	bl	80011e6 <AES_ECB_encrypt>

    printf("ECB encrypt: ");
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <test_encrypt_ecb+0x8c>)
 80015dc:	0018      	movs	r0, r3
 80015de:	f000 fb07 	bl	8001bf0 <iprintf>

    if (0 == memcmp((char*) out, (char*) in, 16)) {
 80015e2:	1939      	adds	r1, r7, r4
 80015e4:	197b      	adds	r3, r7, r5
 80015e6:	2210      	movs	r2, #16
 80015e8:	0018      	movs	r0, r3
 80015ea:	f000 fae1 	bl	8001bb0 <memcmp>
 80015ee:	1e03      	subs	r3, r0, #0
 80015f0:	d105      	bne.n	80015fe <test_encrypt_ecb+0x6e>
        printf("SUCCESS!\n");
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <test_encrypt_ecb+0x90>)
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 fb9b 	bl	8001d30 <puts>
	return(0);
 80015fa:	2300      	movs	r3, #0
 80015fc:	e004      	b.n	8001608 <test_encrypt_ecb+0x78>
    } else {
        printf("FAILURE!\n");
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <test_encrypt_ecb+0x94>)
 8001600:	0018      	movs	r0, r3
 8001602:	f000 fb95 	bl	8001d30 <puts>
	return(1);
 8001606:	2301      	movs	r3, #1
    }
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b03d      	add	sp, #244	; 0xf4
 800160e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001610:	08002dac 	.word	0x08002dac
 8001614:	08002e24 	.word	0x08002e24
 8001618:	08002e34 	.word	0x08002e34
 800161c:	08002dfc 	.word	0x08002dfc
 8001620:	08002e0c 	.word	0x08002e0c
 8001624:	08002e18 	.word	0x08002e18

08001628 <test_decrypt_cbc>:

static int test_decrypt_cbc(void)
{
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	b0d9      	sub	sp, #356	; 0x164
 800162c:	af00      	add	r7, sp, #0
    uint8_t in[]  = { 0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71, 0xe8,
                      0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76, 0x3f, 0x69, 0x14, 0x5a,
                      0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9, 0xba, 0xac, 0x3d, 0xf1, 0x02, 0xe0,
                      0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81, 0xd9, 0x20, 0xa9, 0xe6, 0x4f, 0x56, 0x15, 0xcd };
#elif defined(AES128)
    uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
 800162e:	25a8      	movs	r5, #168	; 0xa8
 8001630:	006d      	lsls	r5, r5, #1
 8001632:	197b      	adds	r3, r7, r5
 8001634:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <test_decrypt_cbc+0x9c>)
 8001636:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001638:	c313      	stmia	r3!, {r0, r1, r4}
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	601a      	str	r2, [r3, #0]
    uint8_t in[]  = { 0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
 800163e:	2488      	movs	r4, #136	; 0x88
 8001640:	0064      	lsls	r4, r4, #1
 8001642:	193a      	adds	r2, r7, r4
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <test_decrypt_cbc+0xa0>)
 8001646:	0010      	movs	r0, r2
 8001648:	0019      	movs	r1, r3
 800164a:	2340      	movs	r3, #64	; 0x40
 800164c:	001a      	movs	r2, r3
 800164e:	f000 fabd 	bl	8001bcc <memcpy>
                      0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
                      0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
                      0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7 };
#endif
    uint8_t iv[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
 8001652:	1c7b      	adds	r3, r7, #1
 8001654:	33ff      	adds	r3, #255	; 0xff
 8001656:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <test_decrypt_cbc+0xa4>)
 8001658:	ca43      	ldmia	r2!, {r0, r1, r6}
 800165a:	c343      	stmia	r3!, {r0, r1, r6}
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	601a      	str	r2, [r3, #0]
    uint8_t out[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
 8001660:	26c0      	movs	r6, #192	; 0xc0
 8001662:	19ba      	adds	r2, r7, r6
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <test_decrypt_cbc+0xa8>)
 8001666:	0010      	movs	r0, r2
 8001668:	0019      	movs	r1, r3
 800166a:	2340      	movs	r3, #64	; 0x40
 800166c:	001a      	movs	r2, r3
 800166e:	f000 faad 	bl	8001bcc <memcpy>
                      0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
                      0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };
//  uint8_t buffer[64];
    struct AES_ctx ctx;

    AES_init_ctx_iv(&ctx, key, iv);
 8001672:	1c7a      	adds	r2, r7, #1
 8001674:	32ff      	adds	r2, #255	; 0xff
 8001676:	1979      	adds	r1, r7, r5
 8001678:	003b      	movs	r3, r7
 800167a:	0018      	movs	r0, r3
 800167c:	f7fe fed7 	bl	800042e <AES_init_ctx_iv>
    AES_CBC_decrypt_buffer(&ctx, in, 64);
 8001680:	1939      	adds	r1, r7, r4
 8001682:	003b      	movs	r3, r7
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff fe25 	bl	80012d6 <AES_CBC_decrypt_buffer>

    printf("CBC decrypt: ");
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <test_decrypt_cbc+0xac>)
 800168e:	0018      	movs	r0, r3
 8001690:	f000 faae 	bl	8001bf0 <iprintf>

    if (0 == memcmp((char*) out, (char*) in, 64)) {
 8001694:	1939      	adds	r1, r7, r4
 8001696:	19bb      	adds	r3, r7, r6
 8001698:	2240      	movs	r2, #64	; 0x40
 800169a:	0018      	movs	r0, r3
 800169c:	f000 fa88 	bl	8001bb0 <memcmp>
 80016a0:	1e03      	subs	r3, r0, #0
 80016a2:	d105      	bne.n	80016b0 <test_decrypt_cbc+0x88>
        printf("SUCCESS!\n");
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <test_decrypt_cbc+0xb0>)
 80016a6:	0018      	movs	r0, r3
 80016a8:	f000 fb42 	bl	8001d30 <puts>
	return(0);
 80016ac:	2300      	movs	r3, #0
 80016ae:	e004      	b.n	80016ba <test_decrypt_cbc+0x92>
    } else {
        printf("FAILURE!\n");
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <test_decrypt_cbc+0xb4>)
 80016b2:	0018      	movs	r0, r3
 80016b4:	f000 fb3c 	bl	8001d30 <puts>
	return(1);
 80016b8:	2301      	movs	r3, #1
    }
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b059      	add	sp, #356	; 0x164
 80016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	08002dac 	.word	0x08002dac
 80016c8:	08002e54 	.word	0x08002e54
 80016cc:	08002e94 	.word	0x08002e94
 80016d0:	08002dbc 	.word	0x08002dbc
 80016d4:	08002e44 	.word	0x08002e44
 80016d8:	08002e0c 	.word	0x08002e0c
 80016dc:	08002e18 	.word	0x08002e18

080016e0 <test_encrypt_cbc>:

static int test_encrypt_cbc(void)
{
 80016e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e2:	b0d9      	sub	sp, #356	; 0x164
 80016e4:	af00      	add	r7, sp, #0
    uint8_t out[] = { 0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0, 0x71, 0xe8,
                      0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76, 0x3f, 0x69, 0x14, 0x5a,
                      0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9, 0xba, 0xac, 0x3d, 0xf1, 0x02, 0xe0,
                      0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81, 0xd9, 0x20, 0xa9, 0xe6, 0x4f, 0x56, 0x15, 0xcd };
#elif defined(AES128)
    uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
 80016e6:	25a8      	movs	r5, #168	; 0xa8
 80016e8:	006d      	lsls	r5, r5, #1
 80016ea:	197b      	adds	r3, r7, r5
 80016ec:	4a23      	ldr	r2, [pc, #140]	; (800177c <test_encrypt_cbc+0x9c>)
 80016ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016f0:	c313      	stmia	r3!, {r0, r1, r4}
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	601a      	str	r2, [r3, #0]
    uint8_t out[] = { 0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
 80016f6:	2688      	movs	r6, #136	; 0x88
 80016f8:	0076      	lsls	r6, r6, #1
 80016fa:	19ba      	adds	r2, r7, r6
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <test_encrypt_cbc+0xa0>)
 80016fe:	0010      	movs	r0, r2
 8001700:	0019      	movs	r1, r3
 8001702:	2340      	movs	r3, #64	; 0x40
 8001704:	001a      	movs	r2, r3
 8001706:	f000 fa61 	bl	8001bcc <memcpy>
                      0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
                      0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
                      0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7 };
#endif
    uint8_t iv[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
 800170a:	1c7b      	adds	r3, r7, #1
 800170c:	33ff      	adds	r3, #255	; 0xff
 800170e:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <test_encrypt_cbc+0xa4>)
 8001710:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001712:	c313      	stmia	r3!, {r0, r1, r4}
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	601a      	str	r2, [r3, #0]
    uint8_t in[]  = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
 8001718:	24c0      	movs	r4, #192	; 0xc0
 800171a:	193a      	adds	r2, r7, r4
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <test_encrypt_cbc+0xa8>)
 800171e:	0010      	movs	r0, r2
 8001720:	0019      	movs	r1, r3
 8001722:	2340      	movs	r3, #64	; 0x40
 8001724:	001a      	movs	r2, r3
 8001726:	f000 fa51 	bl	8001bcc <memcpy>
                      0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
                      0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
                      0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };
    struct AES_ctx ctx;

    AES_init_ctx_iv(&ctx, key, iv);
 800172a:	1c7a      	adds	r2, r7, #1
 800172c:	32ff      	adds	r2, #255	; 0xff
 800172e:	1979      	adds	r1, r7, r5
 8001730:	003b      	movs	r3, r7
 8001732:	0018      	movs	r0, r3
 8001734:	f7fe fe7b 	bl	800042e <AES_init_ctx_iv>
    AES_CBC_encrypt_buffer(&ctx, in, 64);
 8001738:	1939      	adds	r1, r7, r4
 800173a:	003b      	movs	r3, r7
 800173c:	2240      	movs	r2, #64	; 0x40
 800173e:	0018      	movs	r0, r3
 8001740:	f7ff fd9a 	bl	8001278 <AES_CBC_encrypt_buffer>

    printf("CBC encrypt: ");
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <test_encrypt_cbc+0xac>)
 8001746:	0018      	movs	r0, r3
 8001748:	f000 fa52 	bl	8001bf0 <iprintf>

    if (0 == memcmp((char*) out, (char*) in, 64)) {
 800174c:	1939      	adds	r1, r7, r4
 800174e:	19bb      	adds	r3, r7, r6
 8001750:	2240      	movs	r2, #64	; 0x40
 8001752:	0018      	movs	r0, r3
 8001754:	f000 fa2c 	bl	8001bb0 <memcmp>
 8001758:	1e03      	subs	r3, r0, #0
 800175a:	d105      	bne.n	8001768 <test_encrypt_cbc+0x88>
        printf("SUCCESS!\n");
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <test_encrypt_cbc+0xb0>)
 800175e:	0018      	movs	r0, r3
 8001760:	f000 fae6 	bl	8001d30 <puts>
	return(0);
 8001764:	2300      	movs	r3, #0
 8001766:	e004      	b.n	8001772 <test_encrypt_cbc+0x92>
    } else {
        printf("FAILURE!\n");
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <test_encrypt_cbc+0xb4>)
 800176a:	0018      	movs	r0, r3
 800176c:	f000 fae0 	bl	8001d30 <puts>
	return(1);
 8001770:	2301      	movs	r3, #1
    }
}
 8001772:	0018      	movs	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	b059      	add	sp, #356	; 0x164
 8001778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	08002dac 	.word	0x08002dac
 8001780:	08002e54 	.word	0x08002e54
 8001784:	08002e94 	.word	0x08002e94
 8001788:	08002dbc 	.word	0x08002dbc
 800178c:	08002ea4 	.word	0x08002ea4
 8001790:	08002e0c 	.word	0x08002e0c
 8001794:	08002e18 	.word	0x08002e18

08001798 <test_encrypt_ctr>:

static int test_xcrypt_ctr(const char* xcrypt);
static int test_encrypt_ctr(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
    return test_xcrypt_ctr("encrypt");
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <test_encrypt_ctr+0x14>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 f812 	bl	80017c8 <test_xcrypt_ctr>
 80017a4:	0003      	movs	r3, r0
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	08002eb4 	.word	0x08002eb4

080017b0 <test_decrypt_ctr>:

static int test_decrypt_ctr(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
    return test_xcrypt_ctr("decrypt");
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <test_decrypt_ctr+0x14>)
 80017b6:	0018      	movs	r0, r3
 80017b8:	f000 f806 	bl	80017c8 <test_xcrypt_ctr>
 80017bc:	0003      	movs	r3, r0
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	08002ebc 	.word	0x08002ebc

080017c8 <test_xcrypt_ctr>:

static int test_xcrypt_ctr(const char* xcrypt)
{
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	b0db      	sub	sp, #364	; 0x16c
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
    uint8_t in[64]  = { 0x1a, 0xbc, 0x93, 0x24, 0x17, 0x52, 0x1c, 0xa2, 0x4f, 0x2b, 0x04, 0x59, 0xfe, 0x7e, 0x6e, 0x0b,
                        0x09, 0x03, 0x39, 0xec, 0x0a, 0xa6, 0xfa, 0xef, 0xd5, 0xcc, 0xc2, 0xc6, 0xf4, 0xce, 0x8e, 0x94,
                        0x1e, 0x36, 0xb2, 0x6b, 0xd1, 0xeb, 0xc6, 0x70, 0xd1, 0xbd, 0x1d, 0x66, 0x56, 0x20, 0xab, 0xf7,
                        0x4f, 0x78, 0xa7, 0xf6, 0xd2, 0x98, 0x09, 0x58, 0x5a, 0x97, 0xda, 0xec, 0x58, 0xc6, 0xb0, 0x50 };
#elif defined(AES128)
    uint8_t key[16] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
 80017d0:	25ac      	movs	r5, #172	; 0xac
 80017d2:	006d      	lsls	r5, r5, #1
 80017d4:	197b      	adds	r3, r7, r5
 80017d6:	4a26      	ldr	r2, [pc, #152]	; (8001870 <test_xcrypt_ctr+0xa8>)
 80017d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017da:	c313      	stmia	r3!, {r0, r1, r4}
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	601a      	str	r2, [r3, #0]
    uint8_t in[64]  = { 0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26, 0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d, 0xb6, 0xce,
 80017e0:	248c      	movs	r4, #140	; 0x8c
 80017e2:	0064      	lsls	r4, r4, #1
 80017e4:	193a      	adds	r2, r7, r4
 80017e6:	4b23      	ldr	r3, [pc, #140]	; (8001874 <test_xcrypt_ctr+0xac>)
 80017e8:	0010      	movs	r0, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	2340      	movs	r3, #64	; 0x40
 80017ee:	001a      	movs	r2, r3
 80017f0:	f000 f9ec 	bl	8001bcc <memcpy>
                        0x98, 0x06, 0xf6, 0x6b, 0x79, 0x70, 0xfd, 0xff, 0x86, 0x17, 0x18, 0x7b, 0xb9, 0xff, 0xfd, 0xff,
                        0x5a, 0xe4, 0xdf, 0x3e, 0xdb, 0xd5, 0xd3, 0x5e, 0x5b, 0x4f, 0x09, 0x02, 0x0d, 0xb0, 0x3e, 0xab,
                        0x1e, 0x03, 0x1d, 0xda, 0x2f, 0xbe, 0x03, 0xd1, 0x79, 0x21, 0x70, 0xa0, 0xf3, 0x00, 0x9c, 0xee };
#endif
    uint8_t iv[16]  = { 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff };
 80017f4:	2684      	movs	r6, #132	; 0x84
 80017f6:	0076      	lsls	r6, r6, #1
 80017f8:	19bb      	adds	r3, r7, r6
 80017fa:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <test_xcrypt_ctr+0xb0>)
 80017fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	601a      	str	r2, [r3, #0]
    uint8_t out[64] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
 8001804:	23c8      	movs	r3, #200	; 0xc8
 8001806:	18fa      	adds	r2, r7, r3
 8001808:	4b1c      	ldr	r3, [pc, #112]	; (800187c <test_xcrypt_ctr+0xb4>)
 800180a:	0010      	movs	r0, r2
 800180c:	0019      	movs	r1, r3
 800180e:	2340      	movs	r3, #64	; 0x40
 8001810:	001a      	movs	r2, r3
 8001812:	f000 f9db 	bl	8001bcc <memcpy>
                        0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
                        0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
                        0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };
    struct AES_ctx ctx;

    AES_init_ctx_iv(&ctx, key, iv);
 8001816:	19ba      	adds	r2, r7, r6
 8001818:	1979      	adds	r1, r7, r5
 800181a:	2508      	movs	r5, #8
 800181c:	197b      	adds	r3, r7, r5
 800181e:	0018      	movs	r0, r3
 8001820:	f7fe fe05 	bl	800042e <AES_init_ctx_iv>
    AES_CTR_xcrypt_buffer(&ctx, in, 64);
 8001824:	248c      	movs	r4, #140	; 0x8c
 8001826:	0064      	lsls	r4, r4, #1
 8001828:	1939      	adds	r1, r7, r4
 800182a:	197b      	adds	r3, r7, r5
 800182c:	2240      	movs	r2, #64	; 0x40
 800182e:	0018      	movs	r0, r3
 8001830:	f7ff fd8a 	bl	8001348 <AES_CTR_xcrypt_buffer>

    printf("CTR %s: ", xcrypt);
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <test_xcrypt_ctr+0xb8>)
 8001838:	0011      	movs	r1, r2
 800183a:	0018      	movs	r0, r3
 800183c:	f000 f9d8 	bl	8001bf0 <iprintf>

    if (0 == memcmp((char *) out, (char *) in, 64)) {
 8001840:	1939      	adds	r1, r7, r4
 8001842:	23c8      	movs	r3, #200	; 0xc8
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	0018      	movs	r0, r3
 800184a:	f000 f9b1 	bl	8001bb0 <memcmp>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d105      	bne.n	800185e <test_xcrypt_ctr+0x96>
        printf("SUCCESS!\n");
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <test_xcrypt_ctr+0xbc>)
 8001854:	0018      	movs	r0, r3
 8001856:	f000 fa6b 	bl	8001d30 <puts>
	return(0);
 800185a:	2300      	movs	r3, #0
 800185c:	e004      	b.n	8001868 <test_xcrypt_ctr+0xa0>
    } else {
        printf("FAILURE!\n");
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <test_xcrypt_ctr+0xc0>)
 8001860:	0018      	movs	r0, r3
 8001862:	f000 fa65 	bl	8001d30 <puts>
	return(1);
 8001866:	2301      	movs	r3, #1
    }
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	b05b      	add	sp, #364	; 0x16c
 800186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001870:	08002dac 	.word	0x08002dac
 8001874:	08002ed0 	.word	0x08002ed0
 8001878:	08002f10 	.word	0x08002f10
 800187c:	08002dbc 	.word	0x08002dbc
 8001880:	08002ec4 	.word	0x08002ec4
 8001884:	08002e0c 	.word	0x08002e0c
 8001888:	08002e18 	.word	0x08002e18

0800188c <test_decrypt_ecb>:


static int test_decrypt_ecb(void)
{
 800188c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188e:	b0bd      	sub	sp, #244	; 0xf4
 8001890:	af00      	add	r7, sp, #0
#elif defined(AES192)
    uint8_t key[] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
                      0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
    uint8_t in[]  = { 0xbd, 0x33, 0x4f, 0x1d, 0x6e, 0x45, 0xf2, 0x5f, 0xf7, 0x12, 0xa2, 0x14, 0x57, 0x1f, 0xa5, 0xcc };
#elif defined(AES128)
    uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
 8001892:	21e0      	movs	r1, #224	; 0xe0
 8001894:	187b      	adds	r3, r7, r1
 8001896:	4a1d      	ldr	r2, [pc, #116]	; (800190c <test_decrypt_ecb+0x80>)
 8001898:	ca31      	ldmia	r2!, {r0, r4, r5}
 800189a:	c331      	stmia	r3!, {r0, r4, r5}
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	601a      	str	r2, [r3, #0]
    uint8_t in[]  = { 0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97 };
 80018a0:	24d0      	movs	r4, #208	; 0xd0
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <test_decrypt_ecb+0x84>)
 80018a6:	ca61      	ldmia	r2!, {r0, r5, r6}
 80018a8:	c361      	stmia	r3!, {r0, r5, r6}
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	601a      	str	r2, [r3, #0]
#endif

    uint8_t out[]   = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
 80018ae:	25c0      	movs	r5, #192	; 0xc0
 80018b0:	197b      	adds	r3, r7, r5
 80018b2:	4a18      	ldr	r2, [pc, #96]	; (8001914 <test_decrypt_ecb+0x88>)
 80018b4:	ca43      	ldmia	r2!, {r0, r1, r6}
 80018b6:	c343      	stmia	r3!, {r0, r1, r6}
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	601a      	str	r2, [r3, #0]
    struct AES_ctx ctx;

    AES_init_ctx(&ctx, key);
 80018bc:	21e0      	movs	r1, #224	; 0xe0
 80018be:	187a      	adds	r2, r7, r1
 80018c0:	003b      	movs	r3, r7
 80018c2:	0011      	movs	r1, r2
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7fe fda3 	bl	8000410 <AES_init_ctx>
    AES_ECB_decrypt(&ctx, in);
 80018ca:	193a      	adds	r2, r7, r4
 80018cc:	003b      	movs	r3, r7
 80018ce:	0011      	movs	r1, r2
 80018d0:	0018      	movs	r0, r3
 80018d2:	f7ff fc97 	bl	8001204 <AES_ECB_decrypt>

    printf("ECB decrypt: ");
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <test_decrypt_ecb+0x8c>)
 80018d8:	0018      	movs	r0, r3
 80018da:	f000 f989 	bl	8001bf0 <iprintf>

    if (0 == memcmp((char*) out, (char*) in, 16)) {
 80018de:	1939      	adds	r1, r7, r4
 80018e0:	197b      	adds	r3, r7, r5
 80018e2:	2210      	movs	r2, #16
 80018e4:	0018      	movs	r0, r3
 80018e6:	f000 f963 	bl	8001bb0 <memcmp>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d105      	bne.n	80018fa <test_decrypt_ecb+0x6e>
        printf("SUCCESS!\n");
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <test_decrypt_ecb+0x90>)
 80018f0:	0018      	movs	r0, r3
 80018f2:	f000 fa1d 	bl	8001d30 <puts>
	return(0);
 80018f6:	2300      	movs	r3, #0
 80018f8:	e004      	b.n	8001904 <test_decrypt_ecb+0x78>
    } else {
        printf("FAILURE!\n");
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <test_decrypt_ecb+0x94>)
 80018fc:	0018      	movs	r0, r3
 80018fe:	f000 fa17 	bl	8001d30 <puts>
	return(1);
 8001902:	2301      	movs	r3, #1
    }
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b03d      	add	sp, #244	; 0xf4
 800190a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800190c:	08002dac 	.word	0x08002dac
 8001910:	08002e24 	.word	0x08002e24
 8001914:	08002e34 	.word	0x08002e34
 8001918:	08002f20 	.word	0x08002f20
 800191c:	08002e0c 	.word	0x08002e0c
 8001920:	08002e18 	.word	0x08002e18

08001924 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
#if defined(AES256)
    printf("\nTesting AES256\n\n");
#elif defined(AES192)
    printf("\nTesting AES192\n\n");
#elif defined(AES128)
    printf("\nTesting AES128\n\n");
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <main+0x4c>)
 800192c:	0018      	movs	r0, r3
 800192e:	f000 f9ff 	bl	8001d30 <puts>
#else
    printf("You need to specify a symbol between AES128, AES192 or AES256. Exiting");
    return 0;
#endif

    exit = test_encrypt_cbc() + test_decrypt_cbc() +
 8001932:	f7ff fed5 	bl	80016e0 <test_encrypt_cbc>
 8001936:	0004      	movs	r4, r0
 8001938:	f7ff fe76 	bl	8001628 <test_decrypt_cbc>
 800193c:	0003      	movs	r3, r0
 800193e:	18e4      	adds	r4, r4, r3
	test_encrypt_ctr() + test_decrypt_ctr() +
 8001940:	f7ff ff2a 	bl	8001798 <test_encrypt_ctr>
 8001944:	0003      	movs	r3, r0
    exit = test_encrypt_cbc() + test_decrypt_cbc() +
 8001946:	18e4      	adds	r4, r4, r3
	test_encrypt_ctr() + test_decrypt_ctr() +
 8001948:	f7ff ff32 	bl	80017b0 <test_decrypt_ctr>
 800194c:	0003      	movs	r3, r0
 800194e:	18e4      	adds	r4, r4, r3
	test_decrypt_ecb() + test_encrypt_ecb();
 8001950:	f7ff ff9c 	bl	800188c <test_decrypt_ecb>
 8001954:	0003      	movs	r3, r0
	test_encrypt_ctr() + test_decrypt_ctr() +
 8001956:	18e4      	adds	r4, r4, r3
	test_decrypt_ecb() + test_encrypt_ecb();
 8001958:	f7ff fe1a 	bl	8001590 <test_encrypt_ecb>
 800195c:	0003      	movs	r3, r0
    exit = test_encrypt_cbc() + test_decrypt_cbc() +
 800195e:	18e3      	adds	r3, r4, r3
 8001960:	607b      	str	r3, [r7, #4]
    test_encrypt_ecb_verbose();
 8001962:	f7ff fd89 	bl	8001478 <test_encrypt_ecb_verbose>

    return exit;
 8001966:	687b      	ldr	r3, [r7, #4]
    /* USER CODE END WHILE */
  main();
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b003      	add	sp, #12
 800196e:	bd90      	pop	{r4, r7, pc}
 8001970:	08002f30 	.word	0x08002f30

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <NMI_Handler+0x4>

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001984:	46c0      	nop			; (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001998:	f000 f8ce 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e00a      	b.n	80019ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019b4:	e000      	b.n	80019b8 <_read+0x16>
 80019b6:	bf00      	nop
 80019b8:	0001      	movs	r1, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	60ba      	str	r2, [r7, #8]
 80019c0:	b2ca      	uxtb	r2, r1
 80019c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dbf0      	blt.n	80019b4 <_read+0x12>
	}

return len;
 80019d2:	687b      	ldr	r3, [r7, #4]
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b006      	add	sp, #24
 80019da:	bd80      	pop	{r7, pc}

080019dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	e009      	b.n	8001a02 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	60ba      	str	r2, [r7, #8]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	0018      	movs	r0, r3
 80019f8:	e000      	b.n	80019fc <_write+0x20>
 80019fa:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	dbf1      	blt.n	80019ee <_write+0x12>
	}
	return len;
 8001a0a:	687b      	ldr	r3, [r7, #4]
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b006      	add	sp, #24
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_close>:

int _close(int file)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	return -1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	425b      	negs	r3, r3
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	0192      	lsls	r2, r2, #6
 8001a38:	605a      	str	r2, [r3, #4]
	return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b002      	add	sp, #8
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_isatty>:

int _isatty(int file)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	return 1;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b002      	add	sp, #8
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
	return 0;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b004      	add	sp, #16
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	18d3      	adds	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a9c:	f000 f85e 	bl	8001b5c <__errno>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	425b      	negs	r3, r3
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	18d2      	adds	r2, r2, r3
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <_sbrk+0x64>)
 8001abc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b006      	add	sp, #24
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20002000 	.word	0x20002000
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	20000084 	.word	0x20000084
 8001ad4:	200000a0 	.word	0x200000a0

08001ad8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ae4:	480d      	ldr	r0, [pc, #52]	; (8001b1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ae6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae8:	480d      	ldr	r0, [pc, #52]	; (8001b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aea:	490e      	ldr	r1, [pc, #56]	; (8001b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aec:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <LoopForever+0xe>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b00:	4c0b      	ldr	r4, [pc, #44]	; (8001b30 <LoopForever+0x16>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b0e:	f7ff ffe3 	bl	8001ad8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b12:	f000 f829 	bl	8001b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b16:	f7ff ff05 	bl	8001924 <main>

08001b1a <LoopForever>:

LoopForever:
    b LoopForever
 8001b1a:	e7fe      	b.n	8001b1a <LoopForever>
  ldr   r0, =_estack
 8001b1c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b24:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b28:	080031f0 	.word	0x080031f0
  ldr r2, =_sbss
 8001b2c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b30:	2000009c 	.word	0x2000009c

08001b34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC1_COMP_IRQHandler>
	...

08001b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_IncTick+0x1c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	001a      	movs	r2, r3
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_IncTick+0x20>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	18d2      	adds	r2, r2, r3
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_IncTick+0x20>)
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000088 	.word	0x20000088

08001b5c <__errno>:
 8001b5c:	4b01      	ldr	r3, [pc, #4]	; (8001b64 <__errno+0x8>)
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	4770      	bx	lr
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	20000004 	.word	0x20000004

08001b68 <__libc_init_array>:
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	2600      	movs	r6, #0
 8001b6c:	4d0c      	ldr	r5, [pc, #48]	; (8001ba0 <__libc_init_array+0x38>)
 8001b6e:	4c0d      	ldr	r4, [pc, #52]	; (8001ba4 <__libc_init_array+0x3c>)
 8001b70:	1b64      	subs	r4, r4, r5
 8001b72:	10a4      	asrs	r4, r4, #2
 8001b74:	42a6      	cmp	r6, r4
 8001b76:	d109      	bne.n	8001b8c <__libc_init_array+0x24>
 8001b78:	2600      	movs	r6, #0
 8001b7a:	f001 f8eb 	bl	8002d54 <_init>
 8001b7e:	4d0a      	ldr	r5, [pc, #40]	; (8001ba8 <__libc_init_array+0x40>)
 8001b80:	4c0a      	ldr	r4, [pc, #40]	; (8001bac <__libc_init_array+0x44>)
 8001b82:	1b64      	subs	r4, r4, r5
 8001b84:	10a4      	asrs	r4, r4, #2
 8001b86:	42a6      	cmp	r6, r4
 8001b88:	d105      	bne.n	8001b96 <__libc_init_array+0x2e>
 8001b8a:	bd70      	pop	{r4, r5, r6, pc}
 8001b8c:	00b3      	lsls	r3, r6, #2
 8001b8e:	58eb      	ldr	r3, [r5, r3]
 8001b90:	4798      	blx	r3
 8001b92:	3601      	adds	r6, #1
 8001b94:	e7ee      	b.n	8001b74 <__libc_init_array+0xc>
 8001b96:	00b3      	lsls	r3, r6, #2
 8001b98:	58eb      	ldr	r3, [r5, r3]
 8001b9a:	4798      	blx	r3
 8001b9c:	3601      	adds	r6, #1
 8001b9e:	e7f2      	b.n	8001b86 <__libc_init_array+0x1e>
 8001ba0:	080031e8 	.word	0x080031e8
 8001ba4:	080031e8 	.word	0x080031e8
 8001ba8:	080031e8 	.word	0x080031e8
 8001bac:	080031ec 	.word	0x080031ec

08001bb0 <memcmp>:
 8001bb0:	b530      	push	{r4, r5, lr}
 8001bb2:	2400      	movs	r4, #0
 8001bb4:	3901      	subs	r1, #1
 8001bb6:	42a2      	cmp	r2, r4
 8001bb8:	d101      	bne.n	8001bbe <memcmp+0xe>
 8001bba:	2000      	movs	r0, #0
 8001bbc:	e005      	b.n	8001bca <memcmp+0x1a>
 8001bbe:	5d03      	ldrb	r3, [r0, r4]
 8001bc0:	3401      	adds	r4, #1
 8001bc2:	5d0d      	ldrb	r5, [r1, r4]
 8001bc4:	42ab      	cmp	r3, r5
 8001bc6:	d0f6      	beq.n	8001bb6 <memcmp+0x6>
 8001bc8:	1b58      	subs	r0, r3, r5
 8001bca:	bd30      	pop	{r4, r5, pc}

08001bcc <memcpy>:
 8001bcc:	2300      	movs	r3, #0
 8001bce:	b510      	push	{r4, lr}
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d100      	bne.n	8001bd6 <memcpy+0xa>
 8001bd4:	bd10      	pop	{r4, pc}
 8001bd6:	5ccc      	ldrb	r4, [r1, r3]
 8001bd8:	54c4      	strb	r4, [r0, r3]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	e7f8      	b.n	8001bd0 <memcpy+0x4>

08001bde <memset>:
 8001bde:	0003      	movs	r3, r0
 8001be0:	1882      	adds	r2, r0, r2
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d100      	bne.n	8001be8 <memset+0xa>
 8001be6:	4770      	bx	lr
 8001be8:	7019      	strb	r1, [r3, #0]
 8001bea:	3301      	adds	r3, #1
 8001bec:	e7f9      	b.n	8001be2 <memset+0x4>
	...

08001bf0 <iprintf>:
 8001bf0:	b40f      	push	{r0, r1, r2, r3}
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <iprintf+0x30>)
 8001bf4:	b513      	push	{r0, r1, r4, lr}
 8001bf6:	681c      	ldr	r4, [r3, #0]
 8001bf8:	2c00      	cmp	r4, #0
 8001bfa:	d005      	beq.n	8001c08 <iprintf+0x18>
 8001bfc:	69a3      	ldr	r3, [r4, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <iprintf+0x18>
 8001c02:	0020      	movs	r0, r4
 8001c04:	f000 fa9a 	bl	800213c <__sinit>
 8001c08:	ab05      	add	r3, sp, #20
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	9a04      	ldr	r2, [sp, #16]
 8001c0e:	68a1      	ldr	r1, [r4, #8]
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	f000 fcad 	bl	8002570 <_vfiprintf_r>
 8001c16:	bc16      	pop	{r1, r2, r4}
 8001c18:	bc08      	pop	{r3}
 8001c1a:	b004      	add	sp, #16
 8001c1c:	4718      	bx	r3
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	20000004 	.word	0x20000004

08001c24 <putchar>:
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <putchar+0x24>)
 8001c26:	b570      	push	{r4, r5, r6, lr}
 8001c28:	681c      	ldr	r4, [r3, #0]
 8001c2a:	0005      	movs	r5, r0
 8001c2c:	2c00      	cmp	r4, #0
 8001c2e:	d005      	beq.n	8001c3c <putchar+0x18>
 8001c30:	69a3      	ldr	r3, [r4, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <putchar+0x18>
 8001c36:	0020      	movs	r0, r4
 8001c38:	f000 fa80 	bl	800213c <__sinit>
 8001c3c:	0029      	movs	r1, r5
 8001c3e:	0020      	movs	r0, r4
 8001c40:	68a2      	ldr	r2, [r4, #8]
 8001c42:	f000 ff51 	bl	8002ae8 <_putc_r>
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
 8001c48:	20000004 	.word	0x20000004

08001c4c <_puts_r>:
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	0005      	movs	r5, r0
 8001c50:	000e      	movs	r6, r1
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d004      	beq.n	8001c60 <_puts_r+0x14>
 8001c56:	6983      	ldr	r3, [r0, #24]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <_puts_r+0x14>
 8001c5c:	f000 fa6e 	bl	800213c <__sinit>
 8001c60:	69ab      	ldr	r3, [r5, #24]
 8001c62:	68ac      	ldr	r4, [r5, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_puts_r+0x22>
 8001c68:	0028      	movs	r0, r5
 8001c6a:	f000 fa67 	bl	800213c <__sinit>
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <_puts_r+0xd8>)
 8001c70:	429c      	cmp	r4, r3
 8001c72:	d122      	bne.n	8001cba <_puts_r+0x6e>
 8001c74:	686c      	ldr	r4, [r5, #4]
 8001c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c78:	07db      	lsls	r3, r3, #31
 8001c7a:	d405      	bmi.n	8001c88 <_puts_r+0x3c>
 8001c7c:	89a3      	ldrh	r3, [r4, #12]
 8001c7e:	059b      	lsls	r3, r3, #22
 8001c80:	d402      	bmi.n	8001c88 <_puts_r+0x3c>
 8001c82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c84:	f000 fafb 	bl	800227e <__retarget_lock_acquire_recursive>
 8001c88:	89a3      	ldrh	r3, [r4, #12]
 8001c8a:	071b      	lsls	r3, r3, #28
 8001c8c:	d502      	bpl.n	8001c94 <_puts_r+0x48>
 8001c8e:	6923      	ldr	r3, [r4, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d129      	bne.n	8001ce8 <_puts_r+0x9c>
 8001c94:	0021      	movs	r1, r4
 8001c96:	0028      	movs	r0, r5
 8001c98:	f000 f8aa 	bl	8001df0 <__swsetup_r>
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d023      	beq.n	8001ce8 <_puts_r+0x9c>
 8001ca0:	2501      	movs	r5, #1
 8001ca2:	426d      	negs	r5, r5
 8001ca4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ca6:	07db      	lsls	r3, r3, #31
 8001ca8:	d405      	bmi.n	8001cb6 <_puts_r+0x6a>
 8001caa:	89a3      	ldrh	r3, [r4, #12]
 8001cac:	059b      	lsls	r3, r3, #22
 8001cae:	d402      	bmi.n	8001cb6 <_puts_r+0x6a>
 8001cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cb2:	f000 fae5 	bl	8002280 <__retarget_lock_release_recursive>
 8001cb6:	0028      	movs	r0, r5
 8001cb8:	bd70      	pop	{r4, r5, r6, pc}
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <_puts_r+0xdc>)
 8001cbc:	429c      	cmp	r4, r3
 8001cbe:	d101      	bne.n	8001cc4 <_puts_r+0x78>
 8001cc0:	68ac      	ldr	r4, [r5, #8]
 8001cc2:	e7d8      	b.n	8001c76 <_puts_r+0x2a>
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <_puts_r+0xe0>)
 8001cc6:	429c      	cmp	r4, r3
 8001cc8:	d1d5      	bne.n	8001c76 <_puts_r+0x2a>
 8001cca:	68ec      	ldr	r4, [r5, #12]
 8001ccc:	e7d3      	b.n	8001c76 <_puts_r+0x2a>
 8001cce:	3601      	adds	r6, #1
 8001cd0:	60a3      	str	r3, [r4, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da04      	bge.n	8001ce0 <_puts_r+0x94>
 8001cd6:	69a2      	ldr	r2, [r4, #24]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dc16      	bgt.n	8001d0a <_puts_r+0xbe>
 8001cdc:	290a      	cmp	r1, #10
 8001cde:	d014      	beq.n	8001d0a <_puts_r+0xbe>
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	6022      	str	r2, [r4, #0]
 8001ce6:	7019      	strb	r1, [r3, #0]
 8001ce8:	68a3      	ldr	r3, [r4, #8]
 8001cea:	7831      	ldrb	r1, [r6, #0]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	2900      	cmp	r1, #0
 8001cf0:	d1ed      	bne.n	8001cce <_puts_r+0x82>
 8001cf2:	60a3      	str	r3, [r4, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	da0f      	bge.n	8001d18 <_puts_r+0xcc>
 8001cf8:	0028      	movs	r0, r5
 8001cfa:	0022      	movs	r2, r4
 8001cfc:	310a      	adds	r1, #10
 8001cfe:	f000 f821 	bl	8001d44 <__swbuf_r>
 8001d02:	250a      	movs	r5, #10
 8001d04:	1c43      	adds	r3, r0, #1
 8001d06:	d1cd      	bne.n	8001ca4 <_puts_r+0x58>
 8001d08:	e7ca      	b.n	8001ca0 <_puts_r+0x54>
 8001d0a:	0022      	movs	r2, r4
 8001d0c:	0028      	movs	r0, r5
 8001d0e:	f000 f819 	bl	8001d44 <__swbuf_r>
 8001d12:	1c43      	adds	r3, r0, #1
 8001d14:	d1e8      	bne.n	8001ce8 <_puts_r+0x9c>
 8001d16:	e7c3      	b.n	8001ca0 <_puts_r+0x54>
 8001d18:	250a      	movs	r5, #10
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	6022      	str	r2, [r4, #0]
 8001d20:	701d      	strb	r5, [r3, #0]
 8001d22:	e7bf      	b.n	8001ca4 <_puts_r+0x58>
 8001d24:	08003174 	.word	0x08003174
 8001d28:	08003194 	.word	0x08003194
 8001d2c:	08003154 	.word	0x08003154

08001d30 <puts>:
 8001d30:	b510      	push	{r4, lr}
 8001d32:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <puts+0x10>)
 8001d34:	0001      	movs	r1, r0
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	f7ff ff88 	bl	8001c4c <_puts_r>
 8001d3c:	bd10      	pop	{r4, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	20000004 	.word	0x20000004

08001d44 <__swbuf_r>:
 8001d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d46:	0005      	movs	r5, r0
 8001d48:	000e      	movs	r6, r1
 8001d4a:	0014      	movs	r4, r2
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	d004      	beq.n	8001d5a <__swbuf_r+0x16>
 8001d50:	6983      	ldr	r3, [r0, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <__swbuf_r+0x16>
 8001d56:	f000 f9f1 	bl	800213c <__sinit>
 8001d5a:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <__swbuf_r+0xa0>)
 8001d5c:	429c      	cmp	r4, r3
 8001d5e:	d12e      	bne.n	8001dbe <__swbuf_r+0x7a>
 8001d60:	686c      	ldr	r4, [r5, #4]
 8001d62:	69a3      	ldr	r3, [r4, #24]
 8001d64:	60a3      	str	r3, [r4, #8]
 8001d66:	89a3      	ldrh	r3, [r4, #12]
 8001d68:	071b      	lsls	r3, r3, #28
 8001d6a:	d532      	bpl.n	8001dd2 <__swbuf_r+0x8e>
 8001d6c:	6923      	ldr	r3, [r4, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d02f      	beq.n	8001dd2 <__swbuf_r+0x8e>
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	6922      	ldr	r2, [r4, #16]
 8001d76:	b2f7      	uxtb	r7, r6
 8001d78:	1a98      	subs	r0, r3, r2
 8001d7a:	6963      	ldr	r3, [r4, #20]
 8001d7c:	b2f6      	uxtb	r6, r6
 8001d7e:	4283      	cmp	r3, r0
 8001d80:	dc05      	bgt.n	8001d8e <__swbuf_r+0x4a>
 8001d82:	0021      	movs	r1, r4
 8001d84:	0028      	movs	r0, r5
 8001d86:	f000 f937 	bl	8001ff8 <_fflush_r>
 8001d8a:	2800      	cmp	r0, #0
 8001d8c:	d127      	bne.n	8001dde <__swbuf_r+0x9a>
 8001d8e:	68a3      	ldr	r3, [r4, #8]
 8001d90:	3001      	adds	r0, #1
 8001d92:	3b01      	subs	r3, #1
 8001d94:	60a3      	str	r3, [r4, #8]
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	6022      	str	r2, [r4, #0]
 8001d9c:	701f      	strb	r7, [r3, #0]
 8001d9e:	6963      	ldr	r3, [r4, #20]
 8001da0:	4283      	cmp	r3, r0
 8001da2:	d004      	beq.n	8001dae <__swbuf_r+0x6a>
 8001da4:	89a3      	ldrh	r3, [r4, #12]
 8001da6:	07db      	lsls	r3, r3, #31
 8001da8:	d507      	bpl.n	8001dba <__swbuf_r+0x76>
 8001daa:	2e0a      	cmp	r6, #10
 8001dac:	d105      	bne.n	8001dba <__swbuf_r+0x76>
 8001dae:	0021      	movs	r1, r4
 8001db0:	0028      	movs	r0, r5
 8001db2:	f000 f921 	bl	8001ff8 <_fflush_r>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	d111      	bne.n	8001dde <__swbuf_r+0x9a>
 8001dba:	0030      	movs	r0, r6
 8001dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <__swbuf_r+0xa4>)
 8001dc0:	429c      	cmp	r4, r3
 8001dc2:	d101      	bne.n	8001dc8 <__swbuf_r+0x84>
 8001dc4:	68ac      	ldr	r4, [r5, #8]
 8001dc6:	e7cc      	b.n	8001d62 <__swbuf_r+0x1e>
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <__swbuf_r+0xa8>)
 8001dca:	429c      	cmp	r4, r3
 8001dcc:	d1c9      	bne.n	8001d62 <__swbuf_r+0x1e>
 8001dce:	68ec      	ldr	r4, [r5, #12]
 8001dd0:	e7c7      	b.n	8001d62 <__swbuf_r+0x1e>
 8001dd2:	0021      	movs	r1, r4
 8001dd4:	0028      	movs	r0, r5
 8001dd6:	f000 f80b 	bl	8001df0 <__swsetup_r>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d0c9      	beq.n	8001d72 <__swbuf_r+0x2e>
 8001dde:	2601      	movs	r6, #1
 8001de0:	4276      	negs	r6, r6
 8001de2:	e7ea      	b.n	8001dba <__swbuf_r+0x76>
 8001de4:	08003174 	.word	0x08003174
 8001de8:	08003194 	.word	0x08003194
 8001dec:	08003154 	.word	0x08003154

08001df0 <__swsetup_r>:
 8001df0:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <__swsetup_r+0xe0>)
 8001df2:	b570      	push	{r4, r5, r6, lr}
 8001df4:	681d      	ldr	r5, [r3, #0]
 8001df6:	0006      	movs	r6, r0
 8001df8:	000c      	movs	r4, r1
 8001dfa:	2d00      	cmp	r5, #0
 8001dfc:	d005      	beq.n	8001e0a <__swsetup_r+0x1a>
 8001dfe:	69ab      	ldr	r3, [r5, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <__swsetup_r+0x1a>
 8001e04:	0028      	movs	r0, r5
 8001e06:	f000 f999 	bl	800213c <__sinit>
 8001e0a:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <__swsetup_r+0xe4>)
 8001e0c:	429c      	cmp	r4, r3
 8001e0e:	d10f      	bne.n	8001e30 <__swsetup_r+0x40>
 8001e10:	686c      	ldr	r4, [r5, #4]
 8001e12:	230c      	movs	r3, #12
 8001e14:	5ee2      	ldrsh	r2, [r4, r3]
 8001e16:	b293      	uxth	r3, r2
 8001e18:	0711      	lsls	r1, r2, #28
 8001e1a:	d42d      	bmi.n	8001e78 <__swsetup_r+0x88>
 8001e1c:	06d9      	lsls	r1, r3, #27
 8001e1e:	d411      	bmi.n	8001e44 <__swsetup_r+0x54>
 8001e20:	2309      	movs	r3, #9
 8001e22:	2001      	movs	r0, #1
 8001e24:	6033      	str	r3, [r6, #0]
 8001e26:	3337      	adds	r3, #55	; 0x37
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	81a3      	strh	r3, [r4, #12]
 8001e2c:	4240      	negs	r0, r0
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
 8001e30:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <__swsetup_r+0xe8>)
 8001e32:	429c      	cmp	r4, r3
 8001e34:	d101      	bne.n	8001e3a <__swsetup_r+0x4a>
 8001e36:	68ac      	ldr	r4, [r5, #8]
 8001e38:	e7eb      	b.n	8001e12 <__swsetup_r+0x22>
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <__swsetup_r+0xec>)
 8001e3c:	429c      	cmp	r4, r3
 8001e3e:	d1e8      	bne.n	8001e12 <__swsetup_r+0x22>
 8001e40:	68ec      	ldr	r4, [r5, #12]
 8001e42:	e7e6      	b.n	8001e12 <__swsetup_r+0x22>
 8001e44:	075b      	lsls	r3, r3, #29
 8001e46:	d513      	bpl.n	8001e70 <__swsetup_r+0x80>
 8001e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e4a:	2900      	cmp	r1, #0
 8001e4c:	d008      	beq.n	8001e60 <__swsetup_r+0x70>
 8001e4e:	0023      	movs	r3, r4
 8001e50:	3344      	adds	r3, #68	; 0x44
 8001e52:	4299      	cmp	r1, r3
 8001e54:	d002      	beq.n	8001e5c <__swsetup_r+0x6c>
 8001e56:	0030      	movs	r0, r6
 8001e58:	f000 fa80 	bl	800235c <_free_r>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6363      	str	r3, [r4, #52]	; 0x34
 8001e60:	2224      	movs	r2, #36	; 0x24
 8001e62:	89a3      	ldrh	r3, [r4, #12]
 8001e64:	4393      	bics	r3, r2
 8001e66:	81a3      	strh	r3, [r4, #12]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	6063      	str	r3, [r4, #4]
 8001e6c:	6923      	ldr	r3, [r4, #16]
 8001e6e:	6023      	str	r3, [r4, #0]
 8001e70:	2308      	movs	r3, #8
 8001e72:	89a2      	ldrh	r2, [r4, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	81a3      	strh	r3, [r4, #12]
 8001e78:	6923      	ldr	r3, [r4, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10b      	bne.n	8001e96 <__swsetup_r+0xa6>
 8001e7e:	21a0      	movs	r1, #160	; 0xa0
 8001e80:	2280      	movs	r2, #128	; 0x80
 8001e82:	89a3      	ldrh	r3, [r4, #12]
 8001e84:	0089      	lsls	r1, r1, #2
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	400b      	ands	r3, r1
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d003      	beq.n	8001e96 <__swsetup_r+0xa6>
 8001e8e:	0021      	movs	r1, r4
 8001e90:	0030      	movs	r0, r6
 8001e92:	f000 fa1f 	bl	80022d4 <__smakebuf_r>
 8001e96:	220c      	movs	r2, #12
 8001e98:	5ea3      	ldrsh	r3, [r4, r2]
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	001a      	movs	r2, r3
 8001e9e:	b299      	uxth	r1, r3
 8001ea0:	4002      	ands	r2, r0
 8001ea2:	4203      	tst	r3, r0
 8001ea4:	d00f      	beq.n	8001ec6 <__swsetup_r+0xd6>
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60a2      	str	r2, [r4, #8]
 8001eaa:	6962      	ldr	r2, [r4, #20]
 8001eac:	4252      	negs	r2, r2
 8001eae:	61a2      	str	r2, [r4, #24]
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	6922      	ldr	r2, [r4, #16]
 8001eb4:	4282      	cmp	r2, r0
 8001eb6:	d1ba      	bne.n	8001e2e <__swsetup_r+0x3e>
 8001eb8:	060a      	lsls	r2, r1, #24
 8001eba:	d5b8      	bpl.n	8001e2e <__swsetup_r+0x3e>
 8001ebc:	2240      	movs	r2, #64	; 0x40
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	81a3      	strh	r3, [r4, #12]
 8001ec2:	3801      	subs	r0, #1
 8001ec4:	e7b3      	b.n	8001e2e <__swsetup_r+0x3e>
 8001ec6:	0788      	lsls	r0, r1, #30
 8001ec8:	d400      	bmi.n	8001ecc <__swsetup_r+0xdc>
 8001eca:	6962      	ldr	r2, [r4, #20]
 8001ecc:	60a2      	str	r2, [r4, #8]
 8001ece:	e7ef      	b.n	8001eb0 <__swsetup_r+0xc0>
 8001ed0:	20000004 	.word	0x20000004
 8001ed4:	08003174 	.word	0x08003174
 8001ed8:	08003194 	.word	0x08003194
 8001edc:	08003154 	.word	0x08003154

08001ee0 <__sflush_r>:
 8001ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ee2:	898b      	ldrh	r3, [r1, #12]
 8001ee4:	0005      	movs	r5, r0
 8001ee6:	000c      	movs	r4, r1
 8001ee8:	071a      	lsls	r2, r3, #28
 8001eea:	d45f      	bmi.n	8001fac <__sflush_r+0xcc>
 8001eec:	684a      	ldr	r2, [r1, #4]
 8001eee:	2a00      	cmp	r2, #0
 8001ef0:	dc04      	bgt.n	8001efc <__sflush_r+0x1c>
 8001ef2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001ef4:	2a00      	cmp	r2, #0
 8001ef6:	dc01      	bgt.n	8001efc <__sflush_r+0x1c>
 8001ef8:	2000      	movs	r0, #0
 8001efa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001efc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001efe:	2f00      	cmp	r7, #0
 8001f00:	d0fa      	beq.n	8001ef8 <__sflush_r+0x18>
 8001f02:	2200      	movs	r2, #0
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	682e      	ldr	r6, [r5, #0]
 8001f08:	602a      	str	r2, [r5, #0]
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	0149      	lsls	r1, r1, #5
 8001f0e:	400a      	ands	r2, r1
 8001f10:	420b      	tst	r3, r1
 8001f12:	d034      	beq.n	8001f7e <__sflush_r+0x9e>
 8001f14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f16:	89a3      	ldrh	r3, [r4, #12]
 8001f18:	075b      	lsls	r3, r3, #29
 8001f1a:	d506      	bpl.n	8001f2a <__sflush_r+0x4a>
 8001f1c:	6863      	ldr	r3, [r4, #4]
 8001f1e:	1ac0      	subs	r0, r0, r3
 8001f20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <__sflush_r+0x4a>
 8001f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f28:	1ac0      	subs	r0, r0, r3
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	6a21      	ldr	r1, [r4, #32]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	0028      	movs	r0, r5
 8001f32:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001f34:	47b8      	blx	r7
 8001f36:	89a1      	ldrh	r1, [r4, #12]
 8001f38:	1c43      	adds	r3, r0, #1
 8001f3a:	d106      	bne.n	8001f4a <__sflush_r+0x6a>
 8001f3c:	682b      	ldr	r3, [r5, #0]
 8001f3e:	2b1d      	cmp	r3, #29
 8001f40:	d831      	bhi.n	8001fa6 <__sflush_r+0xc6>
 8001f42:	4a2c      	ldr	r2, [pc, #176]	; (8001ff4 <__sflush_r+0x114>)
 8001f44:	40da      	lsrs	r2, r3
 8001f46:	07d3      	lsls	r3, r2, #31
 8001f48:	d52d      	bpl.n	8001fa6 <__sflush_r+0xc6>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	6063      	str	r3, [r4, #4]
 8001f4e:	6923      	ldr	r3, [r4, #16]
 8001f50:	6023      	str	r3, [r4, #0]
 8001f52:	04cb      	lsls	r3, r1, #19
 8001f54:	d505      	bpl.n	8001f62 <__sflush_r+0x82>
 8001f56:	1c43      	adds	r3, r0, #1
 8001f58:	d102      	bne.n	8001f60 <__sflush_r+0x80>
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d100      	bne.n	8001f62 <__sflush_r+0x82>
 8001f60:	6560      	str	r0, [r4, #84]	; 0x54
 8001f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f64:	602e      	str	r6, [r5, #0]
 8001f66:	2900      	cmp	r1, #0
 8001f68:	d0c6      	beq.n	8001ef8 <__sflush_r+0x18>
 8001f6a:	0023      	movs	r3, r4
 8001f6c:	3344      	adds	r3, #68	; 0x44
 8001f6e:	4299      	cmp	r1, r3
 8001f70:	d002      	beq.n	8001f78 <__sflush_r+0x98>
 8001f72:	0028      	movs	r0, r5
 8001f74:	f000 f9f2 	bl	800235c <_free_r>
 8001f78:	2000      	movs	r0, #0
 8001f7a:	6360      	str	r0, [r4, #52]	; 0x34
 8001f7c:	e7bd      	b.n	8001efa <__sflush_r+0x1a>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	0028      	movs	r0, r5
 8001f82:	6a21      	ldr	r1, [r4, #32]
 8001f84:	47b8      	blx	r7
 8001f86:	1c43      	adds	r3, r0, #1
 8001f88:	d1c5      	bne.n	8001f16 <__sflush_r+0x36>
 8001f8a:	682b      	ldr	r3, [r5, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0c2      	beq.n	8001f16 <__sflush_r+0x36>
 8001f90:	2b1d      	cmp	r3, #29
 8001f92:	d001      	beq.n	8001f98 <__sflush_r+0xb8>
 8001f94:	2b16      	cmp	r3, #22
 8001f96:	d101      	bne.n	8001f9c <__sflush_r+0xbc>
 8001f98:	602e      	str	r6, [r5, #0]
 8001f9a:	e7ad      	b.n	8001ef8 <__sflush_r+0x18>
 8001f9c:	2340      	movs	r3, #64	; 0x40
 8001f9e:	89a2      	ldrh	r2, [r4, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	81a3      	strh	r3, [r4, #12]
 8001fa4:	e7a9      	b.n	8001efa <__sflush_r+0x1a>
 8001fa6:	2340      	movs	r3, #64	; 0x40
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	e7fa      	b.n	8001fa2 <__sflush_r+0xc2>
 8001fac:	690f      	ldr	r7, [r1, #16]
 8001fae:	2f00      	cmp	r7, #0
 8001fb0:	d0a2      	beq.n	8001ef8 <__sflush_r+0x18>
 8001fb2:	680a      	ldr	r2, [r1, #0]
 8001fb4:	600f      	str	r7, [r1, #0]
 8001fb6:	1bd2      	subs	r2, r2, r7
 8001fb8:	9201      	str	r2, [sp, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	079b      	lsls	r3, r3, #30
 8001fbe:	d100      	bne.n	8001fc2 <__sflush_r+0xe2>
 8001fc0:	694a      	ldr	r2, [r1, #20]
 8001fc2:	60a2      	str	r2, [r4, #8]
 8001fc4:	9b01      	ldr	r3, [sp, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	dc00      	bgt.n	8001fcc <__sflush_r+0xec>
 8001fca:	e795      	b.n	8001ef8 <__sflush_r+0x18>
 8001fcc:	003a      	movs	r2, r7
 8001fce:	0028      	movs	r0, r5
 8001fd0:	9b01      	ldr	r3, [sp, #4]
 8001fd2:	6a21      	ldr	r1, [r4, #32]
 8001fd4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001fd6:	47b0      	blx	r6
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	dc06      	bgt.n	8001fea <__sflush_r+0x10a>
 8001fdc:	2340      	movs	r3, #64	; 0x40
 8001fde:	2001      	movs	r0, #1
 8001fe0:	89a2      	ldrh	r2, [r4, #12]
 8001fe2:	4240      	negs	r0, r0
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	81a3      	strh	r3, [r4, #12]
 8001fe8:	e787      	b.n	8001efa <__sflush_r+0x1a>
 8001fea:	9b01      	ldr	r3, [sp, #4]
 8001fec:	183f      	adds	r7, r7, r0
 8001fee:	1a1b      	subs	r3, r3, r0
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	e7e7      	b.n	8001fc4 <__sflush_r+0xe4>
 8001ff4:	20400001 	.word	0x20400001

08001ff8 <_fflush_r>:
 8001ff8:	690b      	ldr	r3, [r1, #16]
 8001ffa:	b570      	push	{r4, r5, r6, lr}
 8001ffc:	0005      	movs	r5, r0
 8001ffe:	000c      	movs	r4, r1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <_fflush_r+0x12>
 8002004:	2500      	movs	r5, #0
 8002006:	0028      	movs	r0, r5
 8002008:	bd70      	pop	{r4, r5, r6, pc}
 800200a:	2800      	cmp	r0, #0
 800200c:	d004      	beq.n	8002018 <_fflush_r+0x20>
 800200e:	6983      	ldr	r3, [r0, #24]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <_fflush_r+0x20>
 8002014:	f000 f892 	bl	800213c <__sinit>
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <_fflush_r+0x74>)
 800201a:	429c      	cmp	r4, r3
 800201c:	d11b      	bne.n	8002056 <_fflush_r+0x5e>
 800201e:	686c      	ldr	r4, [r5, #4]
 8002020:	220c      	movs	r2, #12
 8002022:	5ea3      	ldrsh	r3, [r4, r2]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ed      	beq.n	8002004 <_fflush_r+0xc>
 8002028:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800202a:	07d2      	lsls	r2, r2, #31
 800202c:	d404      	bmi.n	8002038 <_fflush_r+0x40>
 800202e:	059b      	lsls	r3, r3, #22
 8002030:	d402      	bmi.n	8002038 <_fflush_r+0x40>
 8002032:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002034:	f000 f923 	bl	800227e <__retarget_lock_acquire_recursive>
 8002038:	0028      	movs	r0, r5
 800203a:	0021      	movs	r1, r4
 800203c:	f7ff ff50 	bl	8001ee0 <__sflush_r>
 8002040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002042:	0005      	movs	r5, r0
 8002044:	07db      	lsls	r3, r3, #31
 8002046:	d4de      	bmi.n	8002006 <_fflush_r+0xe>
 8002048:	89a3      	ldrh	r3, [r4, #12]
 800204a:	059b      	lsls	r3, r3, #22
 800204c:	d4db      	bmi.n	8002006 <_fflush_r+0xe>
 800204e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002050:	f000 f916 	bl	8002280 <__retarget_lock_release_recursive>
 8002054:	e7d7      	b.n	8002006 <_fflush_r+0xe>
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <_fflush_r+0x78>)
 8002058:	429c      	cmp	r4, r3
 800205a:	d101      	bne.n	8002060 <_fflush_r+0x68>
 800205c:	68ac      	ldr	r4, [r5, #8]
 800205e:	e7df      	b.n	8002020 <_fflush_r+0x28>
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <_fflush_r+0x7c>)
 8002062:	429c      	cmp	r4, r3
 8002064:	d1dc      	bne.n	8002020 <_fflush_r+0x28>
 8002066:	68ec      	ldr	r4, [r5, #12]
 8002068:	e7da      	b.n	8002020 <_fflush_r+0x28>
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	08003174 	.word	0x08003174
 8002070:	08003194 	.word	0x08003194
 8002074:	08003154 	.word	0x08003154

08002078 <std>:
 8002078:	2300      	movs	r3, #0
 800207a:	b510      	push	{r4, lr}
 800207c:	0004      	movs	r4, r0
 800207e:	6003      	str	r3, [r0, #0]
 8002080:	6043      	str	r3, [r0, #4]
 8002082:	6083      	str	r3, [r0, #8]
 8002084:	8181      	strh	r1, [r0, #12]
 8002086:	6643      	str	r3, [r0, #100]	; 0x64
 8002088:	0019      	movs	r1, r3
 800208a:	81c2      	strh	r2, [r0, #14]
 800208c:	6103      	str	r3, [r0, #16]
 800208e:	6143      	str	r3, [r0, #20]
 8002090:	6183      	str	r3, [r0, #24]
 8002092:	2208      	movs	r2, #8
 8002094:	305c      	adds	r0, #92	; 0x5c
 8002096:	f7ff fda2 	bl	8001bde <memset>
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <std+0x38>)
 800209c:	6224      	str	r4, [r4, #32]
 800209e:	6263      	str	r3, [r4, #36]	; 0x24
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <std+0x3c>)
 80020a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <std+0x40>)
 80020a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <std+0x44>)
 80020aa:	6323      	str	r3, [r4, #48]	; 0x30
 80020ac:	bd10      	pop	{r4, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	08002ba1 	.word	0x08002ba1
 80020b4:	08002bc9 	.word	0x08002bc9
 80020b8:	08002c01 	.word	0x08002c01
 80020bc:	08002c2d 	.word	0x08002c2d

080020c0 <_cleanup_r>:
 80020c0:	b510      	push	{r4, lr}
 80020c2:	4902      	ldr	r1, [pc, #8]	; (80020cc <_cleanup_r+0xc>)
 80020c4:	f000 f8ba 	bl	800223c <_fwalk_reent>
 80020c8:	bd10      	pop	{r4, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	08001ff9 	.word	0x08001ff9

080020d0 <__sfmoreglue>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	2568      	movs	r5, #104	; 0x68
 80020d4:	1e4a      	subs	r2, r1, #1
 80020d6:	4355      	muls	r5, r2
 80020d8:	000e      	movs	r6, r1
 80020da:	0029      	movs	r1, r5
 80020dc:	3174      	adds	r1, #116	; 0x74
 80020de:	f000 f9a9 	bl	8002434 <_malloc_r>
 80020e2:	1e04      	subs	r4, r0, #0
 80020e4:	d008      	beq.n	80020f8 <__sfmoreglue+0x28>
 80020e6:	2100      	movs	r1, #0
 80020e8:	002a      	movs	r2, r5
 80020ea:	6001      	str	r1, [r0, #0]
 80020ec:	6046      	str	r6, [r0, #4]
 80020ee:	300c      	adds	r0, #12
 80020f0:	60a0      	str	r0, [r4, #8]
 80020f2:	3268      	adds	r2, #104	; 0x68
 80020f4:	f7ff fd73 	bl	8001bde <memset>
 80020f8:	0020      	movs	r0, r4
 80020fa:	bd70      	pop	{r4, r5, r6, pc}

080020fc <__sfp_lock_acquire>:
 80020fc:	b510      	push	{r4, lr}
 80020fe:	4802      	ldr	r0, [pc, #8]	; (8002108 <__sfp_lock_acquire+0xc>)
 8002100:	f000 f8bd 	bl	800227e <__retarget_lock_acquire_recursive>
 8002104:	bd10      	pop	{r4, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	2000008d 	.word	0x2000008d

0800210c <__sfp_lock_release>:
 800210c:	b510      	push	{r4, lr}
 800210e:	4802      	ldr	r0, [pc, #8]	; (8002118 <__sfp_lock_release+0xc>)
 8002110:	f000 f8b6 	bl	8002280 <__retarget_lock_release_recursive>
 8002114:	bd10      	pop	{r4, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	2000008d 	.word	0x2000008d

0800211c <__sinit_lock_acquire>:
 800211c:	b510      	push	{r4, lr}
 800211e:	4802      	ldr	r0, [pc, #8]	; (8002128 <__sinit_lock_acquire+0xc>)
 8002120:	f000 f8ad 	bl	800227e <__retarget_lock_acquire_recursive>
 8002124:	bd10      	pop	{r4, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	2000008e 	.word	0x2000008e

0800212c <__sinit_lock_release>:
 800212c:	b510      	push	{r4, lr}
 800212e:	4802      	ldr	r0, [pc, #8]	; (8002138 <__sinit_lock_release+0xc>)
 8002130:	f000 f8a6 	bl	8002280 <__retarget_lock_release_recursive>
 8002134:	bd10      	pop	{r4, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	2000008e 	.word	0x2000008e

0800213c <__sinit>:
 800213c:	b513      	push	{r0, r1, r4, lr}
 800213e:	0004      	movs	r4, r0
 8002140:	f7ff ffec 	bl	800211c <__sinit_lock_acquire>
 8002144:	69a3      	ldr	r3, [r4, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <__sinit+0x14>
 800214a:	f7ff ffef 	bl	800212c <__sinit_lock_release>
 800214e:	bd13      	pop	{r0, r1, r4, pc}
 8002150:	64a3      	str	r3, [r4, #72]	; 0x48
 8002152:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002154:	6523      	str	r3, [r4, #80]	; 0x50
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <__sinit+0x68>)
 8002158:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <__sinit+0x6c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	62a2      	str	r2, [r4, #40]	; 0x28
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	42a3      	cmp	r3, r4
 8002162:	d101      	bne.n	8002168 <__sinit+0x2c>
 8002164:	2301      	movs	r3, #1
 8002166:	61a3      	str	r3, [r4, #24]
 8002168:	0020      	movs	r0, r4
 800216a:	f000 f81f 	bl	80021ac <__sfp>
 800216e:	6060      	str	r0, [r4, #4]
 8002170:	0020      	movs	r0, r4
 8002172:	f000 f81b 	bl	80021ac <__sfp>
 8002176:	60a0      	str	r0, [r4, #8]
 8002178:	0020      	movs	r0, r4
 800217a:	f000 f817 	bl	80021ac <__sfp>
 800217e:	2200      	movs	r2, #0
 8002180:	2104      	movs	r1, #4
 8002182:	60e0      	str	r0, [r4, #12]
 8002184:	6860      	ldr	r0, [r4, #4]
 8002186:	f7ff ff77 	bl	8002078 <std>
 800218a:	2201      	movs	r2, #1
 800218c:	2109      	movs	r1, #9
 800218e:	68a0      	ldr	r0, [r4, #8]
 8002190:	f7ff ff72 	bl	8002078 <std>
 8002194:	2202      	movs	r2, #2
 8002196:	2112      	movs	r1, #18
 8002198:	68e0      	ldr	r0, [r4, #12]
 800219a:	f7ff ff6d 	bl	8002078 <std>
 800219e:	2301      	movs	r3, #1
 80021a0:	61a3      	str	r3, [r4, #24]
 80021a2:	e7d2      	b.n	800214a <__sinit+0xe>
 80021a4:	08003150 	.word	0x08003150
 80021a8:	080020c1 	.word	0x080020c1

080021ac <__sfp>:
 80021ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ae:	0007      	movs	r7, r0
 80021b0:	f7ff ffa4 	bl	80020fc <__sfp_lock_acquire>
 80021b4:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <__sfp+0x88>)
 80021b6:	681e      	ldr	r6, [r3, #0]
 80021b8:	69b3      	ldr	r3, [r6, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <__sfp+0x18>
 80021be:	0030      	movs	r0, r6
 80021c0:	f7ff ffbc 	bl	800213c <__sinit>
 80021c4:	3648      	adds	r6, #72	; 0x48
 80021c6:	68b4      	ldr	r4, [r6, #8]
 80021c8:	6873      	ldr	r3, [r6, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	d504      	bpl.n	80021d8 <__sfp+0x2c>
 80021ce:	6833      	ldr	r3, [r6, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d022      	beq.n	800221a <__sfp+0x6e>
 80021d4:	6836      	ldr	r6, [r6, #0]
 80021d6:	e7f6      	b.n	80021c6 <__sfp+0x1a>
 80021d8:	220c      	movs	r2, #12
 80021da:	5ea5      	ldrsh	r5, [r4, r2]
 80021dc:	2d00      	cmp	r5, #0
 80021de:	d11a      	bne.n	8002216 <__sfp+0x6a>
 80021e0:	0020      	movs	r0, r4
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <__sfp+0x8c>)
 80021e4:	3058      	adds	r0, #88	; 0x58
 80021e6:	60e3      	str	r3, [r4, #12]
 80021e8:	6665      	str	r5, [r4, #100]	; 0x64
 80021ea:	f000 f847 	bl	800227c <__retarget_lock_init_recursive>
 80021ee:	f7ff ff8d 	bl	800210c <__sfp_lock_release>
 80021f2:	0020      	movs	r0, r4
 80021f4:	2208      	movs	r2, #8
 80021f6:	0029      	movs	r1, r5
 80021f8:	6025      	str	r5, [r4, #0]
 80021fa:	60a5      	str	r5, [r4, #8]
 80021fc:	6065      	str	r5, [r4, #4]
 80021fe:	6125      	str	r5, [r4, #16]
 8002200:	6165      	str	r5, [r4, #20]
 8002202:	61a5      	str	r5, [r4, #24]
 8002204:	305c      	adds	r0, #92	; 0x5c
 8002206:	f7ff fcea 	bl	8001bde <memset>
 800220a:	6365      	str	r5, [r4, #52]	; 0x34
 800220c:	63a5      	str	r5, [r4, #56]	; 0x38
 800220e:	64a5      	str	r5, [r4, #72]	; 0x48
 8002210:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002212:	0020      	movs	r0, r4
 8002214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002216:	3468      	adds	r4, #104	; 0x68
 8002218:	e7d7      	b.n	80021ca <__sfp+0x1e>
 800221a:	2104      	movs	r1, #4
 800221c:	0038      	movs	r0, r7
 800221e:	f7ff ff57 	bl	80020d0 <__sfmoreglue>
 8002222:	1e04      	subs	r4, r0, #0
 8002224:	6030      	str	r0, [r6, #0]
 8002226:	d1d5      	bne.n	80021d4 <__sfp+0x28>
 8002228:	f7ff ff70 	bl	800210c <__sfp_lock_release>
 800222c:	230c      	movs	r3, #12
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	e7ef      	b.n	8002212 <__sfp+0x66>
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	08003150 	.word	0x08003150
 8002238:	ffff0001 	.word	0xffff0001

0800223c <_fwalk_reent>:
 800223c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800223e:	0004      	movs	r4, r0
 8002240:	0006      	movs	r6, r0
 8002242:	2700      	movs	r7, #0
 8002244:	9101      	str	r1, [sp, #4]
 8002246:	3448      	adds	r4, #72	; 0x48
 8002248:	6863      	ldr	r3, [r4, #4]
 800224a:	68a5      	ldr	r5, [r4, #8]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	9b00      	ldr	r3, [sp, #0]
 8002250:	3b01      	subs	r3, #1
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	d504      	bpl.n	8002260 <_fwalk_reent+0x24>
 8002256:	6824      	ldr	r4, [r4, #0]
 8002258:	2c00      	cmp	r4, #0
 800225a:	d1f5      	bne.n	8002248 <_fwalk_reent+0xc>
 800225c:	0038      	movs	r0, r7
 800225e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002260:	89ab      	ldrh	r3, [r5, #12]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d908      	bls.n	8002278 <_fwalk_reent+0x3c>
 8002266:	220e      	movs	r2, #14
 8002268:	5eab      	ldrsh	r3, [r5, r2]
 800226a:	3301      	adds	r3, #1
 800226c:	d004      	beq.n	8002278 <_fwalk_reent+0x3c>
 800226e:	0029      	movs	r1, r5
 8002270:	0030      	movs	r0, r6
 8002272:	9b01      	ldr	r3, [sp, #4]
 8002274:	4798      	blx	r3
 8002276:	4307      	orrs	r7, r0
 8002278:	3568      	adds	r5, #104	; 0x68
 800227a:	e7e8      	b.n	800224e <_fwalk_reent+0x12>

0800227c <__retarget_lock_init_recursive>:
 800227c:	4770      	bx	lr

0800227e <__retarget_lock_acquire_recursive>:
 800227e:	4770      	bx	lr

08002280 <__retarget_lock_release_recursive>:
 8002280:	4770      	bx	lr
	...

08002284 <__swhatbuf_r>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	000e      	movs	r6, r1
 8002288:	001d      	movs	r5, r3
 800228a:	230e      	movs	r3, #14
 800228c:	5ec9      	ldrsh	r1, [r1, r3]
 800228e:	0014      	movs	r4, r2
 8002290:	b096      	sub	sp, #88	; 0x58
 8002292:	2900      	cmp	r1, #0
 8002294:	da08      	bge.n	80022a8 <__swhatbuf_r+0x24>
 8002296:	220c      	movs	r2, #12
 8002298:	5eb3      	ldrsh	r3, [r6, r2]
 800229a:	2200      	movs	r2, #0
 800229c:	602a      	str	r2, [r5, #0]
 800229e:	061b      	lsls	r3, r3, #24
 80022a0:	d411      	bmi.n	80022c6 <__swhatbuf_r+0x42>
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	e00f      	b.n	80022c8 <__swhatbuf_r+0x44>
 80022a8:	466a      	mov	r2, sp
 80022aa:	f000 fceb 	bl	8002c84 <_fstat_r>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	dbf1      	blt.n	8002296 <__swhatbuf_r+0x12>
 80022b2:	23f0      	movs	r3, #240	; 0xf0
 80022b4:	9901      	ldr	r1, [sp, #4]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	4019      	ands	r1, r3
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <__swhatbuf_r+0x4c>)
 80022bc:	18c9      	adds	r1, r1, r3
 80022be:	424b      	negs	r3, r1
 80022c0:	4159      	adcs	r1, r3
 80022c2:	6029      	str	r1, [r5, #0]
 80022c4:	e7ed      	b.n	80022a2 <__swhatbuf_r+0x1e>
 80022c6:	2340      	movs	r3, #64	; 0x40
 80022c8:	2000      	movs	r0, #0
 80022ca:	6023      	str	r3, [r4, #0]
 80022cc:	b016      	add	sp, #88	; 0x58
 80022ce:	bd70      	pop	{r4, r5, r6, pc}
 80022d0:	ffffe000 	.word	0xffffe000

080022d4 <__smakebuf_r>:
 80022d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022d6:	2602      	movs	r6, #2
 80022d8:	898b      	ldrh	r3, [r1, #12]
 80022da:	0005      	movs	r5, r0
 80022dc:	000c      	movs	r4, r1
 80022de:	4233      	tst	r3, r6
 80022e0:	d006      	beq.n	80022f0 <__smakebuf_r+0x1c>
 80022e2:	0023      	movs	r3, r4
 80022e4:	3347      	adds	r3, #71	; 0x47
 80022e6:	6023      	str	r3, [r4, #0]
 80022e8:	6123      	str	r3, [r4, #16]
 80022ea:	2301      	movs	r3, #1
 80022ec:	6163      	str	r3, [r4, #20]
 80022ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80022f0:	466a      	mov	r2, sp
 80022f2:	ab01      	add	r3, sp, #4
 80022f4:	f7ff ffc6 	bl	8002284 <__swhatbuf_r>
 80022f8:	9900      	ldr	r1, [sp, #0]
 80022fa:	0007      	movs	r7, r0
 80022fc:	0028      	movs	r0, r5
 80022fe:	f000 f899 	bl	8002434 <_malloc_r>
 8002302:	2800      	cmp	r0, #0
 8002304:	d108      	bne.n	8002318 <__smakebuf_r+0x44>
 8002306:	220c      	movs	r2, #12
 8002308:	5ea3      	ldrsh	r3, [r4, r2]
 800230a:	059a      	lsls	r2, r3, #22
 800230c:	d4ef      	bmi.n	80022ee <__smakebuf_r+0x1a>
 800230e:	2203      	movs	r2, #3
 8002310:	4393      	bics	r3, r2
 8002312:	431e      	orrs	r6, r3
 8002314:	81a6      	strh	r6, [r4, #12]
 8002316:	e7e4      	b.n	80022e2 <__smakebuf_r+0xe>
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <__smakebuf_r+0x84>)
 800231a:	62ab      	str	r3, [r5, #40]	; 0x28
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	89a2      	ldrh	r2, [r4, #12]
 8002320:	6020      	str	r0, [r4, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	81a3      	strh	r3, [r4, #12]
 8002326:	9b00      	ldr	r3, [sp, #0]
 8002328:	6120      	str	r0, [r4, #16]
 800232a:	6163      	str	r3, [r4, #20]
 800232c:	9b01      	ldr	r3, [sp, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00d      	beq.n	800234e <__smakebuf_r+0x7a>
 8002332:	0028      	movs	r0, r5
 8002334:	230e      	movs	r3, #14
 8002336:	5ee1      	ldrsh	r1, [r4, r3]
 8002338:	f000 fcb6 	bl	8002ca8 <_isatty_r>
 800233c:	2800      	cmp	r0, #0
 800233e:	d006      	beq.n	800234e <__smakebuf_r+0x7a>
 8002340:	2203      	movs	r2, #3
 8002342:	89a3      	ldrh	r3, [r4, #12]
 8002344:	4393      	bics	r3, r2
 8002346:	001a      	movs	r2, r3
 8002348:	2301      	movs	r3, #1
 800234a:	4313      	orrs	r3, r2
 800234c:	81a3      	strh	r3, [r4, #12]
 800234e:	89a0      	ldrh	r0, [r4, #12]
 8002350:	4307      	orrs	r7, r0
 8002352:	81a7      	strh	r7, [r4, #12]
 8002354:	e7cb      	b.n	80022ee <__smakebuf_r+0x1a>
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	080020c1 	.word	0x080020c1

0800235c <_free_r>:
 800235c:	b570      	push	{r4, r5, r6, lr}
 800235e:	0005      	movs	r5, r0
 8002360:	2900      	cmp	r1, #0
 8002362:	d010      	beq.n	8002386 <_free_r+0x2a>
 8002364:	1f0c      	subs	r4, r1, #4
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	da00      	bge.n	800236e <_free_r+0x12>
 800236c:	18e4      	adds	r4, r4, r3
 800236e:	0028      	movs	r0, r5
 8002370:	f000 fccc 	bl	8002d0c <__malloc_lock>
 8002374:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <_free_r+0x90>)
 8002376:	6813      	ldr	r3, [r2, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <_free_r+0x2c>
 800237c:	6063      	str	r3, [r4, #4]
 800237e:	6014      	str	r4, [r2, #0]
 8002380:	0028      	movs	r0, r5
 8002382:	f000 fccb 	bl	8002d1c <__malloc_unlock>
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	42a3      	cmp	r3, r4
 800238a:	d908      	bls.n	800239e <_free_r+0x42>
 800238c:	6821      	ldr	r1, [r4, #0]
 800238e:	1860      	adds	r0, r4, r1
 8002390:	4283      	cmp	r3, r0
 8002392:	d1f3      	bne.n	800237c <_free_r+0x20>
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	1841      	adds	r1, r0, r1
 800239a:	6021      	str	r1, [r4, #0]
 800239c:	e7ee      	b.n	800237c <_free_r+0x20>
 800239e:	001a      	movs	r2, r3
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <_free_r+0x4e>
 80023a6:	42a3      	cmp	r3, r4
 80023a8:	d9f9      	bls.n	800239e <_free_r+0x42>
 80023aa:	6811      	ldr	r1, [r2, #0]
 80023ac:	1850      	adds	r0, r2, r1
 80023ae:	42a0      	cmp	r0, r4
 80023b0:	d10b      	bne.n	80023ca <_free_r+0x6e>
 80023b2:	6820      	ldr	r0, [r4, #0]
 80023b4:	1809      	adds	r1, r1, r0
 80023b6:	1850      	adds	r0, r2, r1
 80023b8:	6011      	str	r1, [r2, #0]
 80023ba:	4283      	cmp	r3, r0
 80023bc:	d1e0      	bne.n	8002380 <_free_r+0x24>
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	1841      	adds	r1, r0, r1
 80023c4:	6011      	str	r1, [r2, #0]
 80023c6:	6053      	str	r3, [r2, #4]
 80023c8:	e7da      	b.n	8002380 <_free_r+0x24>
 80023ca:	42a0      	cmp	r0, r4
 80023cc:	d902      	bls.n	80023d4 <_free_r+0x78>
 80023ce:	230c      	movs	r3, #12
 80023d0:	602b      	str	r3, [r5, #0]
 80023d2:	e7d5      	b.n	8002380 <_free_r+0x24>
 80023d4:	6821      	ldr	r1, [r4, #0]
 80023d6:	1860      	adds	r0, r4, r1
 80023d8:	4283      	cmp	r3, r0
 80023da:	d103      	bne.n	80023e4 <_free_r+0x88>
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	1841      	adds	r1, r0, r1
 80023e2:	6021      	str	r1, [r4, #0]
 80023e4:	6063      	str	r3, [r4, #4]
 80023e6:	6054      	str	r4, [r2, #4]
 80023e8:	e7ca      	b.n	8002380 <_free_r+0x24>
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	20000090 	.word	0x20000090

080023f0 <sbrk_aligned>:
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	4e0f      	ldr	r6, [pc, #60]	; (8002430 <sbrk_aligned+0x40>)
 80023f4:	000d      	movs	r5, r1
 80023f6:	6831      	ldr	r1, [r6, #0]
 80023f8:	0004      	movs	r4, r0
 80023fa:	2900      	cmp	r1, #0
 80023fc:	d102      	bne.n	8002404 <sbrk_aligned+0x14>
 80023fe:	f000 fbbd 	bl	8002b7c <_sbrk_r>
 8002402:	6030      	str	r0, [r6, #0]
 8002404:	0029      	movs	r1, r5
 8002406:	0020      	movs	r0, r4
 8002408:	f000 fbb8 	bl	8002b7c <_sbrk_r>
 800240c:	1c43      	adds	r3, r0, #1
 800240e:	d00a      	beq.n	8002426 <sbrk_aligned+0x36>
 8002410:	2303      	movs	r3, #3
 8002412:	1cc5      	adds	r5, r0, #3
 8002414:	439d      	bics	r5, r3
 8002416:	42a8      	cmp	r0, r5
 8002418:	d007      	beq.n	800242a <sbrk_aligned+0x3a>
 800241a:	1a29      	subs	r1, r5, r0
 800241c:	0020      	movs	r0, r4
 800241e:	f000 fbad 	bl	8002b7c <_sbrk_r>
 8002422:	1c43      	adds	r3, r0, #1
 8002424:	d101      	bne.n	800242a <sbrk_aligned+0x3a>
 8002426:	2501      	movs	r5, #1
 8002428:	426d      	negs	r5, r5
 800242a:	0028      	movs	r0, r5
 800242c:	bd70      	pop	{r4, r5, r6, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	20000094 	.word	0x20000094

08002434 <_malloc_r>:
 8002434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002436:	2203      	movs	r2, #3
 8002438:	1ccb      	adds	r3, r1, #3
 800243a:	4393      	bics	r3, r2
 800243c:	3308      	adds	r3, #8
 800243e:	0006      	movs	r6, r0
 8002440:	001f      	movs	r7, r3
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d232      	bcs.n	80024ac <_malloc_r+0x78>
 8002446:	270c      	movs	r7, #12
 8002448:	42b9      	cmp	r1, r7
 800244a:	d831      	bhi.n	80024b0 <_malloc_r+0x7c>
 800244c:	0030      	movs	r0, r6
 800244e:	f000 fc5d 	bl	8002d0c <__malloc_lock>
 8002452:	4d32      	ldr	r5, [pc, #200]	; (800251c <_malloc_r+0xe8>)
 8002454:	682b      	ldr	r3, [r5, #0]
 8002456:	001c      	movs	r4, r3
 8002458:	2c00      	cmp	r4, #0
 800245a:	d12e      	bne.n	80024ba <_malloc_r+0x86>
 800245c:	0039      	movs	r1, r7
 800245e:	0030      	movs	r0, r6
 8002460:	f7ff ffc6 	bl	80023f0 <sbrk_aligned>
 8002464:	0004      	movs	r4, r0
 8002466:	1c43      	adds	r3, r0, #1
 8002468:	d11e      	bne.n	80024a8 <_malloc_r+0x74>
 800246a:	682c      	ldr	r4, [r5, #0]
 800246c:	0025      	movs	r5, r4
 800246e:	2d00      	cmp	r5, #0
 8002470:	d14a      	bne.n	8002508 <_malloc_r+0xd4>
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	0029      	movs	r1, r5
 8002476:	18e3      	adds	r3, r4, r3
 8002478:	0030      	movs	r0, r6
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	f000 fb7e 	bl	8002b7c <_sbrk_r>
 8002480:	9b01      	ldr	r3, [sp, #4]
 8002482:	4283      	cmp	r3, r0
 8002484:	d143      	bne.n	800250e <_malloc_r+0xda>
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	3703      	adds	r7, #3
 800248a:	1aff      	subs	r7, r7, r3
 800248c:	2303      	movs	r3, #3
 800248e:	439f      	bics	r7, r3
 8002490:	3708      	adds	r7, #8
 8002492:	2f0c      	cmp	r7, #12
 8002494:	d200      	bcs.n	8002498 <_malloc_r+0x64>
 8002496:	270c      	movs	r7, #12
 8002498:	0039      	movs	r1, r7
 800249a:	0030      	movs	r0, r6
 800249c:	f7ff ffa8 	bl	80023f0 <sbrk_aligned>
 80024a0:	1c43      	adds	r3, r0, #1
 80024a2:	d034      	beq.n	800250e <_malloc_r+0xda>
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	19df      	adds	r7, r3, r7
 80024a8:	6027      	str	r7, [r4, #0]
 80024aa:	e013      	b.n	80024d4 <_malloc_r+0xa0>
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	dacb      	bge.n	8002448 <_malloc_r+0x14>
 80024b0:	230c      	movs	r3, #12
 80024b2:	2500      	movs	r5, #0
 80024b4:	6033      	str	r3, [r6, #0]
 80024b6:	0028      	movs	r0, r5
 80024b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80024ba:	6822      	ldr	r2, [r4, #0]
 80024bc:	1bd1      	subs	r1, r2, r7
 80024be:	d420      	bmi.n	8002502 <_malloc_r+0xce>
 80024c0:	290b      	cmp	r1, #11
 80024c2:	d917      	bls.n	80024f4 <_malloc_r+0xc0>
 80024c4:	19e2      	adds	r2, r4, r7
 80024c6:	6027      	str	r7, [r4, #0]
 80024c8:	42a3      	cmp	r3, r4
 80024ca:	d111      	bne.n	80024f0 <_malloc_r+0xbc>
 80024cc:	602a      	str	r2, [r5, #0]
 80024ce:	6863      	ldr	r3, [r4, #4]
 80024d0:	6011      	str	r1, [r2, #0]
 80024d2:	6053      	str	r3, [r2, #4]
 80024d4:	0030      	movs	r0, r6
 80024d6:	0025      	movs	r5, r4
 80024d8:	f000 fc20 	bl	8002d1c <__malloc_unlock>
 80024dc:	2207      	movs	r2, #7
 80024de:	350b      	adds	r5, #11
 80024e0:	1d23      	adds	r3, r4, #4
 80024e2:	4395      	bics	r5, r2
 80024e4:	1aea      	subs	r2, r5, r3
 80024e6:	429d      	cmp	r5, r3
 80024e8:	d0e5      	beq.n	80024b6 <_malloc_r+0x82>
 80024ea:	1b5b      	subs	r3, r3, r5
 80024ec:	50a3      	str	r3, [r4, r2]
 80024ee:	e7e2      	b.n	80024b6 <_malloc_r+0x82>
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	e7ec      	b.n	80024ce <_malloc_r+0x9a>
 80024f4:	6862      	ldr	r2, [r4, #4]
 80024f6:	42a3      	cmp	r3, r4
 80024f8:	d101      	bne.n	80024fe <_malloc_r+0xca>
 80024fa:	602a      	str	r2, [r5, #0]
 80024fc:	e7ea      	b.n	80024d4 <_malloc_r+0xa0>
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	e7e8      	b.n	80024d4 <_malloc_r+0xa0>
 8002502:	0023      	movs	r3, r4
 8002504:	6864      	ldr	r4, [r4, #4]
 8002506:	e7a7      	b.n	8002458 <_malloc_r+0x24>
 8002508:	002c      	movs	r4, r5
 800250a:	686d      	ldr	r5, [r5, #4]
 800250c:	e7af      	b.n	800246e <_malloc_r+0x3a>
 800250e:	230c      	movs	r3, #12
 8002510:	0030      	movs	r0, r6
 8002512:	6033      	str	r3, [r6, #0]
 8002514:	f000 fc02 	bl	8002d1c <__malloc_unlock>
 8002518:	e7cd      	b.n	80024b6 <_malloc_r+0x82>
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	20000090 	.word	0x20000090

08002520 <__sfputc_r>:
 8002520:	6893      	ldr	r3, [r2, #8]
 8002522:	b510      	push	{r4, lr}
 8002524:	3b01      	subs	r3, #1
 8002526:	6093      	str	r3, [r2, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	da04      	bge.n	8002536 <__sfputc_r+0x16>
 800252c:	6994      	ldr	r4, [r2, #24]
 800252e:	42a3      	cmp	r3, r4
 8002530:	db07      	blt.n	8002542 <__sfputc_r+0x22>
 8002532:	290a      	cmp	r1, #10
 8002534:	d005      	beq.n	8002542 <__sfputc_r+0x22>
 8002536:	6813      	ldr	r3, [r2, #0]
 8002538:	1c58      	adds	r0, r3, #1
 800253a:	6010      	str	r0, [r2, #0]
 800253c:	7019      	strb	r1, [r3, #0]
 800253e:	0008      	movs	r0, r1
 8002540:	bd10      	pop	{r4, pc}
 8002542:	f7ff fbff 	bl	8001d44 <__swbuf_r>
 8002546:	0001      	movs	r1, r0
 8002548:	e7f9      	b.n	800253e <__sfputc_r+0x1e>

0800254a <__sfputs_r>:
 800254a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254c:	0006      	movs	r6, r0
 800254e:	000f      	movs	r7, r1
 8002550:	0014      	movs	r4, r2
 8002552:	18d5      	adds	r5, r2, r3
 8002554:	42ac      	cmp	r4, r5
 8002556:	d101      	bne.n	800255c <__sfputs_r+0x12>
 8002558:	2000      	movs	r0, #0
 800255a:	e007      	b.n	800256c <__sfputs_r+0x22>
 800255c:	7821      	ldrb	r1, [r4, #0]
 800255e:	003a      	movs	r2, r7
 8002560:	0030      	movs	r0, r6
 8002562:	f7ff ffdd 	bl	8002520 <__sfputc_r>
 8002566:	3401      	adds	r4, #1
 8002568:	1c43      	adds	r3, r0, #1
 800256a:	d1f3      	bne.n	8002554 <__sfputs_r+0xa>
 800256c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002570 <_vfiprintf_r>:
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002572:	b0a1      	sub	sp, #132	; 0x84
 8002574:	0006      	movs	r6, r0
 8002576:	000c      	movs	r4, r1
 8002578:	001f      	movs	r7, r3
 800257a:	9203      	str	r2, [sp, #12]
 800257c:	2800      	cmp	r0, #0
 800257e:	d004      	beq.n	800258a <_vfiprintf_r+0x1a>
 8002580:	6983      	ldr	r3, [r0, #24]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <_vfiprintf_r+0x1a>
 8002586:	f7ff fdd9 	bl	800213c <__sinit>
 800258a:	4b8e      	ldr	r3, [pc, #568]	; (80027c4 <_vfiprintf_r+0x254>)
 800258c:	429c      	cmp	r4, r3
 800258e:	d11c      	bne.n	80025ca <_vfiprintf_r+0x5a>
 8002590:	6874      	ldr	r4, [r6, #4]
 8002592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002594:	07db      	lsls	r3, r3, #31
 8002596:	d405      	bmi.n	80025a4 <_vfiprintf_r+0x34>
 8002598:	89a3      	ldrh	r3, [r4, #12]
 800259a:	059b      	lsls	r3, r3, #22
 800259c:	d402      	bmi.n	80025a4 <_vfiprintf_r+0x34>
 800259e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025a0:	f7ff fe6d 	bl	800227e <__retarget_lock_acquire_recursive>
 80025a4:	89a3      	ldrh	r3, [r4, #12]
 80025a6:	071b      	lsls	r3, r3, #28
 80025a8:	d502      	bpl.n	80025b0 <_vfiprintf_r+0x40>
 80025aa:	6923      	ldr	r3, [r4, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d11d      	bne.n	80025ec <_vfiprintf_r+0x7c>
 80025b0:	0021      	movs	r1, r4
 80025b2:	0030      	movs	r0, r6
 80025b4:	f7ff fc1c 	bl	8001df0 <__swsetup_r>
 80025b8:	2800      	cmp	r0, #0
 80025ba:	d017      	beq.n	80025ec <_vfiprintf_r+0x7c>
 80025bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025be:	07db      	lsls	r3, r3, #31
 80025c0:	d50d      	bpl.n	80025de <_vfiprintf_r+0x6e>
 80025c2:	2001      	movs	r0, #1
 80025c4:	4240      	negs	r0, r0
 80025c6:	b021      	add	sp, #132	; 0x84
 80025c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ca:	4b7f      	ldr	r3, [pc, #508]	; (80027c8 <_vfiprintf_r+0x258>)
 80025cc:	429c      	cmp	r4, r3
 80025ce:	d101      	bne.n	80025d4 <_vfiprintf_r+0x64>
 80025d0:	68b4      	ldr	r4, [r6, #8]
 80025d2:	e7de      	b.n	8002592 <_vfiprintf_r+0x22>
 80025d4:	4b7d      	ldr	r3, [pc, #500]	; (80027cc <_vfiprintf_r+0x25c>)
 80025d6:	429c      	cmp	r4, r3
 80025d8:	d1db      	bne.n	8002592 <_vfiprintf_r+0x22>
 80025da:	68f4      	ldr	r4, [r6, #12]
 80025dc:	e7d9      	b.n	8002592 <_vfiprintf_r+0x22>
 80025de:	89a3      	ldrh	r3, [r4, #12]
 80025e0:	059b      	lsls	r3, r3, #22
 80025e2:	d4ee      	bmi.n	80025c2 <_vfiprintf_r+0x52>
 80025e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025e6:	f7ff fe4b 	bl	8002280 <__retarget_lock_release_recursive>
 80025ea:	e7ea      	b.n	80025c2 <_vfiprintf_r+0x52>
 80025ec:	2300      	movs	r3, #0
 80025ee:	ad08      	add	r5, sp, #32
 80025f0:	616b      	str	r3, [r5, #20]
 80025f2:	3320      	adds	r3, #32
 80025f4:	766b      	strb	r3, [r5, #25]
 80025f6:	3310      	adds	r3, #16
 80025f8:	76ab      	strb	r3, [r5, #26]
 80025fa:	9707      	str	r7, [sp, #28]
 80025fc:	9f03      	ldr	r7, [sp, #12]
 80025fe:	783b      	ldrb	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <_vfiprintf_r+0x98>
 8002604:	2b25      	cmp	r3, #37	; 0x25
 8002606:	d14e      	bne.n	80026a6 <_vfiprintf_r+0x136>
 8002608:	9b03      	ldr	r3, [sp, #12]
 800260a:	1afb      	subs	r3, r7, r3
 800260c:	9305      	str	r3, [sp, #20]
 800260e:	9b03      	ldr	r3, [sp, #12]
 8002610:	429f      	cmp	r7, r3
 8002612:	d00d      	beq.n	8002630 <_vfiprintf_r+0xc0>
 8002614:	9b05      	ldr	r3, [sp, #20]
 8002616:	0021      	movs	r1, r4
 8002618:	0030      	movs	r0, r6
 800261a:	9a03      	ldr	r2, [sp, #12]
 800261c:	f7ff ff95 	bl	800254a <__sfputs_r>
 8002620:	1c43      	adds	r3, r0, #1
 8002622:	d100      	bne.n	8002626 <_vfiprintf_r+0xb6>
 8002624:	e0b5      	b.n	8002792 <_vfiprintf_r+0x222>
 8002626:	696a      	ldr	r2, [r5, #20]
 8002628:	9b05      	ldr	r3, [sp, #20]
 800262a:	4694      	mov	ip, r2
 800262c:	4463      	add	r3, ip
 800262e:	616b      	str	r3, [r5, #20]
 8002630:	783b      	ldrb	r3, [r7, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d100      	bne.n	8002638 <_vfiprintf_r+0xc8>
 8002636:	e0ac      	b.n	8002792 <_vfiprintf_r+0x222>
 8002638:	2201      	movs	r2, #1
 800263a:	1c7b      	adds	r3, r7, #1
 800263c:	9303      	str	r3, [sp, #12]
 800263e:	2300      	movs	r3, #0
 8002640:	4252      	negs	r2, r2
 8002642:	606a      	str	r2, [r5, #4]
 8002644:	a904      	add	r1, sp, #16
 8002646:	3254      	adds	r2, #84	; 0x54
 8002648:	1852      	adds	r2, r2, r1
 800264a:	602b      	str	r3, [r5, #0]
 800264c:	60eb      	str	r3, [r5, #12]
 800264e:	60ab      	str	r3, [r5, #8]
 8002650:	7013      	strb	r3, [r2, #0]
 8002652:	65ab      	str	r3, [r5, #88]	; 0x58
 8002654:	9b03      	ldr	r3, [sp, #12]
 8002656:	2205      	movs	r2, #5
 8002658:	7819      	ldrb	r1, [r3, #0]
 800265a:	485d      	ldr	r0, [pc, #372]	; (80027d0 <_vfiprintf_r+0x260>)
 800265c:	f000 fb4a 	bl	8002cf4 <memchr>
 8002660:	9b03      	ldr	r3, [sp, #12]
 8002662:	1c5f      	adds	r7, r3, #1
 8002664:	2800      	cmp	r0, #0
 8002666:	d120      	bne.n	80026aa <_vfiprintf_r+0x13a>
 8002668:	682a      	ldr	r2, [r5, #0]
 800266a:	06d3      	lsls	r3, r2, #27
 800266c:	d504      	bpl.n	8002678 <_vfiprintf_r+0x108>
 800266e:	2353      	movs	r3, #83	; 0x53
 8002670:	a904      	add	r1, sp, #16
 8002672:	185b      	adds	r3, r3, r1
 8002674:	2120      	movs	r1, #32
 8002676:	7019      	strb	r1, [r3, #0]
 8002678:	0713      	lsls	r3, r2, #28
 800267a:	d504      	bpl.n	8002686 <_vfiprintf_r+0x116>
 800267c:	2353      	movs	r3, #83	; 0x53
 800267e:	a904      	add	r1, sp, #16
 8002680:	185b      	adds	r3, r3, r1
 8002682:	212b      	movs	r1, #43	; 0x2b
 8002684:	7019      	strb	r1, [r3, #0]
 8002686:	9b03      	ldr	r3, [sp, #12]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b2a      	cmp	r3, #42	; 0x2a
 800268c:	d016      	beq.n	80026bc <_vfiprintf_r+0x14c>
 800268e:	2100      	movs	r1, #0
 8002690:	68eb      	ldr	r3, [r5, #12]
 8002692:	9f03      	ldr	r7, [sp, #12]
 8002694:	783a      	ldrb	r2, [r7, #0]
 8002696:	1c78      	adds	r0, r7, #1
 8002698:	3a30      	subs	r2, #48	; 0x30
 800269a:	4684      	mov	ip, r0
 800269c:	2a09      	cmp	r2, #9
 800269e:	d94f      	bls.n	8002740 <_vfiprintf_r+0x1d0>
 80026a0:	2900      	cmp	r1, #0
 80026a2:	d111      	bne.n	80026c8 <_vfiprintf_r+0x158>
 80026a4:	e017      	b.n	80026d6 <_vfiprintf_r+0x166>
 80026a6:	3701      	adds	r7, #1
 80026a8:	e7a9      	b.n	80025fe <_vfiprintf_r+0x8e>
 80026aa:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <_vfiprintf_r+0x260>)
 80026ac:	682a      	ldr	r2, [r5, #0]
 80026ae:	1ac0      	subs	r0, r0, r3
 80026b0:	2301      	movs	r3, #1
 80026b2:	4083      	lsls	r3, r0
 80026b4:	4313      	orrs	r3, r2
 80026b6:	602b      	str	r3, [r5, #0]
 80026b8:	9703      	str	r7, [sp, #12]
 80026ba:	e7cb      	b.n	8002654 <_vfiprintf_r+0xe4>
 80026bc:	9b07      	ldr	r3, [sp, #28]
 80026be:	1d19      	adds	r1, r3, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	9107      	str	r1, [sp, #28]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db01      	blt.n	80026cc <_vfiprintf_r+0x15c>
 80026c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80026ca:	e004      	b.n	80026d6 <_vfiprintf_r+0x166>
 80026cc:	425b      	negs	r3, r3
 80026ce:	60eb      	str	r3, [r5, #12]
 80026d0:	2302      	movs	r3, #2
 80026d2:	4313      	orrs	r3, r2
 80026d4:	602b      	str	r3, [r5, #0]
 80026d6:	783b      	ldrb	r3, [r7, #0]
 80026d8:	2b2e      	cmp	r3, #46	; 0x2e
 80026da:	d10a      	bne.n	80026f2 <_vfiprintf_r+0x182>
 80026dc:	787b      	ldrb	r3, [r7, #1]
 80026de:	2b2a      	cmp	r3, #42	; 0x2a
 80026e0:	d137      	bne.n	8002752 <_vfiprintf_r+0x1e2>
 80026e2:	9b07      	ldr	r3, [sp, #28]
 80026e4:	3702      	adds	r7, #2
 80026e6:	1d1a      	adds	r2, r3, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	9207      	str	r2, [sp, #28]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db2d      	blt.n	800274c <_vfiprintf_r+0x1dc>
 80026f0:	9309      	str	r3, [sp, #36]	; 0x24
 80026f2:	2203      	movs	r2, #3
 80026f4:	7839      	ldrb	r1, [r7, #0]
 80026f6:	4837      	ldr	r0, [pc, #220]	; (80027d4 <_vfiprintf_r+0x264>)
 80026f8:	f000 fafc 	bl	8002cf4 <memchr>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d007      	beq.n	8002710 <_vfiprintf_r+0x1a0>
 8002700:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <_vfiprintf_r+0x264>)
 8002702:	682a      	ldr	r2, [r5, #0]
 8002704:	1ac0      	subs	r0, r0, r3
 8002706:	2340      	movs	r3, #64	; 0x40
 8002708:	4083      	lsls	r3, r0
 800270a:	4313      	orrs	r3, r2
 800270c:	3701      	adds	r7, #1
 800270e:	602b      	str	r3, [r5, #0]
 8002710:	7839      	ldrb	r1, [r7, #0]
 8002712:	1c7b      	adds	r3, r7, #1
 8002714:	2206      	movs	r2, #6
 8002716:	4830      	ldr	r0, [pc, #192]	; (80027d8 <_vfiprintf_r+0x268>)
 8002718:	9303      	str	r3, [sp, #12]
 800271a:	7629      	strb	r1, [r5, #24]
 800271c:	f000 faea 	bl	8002cf4 <memchr>
 8002720:	2800      	cmp	r0, #0
 8002722:	d045      	beq.n	80027b0 <_vfiprintf_r+0x240>
 8002724:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <_vfiprintf_r+0x26c>)
 8002726:	2b00      	cmp	r3, #0
 8002728:	d127      	bne.n	800277a <_vfiprintf_r+0x20a>
 800272a:	2207      	movs	r2, #7
 800272c:	9b07      	ldr	r3, [sp, #28]
 800272e:	3307      	adds	r3, #7
 8002730:	4393      	bics	r3, r2
 8002732:	3308      	adds	r3, #8
 8002734:	9307      	str	r3, [sp, #28]
 8002736:	696b      	ldr	r3, [r5, #20]
 8002738:	9a04      	ldr	r2, [sp, #16]
 800273a:	189b      	adds	r3, r3, r2
 800273c:	616b      	str	r3, [r5, #20]
 800273e:	e75d      	b.n	80025fc <_vfiprintf_r+0x8c>
 8002740:	210a      	movs	r1, #10
 8002742:	434b      	muls	r3, r1
 8002744:	4667      	mov	r7, ip
 8002746:	189b      	adds	r3, r3, r2
 8002748:	3909      	subs	r1, #9
 800274a:	e7a3      	b.n	8002694 <_vfiprintf_r+0x124>
 800274c:	2301      	movs	r3, #1
 800274e:	425b      	negs	r3, r3
 8002750:	e7ce      	b.n	80026f0 <_vfiprintf_r+0x180>
 8002752:	2300      	movs	r3, #0
 8002754:	001a      	movs	r2, r3
 8002756:	3701      	adds	r7, #1
 8002758:	606b      	str	r3, [r5, #4]
 800275a:	7839      	ldrb	r1, [r7, #0]
 800275c:	1c78      	adds	r0, r7, #1
 800275e:	3930      	subs	r1, #48	; 0x30
 8002760:	4684      	mov	ip, r0
 8002762:	2909      	cmp	r1, #9
 8002764:	d903      	bls.n	800276e <_vfiprintf_r+0x1fe>
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0c3      	beq.n	80026f2 <_vfiprintf_r+0x182>
 800276a:	9209      	str	r2, [sp, #36]	; 0x24
 800276c:	e7c1      	b.n	80026f2 <_vfiprintf_r+0x182>
 800276e:	230a      	movs	r3, #10
 8002770:	435a      	muls	r2, r3
 8002772:	4667      	mov	r7, ip
 8002774:	1852      	adds	r2, r2, r1
 8002776:	3b09      	subs	r3, #9
 8002778:	e7ef      	b.n	800275a <_vfiprintf_r+0x1ea>
 800277a:	ab07      	add	r3, sp, #28
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	0022      	movs	r2, r4
 8002780:	0029      	movs	r1, r5
 8002782:	0030      	movs	r0, r6
 8002784:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <_vfiprintf_r+0x270>)
 8002786:	e000      	b.n	800278a <_vfiprintf_r+0x21a>
 8002788:	bf00      	nop
 800278a:	9004      	str	r0, [sp, #16]
 800278c:	9b04      	ldr	r3, [sp, #16]
 800278e:	3301      	adds	r3, #1
 8002790:	d1d1      	bne.n	8002736 <_vfiprintf_r+0x1c6>
 8002792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002794:	07db      	lsls	r3, r3, #31
 8002796:	d405      	bmi.n	80027a4 <_vfiprintf_r+0x234>
 8002798:	89a3      	ldrh	r3, [r4, #12]
 800279a:	059b      	lsls	r3, r3, #22
 800279c:	d402      	bmi.n	80027a4 <_vfiprintf_r+0x234>
 800279e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027a0:	f7ff fd6e 	bl	8002280 <__retarget_lock_release_recursive>
 80027a4:	89a3      	ldrh	r3, [r4, #12]
 80027a6:	065b      	lsls	r3, r3, #25
 80027a8:	d500      	bpl.n	80027ac <_vfiprintf_r+0x23c>
 80027aa:	e70a      	b.n	80025c2 <_vfiprintf_r+0x52>
 80027ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 80027ae:	e70a      	b.n	80025c6 <_vfiprintf_r+0x56>
 80027b0:	ab07      	add	r3, sp, #28
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	0022      	movs	r2, r4
 80027b6:	0029      	movs	r1, r5
 80027b8:	0030      	movs	r0, r6
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <_vfiprintf_r+0x270>)
 80027bc:	f000 f882 	bl	80028c4 <_printf_i>
 80027c0:	e7e3      	b.n	800278a <_vfiprintf_r+0x21a>
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	08003174 	.word	0x08003174
 80027c8:	08003194 	.word	0x08003194
 80027cc:	08003154 	.word	0x08003154
 80027d0:	080031b4 	.word	0x080031b4
 80027d4:	080031ba 	.word	0x080031ba
 80027d8:	080031be 	.word	0x080031be
 80027dc:	00000000 	.word	0x00000000
 80027e0:	0800254b 	.word	0x0800254b

080027e4 <_printf_common>:
 80027e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027e6:	0015      	movs	r5, r2
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	688a      	ldr	r2, [r1, #8]
 80027ec:	690b      	ldr	r3, [r1, #16]
 80027ee:	000c      	movs	r4, r1
 80027f0:	9000      	str	r0, [sp, #0]
 80027f2:	4293      	cmp	r3, r2
 80027f4:	da00      	bge.n	80027f8 <_printf_common+0x14>
 80027f6:	0013      	movs	r3, r2
 80027f8:	0022      	movs	r2, r4
 80027fa:	602b      	str	r3, [r5, #0]
 80027fc:	3243      	adds	r2, #67	; 0x43
 80027fe:	7812      	ldrb	r2, [r2, #0]
 8002800:	2a00      	cmp	r2, #0
 8002802:	d001      	beq.n	8002808 <_printf_common+0x24>
 8002804:	3301      	adds	r3, #1
 8002806:	602b      	str	r3, [r5, #0]
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	069b      	lsls	r3, r3, #26
 800280c:	d502      	bpl.n	8002814 <_printf_common+0x30>
 800280e:	682b      	ldr	r3, [r5, #0]
 8002810:	3302      	adds	r3, #2
 8002812:	602b      	str	r3, [r5, #0]
 8002814:	6822      	ldr	r2, [r4, #0]
 8002816:	2306      	movs	r3, #6
 8002818:	0017      	movs	r7, r2
 800281a:	401f      	ands	r7, r3
 800281c:	421a      	tst	r2, r3
 800281e:	d027      	beq.n	8002870 <_printf_common+0x8c>
 8002820:	0023      	movs	r3, r4
 8002822:	3343      	adds	r3, #67	; 0x43
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	1e5a      	subs	r2, r3, #1
 8002828:	4193      	sbcs	r3, r2
 800282a:	6822      	ldr	r2, [r4, #0]
 800282c:	0692      	lsls	r2, r2, #26
 800282e:	d430      	bmi.n	8002892 <_printf_common+0xae>
 8002830:	0022      	movs	r2, r4
 8002832:	9901      	ldr	r1, [sp, #4]
 8002834:	9800      	ldr	r0, [sp, #0]
 8002836:	9e08      	ldr	r6, [sp, #32]
 8002838:	3243      	adds	r2, #67	; 0x43
 800283a:	47b0      	blx	r6
 800283c:	1c43      	adds	r3, r0, #1
 800283e:	d025      	beq.n	800288c <_printf_common+0xa8>
 8002840:	2306      	movs	r3, #6
 8002842:	6820      	ldr	r0, [r4, #0]
 8002844:	682a      	ldr	r2, [r5, #0]
 8002846:	68e1      	ldr	r1, [r4, #12]
 8002848:	2500      	movs	r5, #0
 800284a:	4003      	ands	r3, r0
 800284c:	2b04      	cmp	r3, #4
 800284e:	d103      	bne.n	8002858 <_printf_common+0x74>
 8002850:	1a8d      	subs	r5, r1, r2
 8002852:	43eb      	mvns	r3, r5
 8002854:	17db      	asrs	r3, r3, #31
 8002856:	401d      	ands	r5, r3
 8002858:	68a3      	ldr	r3, [r4, #8]
 800285a:	6922      	ldr	r2, [r4, #16]
 800285c:	4293      	cmp	r3, r2
 800285e:	dd01      	ble.n	8002864 <_printf_common+0x80>
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	18ed      	adds	r5, r5, r3
 8002864:	2700      	movs	r7, #0
 8002866:	42bd      	cmp	r5, r7
 8002868:	d120      	bne.n	80028ac <_printf_common+0xc8>
 800286a:	2000      	movs	r0, #0
 800286c:	e010      	b.n	8002890 <_printf_common+0xac>
 800286e:	3701      	adds	r7, #1
 8002870:	68e3      	ldr	r3, [r4, #12]
 8002872:	682a      	ldr	r2, [r5, #0]
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	42bb      	cmp	r3, r7
 8002878:	ddd2      	ble.n	8002820 <_printf_common+0x3c>
 800287a:	0022      	movs	r2, r4
 800287c:	2301      	movs	r3, #1
 800287e:	9901      	ldr	r1, [sp, #4]
 8002880:	9800      	ldr	r0, [sp, #0]
 8002882:	9e08      	ldr	r6, [sp, #32]
 8002884:	3219      	adds	r2, #25
 8002886:	47b0      	blx	r6
 8002888:	1c43      	adds	r3, r0, #1
 800288a:	d1f0      	bne.n	800286e <_printf_common+0x8a>
 800288c:	2001      	movs	r0, #1
 800288e:	4240      	negs	r0, r0
 8002890:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002892:	2030      	movs	r0, #48	; 0x30
 8002894:	18e1      	adds	r1, r4, r3
 8002896:	3143      	adds	r1, #67	; 0x43
 8002898:	7008      	strb	r0, [r1, #0]
 800289a:	0021      	movs	r1, r4
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	3145      	adds	r1, #69	; 0x45
 80028a0:	7809      	ldrb	r1, [r1, #0]
 80028a2:	18a2      	adds	r2, r4, r2
 80028a4:	3243      	adds	r2, #67	; 0x43
 80028a6:	3302      	adds	r3, #2
 80028a8:	7011      	strb	r1, [r2, #0]
 80028aa:	e7c1      	b.n	8002830 <_printf_common+0x4c>
 80028ac:	0022      	movs	r2, r4
 80028ae:	2301      	movs	r3, #1
 80028b0:	9901      	ldr	r1, [sp, #4]
 80028b2:	9800      	ldr	r0, [sp, #0]
 80028b4:	9e08      	ldr	r6, [sp, #32]
 80028b6:	321a      	adds	r2, #26
 80028b8:	47b0      	blx	r6
 80028ba:	1c43      	adds	r3, r0, #1
 80028bc:	d0e6      	beq.n	800288c <_printf_common+0xa8>
 80028be:	3701      	adds	r7, #1
 80028c0:	e7d1      	b.n	8002866 <_printf_common+0x82>
	...

080028c4 <_printf_i>:
 80028c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c6:	b08b      	sub	sp, #44	; 0x2c
 80028c8:	9206      	str	r2, [sp, #24]
 80028ca:	000a      	movs	r2, r1
 80028cc:	3243      	adds	r2, #67	; 0x43
 80028ce:	9307      	str	r3, [sp, #28]
 80028d0:	9005      	str	r0, [sp, #20]
 80028d2:	9204      	str	r2, [sp, #16]
 80028d4:	7e0a      	ldrb	r2, [r1, #24]
 80028d6:	000c      	movs	r4, r1
 80028d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80028da:	2a78      	cmp	r2, #120	; 0x78
 80028dc:	d807      	bhi.n	80028ee <_printf_i+0x2a>
 80028de:	2a62      	cmp	r2, #98	; 0x62
 80028e0:	d809      	bhi.n	80028f6 <_printf_i+0x32>
 80028e2:	2a00      	cmp	r2, #0
 80028e4:	d100      	bne.n	80028e8 <_printf_i+0x24>
 80028e6:	e0c1      	b.n	8002a6c <_printf_i+0x1a8>
 80028e8:	2a58      	cmp	r2, #88	; 0x58
 80028ea:	d100      	bne.n	80028ee <_printf_i+0x2a>
 80028ec:	e08c      	b.n	8002a08 <_printf_i+0x144>
 80028ee:	0026      	movs	r6, r4
 80028f0:	3642      	adds	r6, #66	; 0x42
 80028f2:	7032      	strb	r2, [r6, #0]
 80028f4:	e022      	b.n	800293c <_printf_i+0x78>
 80028f6:	0010      	movs	r0, r2
 80028f8:	3863      	subs	r0, #99	; 0x63
 80028fa:	2815      	cmp	r0, #21
 80028fc:	d8f7      	bhi.n	80028ee <_printf_i+0x2a>
 80028fe:	f7fd fc03 	bl	8000108 <__gnu_thumb1_case_shi>
 8002902:	0016      	.short	0x0016
 8002904:	fff6001f 	.word	0xfff6001f
 8002908:	fff6fff6 	.word	0xfff6fff6
 800290c:	001ffff6 	.word	0x001ffff6
 8002910:	fff6fff6 	.word	0xfff6fff6
 8002914:	fff6fff6 	.word	0xfff6fff6
 8002918:	003600a8 	.word	0x003600a8
 800291c:	fff6009a 	.word	0xfff6009a
 8002920:	00b9fff6 	.word	0x00b9fff6
 8002924:	0036fff6 	.word	0x0036fff6
 8002928:	fff6fff6 	.word	0xfff6fff6
 800292c:	009e      	.short	0x009e
 800292e:	0026      	movs	r6, r4
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	3642      	adds	r6, #66	; 0x42
 8002934:	1d11      	adds	r1, r2, #4
 8002936:	6019      	str	r1, [r3, #0]
 8002938:	6813      	ldr	r3, [r2, #0]
 800293a:	7033      	strb	r3, [r6, #0]
 800293c:	2301      	movs	r3, #1
 800293e:	e0a7      	b.n	8002a90 <_printf_i+0x1cc>
 8002940:	6808      	ldr	r0, [r1, #0]
 8002942:	6819      	ldr	r1, [r3, #0]
 8002944:	1d0a      	adds	r2, r1, #4
 8002946:	0605      	lsls	r5, r0, #24
 8002948:	d50b      	bpl.n	8002962 <_printf_i+0x9e>
 800294a:	680d      	ldr	r5, [r1, #0]
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	2d00      	cmp	r5, #0
 8002950:	da03      	bge.n	800295a <_printf_i+0x96>
 8002952:	232d      	movs	r3, #45	; 0x2d
 8002954:	9a04      	ldr	r2, [sp, #16]
 8002956:	426d      	negs	r5, r5
 8002958:	7013      	strb	r3, [r2, #0]
 800295a:	4b61      	ldr	r3, [pc, #388]	; (8002ae0 <_printf_i+0x21c>)
 800295c:	270a      	movs	r7, #10
 800295e:	9303      	str	r3, [sp, #12]
 8002960:	e01b      	b.n	800299a <_printf_i+0xd6>
 8002962:	680d      	ldr	r5, [r1, #0]
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	0641      	lsls	r1, r0, #25
 8002968:	d5f1      	bpl.n	800294e <_printf_i+0x8a>
 800296a:	b22d      	sxth	r5, r5
 800296c:	e7ef      	b.n	800294e <_printf_i+0x8a>
 800296e:	680d      	ldr	r5, [r1, #0]
 8002970:	6819      	ldr	r1, [r3, #0]
 8002972:	1d08      	adds	r0, r1, #4
 8002974:	6018      	str	r0, [r3, #0]
 8002976:	062e      	lsls	r6, r5, #24
 8002978:	d501      	bpl.n	800297e <_printf_i+0xba>
 800297a:	680d      	ldr	r5, [r1, #0]
 800297c:	e003      	b.n	8002986 <_printf_i+0xc2>
 800297e:	066d      	lsls	r5, r5, #25
 8002980:	d5fb      	bpl.n	800297a <_printf_i+0xb6>
 8002982:	680d      	ldr	r5, [r1, #0]
 8002984:	b2ad      	uxth	r5, r5
 8002986:	4b56      	ldr	r3, [pc, #344]	; (8002ae0 <_printf_i+0x21c>)
 8002988:	2708      	movs	r7, #8
 800298a:	9303      	str	r3, [sp, #12]
 800298c:	2a6f      	cmp	r2, #111	; 0x6f
 800298e:	d000      	beq.n	8002992 <_printf_i+0xce>
 8002990:	3702      	adds	r7, #2
 8002992:	0023      	movs	r3, r4
 8002994:	2200      	movs	r2, #0
 8002996:	3343      	adds	r3, #67	; 0x43
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	6863      	ldr	r3, [r4, #4]
 800299c:	60a3      	str	r3, [r4, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db03      	blt.n	80029aa <_printf_i+0xe6>
 80029a2:	2204      	movs	r2, #4
 80029a4:	6821      	ldr	r1, [r4, #0]
 80029a6:	4391      	bics	r1, r2
 80029a8:	6021      	str	r1, [r4, #0]
 80029aa:	2d00      	cmp	r5, #0
 80029ac:	d102      	bne.n	80029b4 <_printf_i+0xf0>
 80029ae:	9e04      	ldr	r6, [sp, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00c      	beq.n	80029ce <_printf_i+0x10a>
 80029b4:	9e04      	ldr	r6, [sp, #16]
 80029b6:	0028      	movs	r0, r5
 80029b8:	0039      	movs	r1, r7
 80029ba:	f7fd fc35 	bl	8000228 <__aeabi_uidivmod>
 80029be:	9b03      	ldr	r3, [sp, #12]
 80029c0:	3e01      	subs	r6, #1
 80029c2:	5c5b      	ldrb	r3, [r3, r1]
 80029c4:	7033      	strb	r3, [r6, #0]
 80029c6:	002b      	movs	r3, r5
 80029c8:	0005      	movs	r5, r0
 80029ca:	429f      	cmp	r7, r3
 80029cc:	d9f3      	bls.n	80029b6 <_printf_i+0xf2>
 80029ce:	2f08      	cmp	r7, #8
 80029d0:	d109      	bne.n	80029e6 <_printf_i+0x122>
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	07db      	lsls	r3, r3, #31
 80029d6:	d506      	bpl.n	80029e6 <_printf_i+0x122>
 80029d8:	6863      	ldr	r3, [r4, #4]
 80029da:	6922      	ldr	r2, [r4, #16]
 80029dc:	4293      	cmp	r3, r2
 80029de:	dc02      	bgt.n	80029e6 <_printf_i+0x122>
 80029e0:	2330      	movs	r3, #48	; 0x30
 80029e2:	3e01      	subs	r6, #1
 80029e4:	7033      	strb	r3, [r6, #0]
 80029e6:	9b04      	ldr	r3, [sp, #16]
 80029e8:	1b9b      	subs	r3, r3, r6
 80029ea:	6123      	str	r3, [r4, #16]
 80029ec:	9b07      	ldr	r3, [sp, #28]
 80029ee:	0021      	movs	r1, r4
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	9805      	ldr	r0, [sp, #20]
 80029f4:	9b06      	ldr	r3, [sp, #24]
 80029f6:	aa09      	add	r2, sp, #36	; 0x24
 80029f8:	f7ff fef4 	bl	80027e4 <_printf_common>
 80029fc:	1c43      	adds	r3, r0, #1
 80029fe:	d14c      	bne.n	8002a9a <_printf_i+0x1d6>
 8002a00:	2001      	movs	r0, #1
 8002a02:	4240      	negs	r0, r0
 8002a04:	b00b      	add	sp, #44	; 0x2c
 8002a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a08:	3145      	adds	r1, #69	; 0x45
 8002a0a:	700a      	strb	r2, [r1, #0]
 8002a0c:	4a34      	ldr	r2, [pc, #208]	; (8002ae0 <_printf_i+0x21c>)
 8002a0e:	9203      	str	r2, [sp, #12]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	6821      	ldr	r1, [r4, #0]
 8002a14:	ca20      	ldmia	r2!, {r5}
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	0608      	lsls	r0, r1, #24
 8002a1a:	d516      	bpl.n	8002a4a <_printf_i+0x186>
 8002a1c:	07cb      	lsls	r3, r1, #31
 8002a1e:	d502      	bpl.n	8002a26 <_printf_i+0x162>
 8002a20:	2320      	movs	r3, #32
 8002a22:	4319      	orrs	r1, r3
 8002a24:	6021      	str	r1, [r4, #0]
 8002a26:	2710      	movs	r7, #16
 8002a28:	2d00      	cmp	r5, #0
 8002a2a:	d1b2      	bne.n	8002992 <_printf_i+0xce>
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	6822      	ldr	r2, [r4, #0]
 8002a30:	439a      	bics	r2, r3
 8002a32:	6022      	str	r2, [r4, #0]
 8002a34:	e7ad      	b.n	8002992 <_printf_i+0xce>
 8002a36:	2220      	movs	r2, #32
 8002a38:	6809      	ldr	r1, [r1, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	6022      	str	r2, [r4, #0]
 8002a3e:	0022      	movs	r2, r4
 8002a40:	2178      	movs	r1, #120	; 0x78
 8002a42:	3245      	adds	r2, #69	; 0x45
 8002a44:	7011      	strb	r1, [r2, #0]
 8002a46:	4a27      	ldr	r2, [pc, #156]	; (8002ae4 <_printf_i+0x220>)
 8002a48:	e7e1      	b.n	8002a0e <_printf_i+0x14a>
 8002a4a:	0648      	lsls	r0, r1, #25
 8002a4c:	d5e6      	bpl.n	8002a1c <_printf_i+0x158>
 8002a4e:	b2ad      	uxth	r5, r5
 8002a50:	e7e4      	b.n	8002a1c <_printf_i+0x158>
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	680d      	ldr	r5, [r1, #0]
 8002a56:	1d10      	adds	r0, r2, #4
 8002a58:	6949      	ldr	r1, [r1, #20]
 8002a5a:	6018      	str	r0, [r3, #0]
 8002a5c:	6813      	ldr	r3, [r2, #0]
 8002a5e:	062e      	lsls	r6, r5, #24
 8002a60:	d501      	bpl.n	8002a66 <_printf_i+0x1a2>
 8002a62:	6019      	str	r1, [r3, #0]
 8002a64:	e002      	b.n	8002a6c <_printf_i+0x1a8>
 8002a66:	066d      	lsls	r5, r5, #25
 8002a68:	d5fb      	bpl.n	8002a62 <_printf_i+0x19e>
 8002a6a:	8019      	strh	r1, [r3, #0]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9e04      	ldr	r6, [sp, #16]
 8002a70:	6123      	str	r3, [r4, #16]
 8002a72:	e7bb      	b.n	80029ec <_printf_i+0x128>
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	1d11      	adds	r1, r2, #4
 8002a78:	6019      	str	r1, [r3, #0]
 8002a7a:	6816      	ldr	r6, [r2, #0]
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	0030      	movs	r0, r6
 8002a80:	6862      	ldr	r2, [r4, #4]
 8002a82:	f000 f937 	bl	8002cf4 <memchr>
 8002a86:	2800      	cmp	r0, #0
 8002a88:	d001      	beq.n	8002a8e <_printf_i+0x1ca>
 8002a8a:	1b80      	subs	r0, r0, r6
 8002a8c:	6060      	str	r0, [r4, #4]
 8002a8e:	6863      	ldr	r3, [r4, #4]
 8002a90:	6123      	str	r3, [r4, #16]
 8002a92:	2300      	movs	r3, #0
 8002a94:	9a04      	ldr	r2, [sp, #16]
 8002a96:	7013      	strb	r3, [r2, #0]
 8002a98:	e7a8      	b.n	80029ec <_printf_i+0x128>
 8002a9a:	6923      	ldr	r3, [r4, #16]
 8002a9c:	0032      	movs	r2, r6
 8002a9e:	9906      	ldr	r1, [sp, #24]
 8002aa0:	9805      	ldr	r0, [sp, #20]
 8002aa2:	9d07      	ldr	r5, [sp, #28]
 8002aa4:	47a8      	blx	r5
 8002aa6:	1c43      	adds	r3, r0, #1
 8002aa8:	d0aa      	beq.n	8002a00 <_printf_i+0x13c>
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	079b      	lsls	r3, r3, #30
 8002aae:	d415      	bmi.n	8002adc <_printf_i+0x218>
 8002ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ab2:	68e0      	ldr	r0, [r4, #12]
 8002ab4:	4298      	cmp	r0, r3
 8002ab6:	daa5      	bge.n	8002a04 <_printf_i+0x140>
 8002ab8:	0018      	movs	r0, r3
 8002aba:	e7a3      	b.n	8002a04 <_printf_i+0x140>
 8002abc:	0022      	movs	r2, r4
 8002abe:	2301      	movs	r3, #1
 8002ac0:	9906      	ldr	r1, [sp, #24]
 8002ac2:	9805      	ldr	r0, [sp, #20]
 8002ac4:	9e07      	ldr	r6, [sp, #28]
 8002ac6:	3219      	adds	r2, #25
 8002ac8:	47b0      	blx	r6
 8002aca:	1c43      	adds	r3, r0, #1
 8002acc:	d098      	beq.n	8002a00 <_printf_i+0x13c>
 8002ace:	3501      	adds	r5, #1
 8002ad0:	68e3      	ldr	r3, [r4, #12]
 8002ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	42ab      	cmp	r3, r5
 8002ad8:	dcf0      	bgt.n	8002abc <_printf_i+0x1f8>
 8002ada:	e7e9      	b.n	8002ab0 <_printf_i+0x1ec>
 8002adc:	2500      	movs	r5, #0
 8002ade:	e7f7      	b.n	8002ad0 <_printf_i+0x20c>
 8002ae0:	080031c5 	.word	0x080031c5
 8002ae4:	080031d6 	.word	0x080031d6

08002ae8 <_putc_r>:
 8002ae8:	b570      	push	{r4, r5, r6, lr}
 8002aea:	0006      	movs	r6, r0
 8002aec:	000d      	movs	r5, r1
 8002aee:	0014      	movs	r4, r2
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d004      	beq.n	8002afe <_putc_r+0x16>
 8002af4:	6983      	ldr	r3, [r0, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <_putc_r+0x16>
 8002afa:	f7ff fb1f 	bl	800213c <__sinit>
 8002afe:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <_putc_r+0x88>)
 8002b00:	429c      	cmp	r4, r3
 8002b02:	d124      	bne.n	8002b4e <_putc_r+0x66>
 8002b04:	6874      	ldr	r4, [r6, #4]
 8002b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b08:	07db      	lsls	r3, r3, #31
 8002b0a:	d405      	bmi.n	8002b18 <_putc_r+0x30>
 8002b0c:	89a3      	ldrh	r3, [r4, #12]
 8002b0e:	059b      	lsls	r3, r3, #22
 8002b10:	d402      	bmi.n	8002b18 <_putc_r+0x30>
 8002b12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b14:	f7ff fbb3 	bl	800227e <__retarget_lock_acquire_recursive>
 8002b18:	68a3      	ldr	r3, [r4, #8]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	60a3      	str	r3, [r4, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da05      	bge.n	8002b2e <_putc_r+0x46>
 8002b22:	69a2      	ldr	r2, [r4, #24]
 8002b24:	4293      	cmp	r3, r2
 8002b26:	db1c      	blt.n	8002b62 <_putc_r+0x7a>
 8002b28:	b2eb      	uxtb	r3, r5
 8002b2a:	2b0a      	cmp	r3, #10
 8002b2c:	d019      	beq.n	8002b62 <_putc_r+0x7a>
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	6022      	str	r2, [r4, #0]
 8002b34:	701d      	strb	r5, [r3, #0]
 8002b36:	b2ed      	uxtb	r5, r5
 8002b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b3a:	07db      	lsls	r3, r3, #31
 8002b3c:	d405      	bmi.n	8002b4a <_putc_r+0x62>
 8002b3e:	89a3      	ldrh	r3, [r4, #12]
 8002b40:	059b      	lsls	r3, r3, #22
 8002b42:	d402      	bmi.n	8002b4a <_putc_r+0x62>
 8002b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b46:	f7ff fb9b 	bl	8002280 <__retarget_lock_release_recursive>
 8002b4a:	0028      	movs	r0, r5
 8002b4c:	bd70      	pop	{r4, r5, r6, pc}
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <_putc_r+0x8c>)
 8002b50:	429c      	cmp	r4, r3
 8002b52:	d101      	bne.n	8002b58 <_putc_r+0x70>
 8002b54:	68b4      	ldr	r4, [r6, #8]
 8002b56:	e7d6      	b.n	8002b06 <_putc_r+0x1e>
 8002b58:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <_putc_r+0x90>)
 8002b5a:	429c      	cmp	r4, r3
 8002b5c:	d1d3      	bne.n	8002b06 <_putc_r+0x1e>
 8002b5e:	68f4      	ldr	r4, [r6, #12]
 8002b60:	e7d1      	b.n	8002b06 <_putc_r+0x1e>
 8002b62:	0029      	movs	r1, r5
 8002b64:	0022      	movs	r2, r4
 8002b66:	0030      	movs	r0, r6
 8002b68:	f7ff f8ec 	bl	8001d44 <__swbuf_r>
 8002b6c:	0005      	movs	r5, r0
 8002b6e:	e7e3      	b.n	8002b38 <_putc_r+0x50>
 8002b70:	08003174 	.word	0x08003174
 8002b74:	08003194 	.word	0x08003194
 8002b78:	08003154 	.word	0x08003154

08002b7c <_sbrk_r>:
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	b570      	push	{r4, r5, r6, lr}
 8002b80:	4d06      	ldr	r5, [pc, #24]	; (8002b9c <_sbrk_r+0x20>)
 8002b82:	0004      	movs	r4, r0
 8002b84:	0008      	movs	r0, r1
 8002b86:	602b      	str	r3, [r5, #0]
 8002b88:	f7fe ff70 	bl	8001a6c <_sbrk>
 8002b8c:	1c43      	adds	r3, r0, #1
 8002b8e:	d103      	bne.n	8002b98 <_sbrk_r+0x1c>
 8002b90:	682b      	ldr	r3, [r5, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d000      	beq.n	8002b98 <_sbrk_r+0x1c>
 8002b96:	6023      	str	r3, [r4, #0]
 8002b98:	bd70      	pop	{r4, r5, r6, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	20000098 	.word	0x20000098

08002ba0 <__sread>:
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	000c      	movs	r4, r1
 8002ba4:	250e      	movs	r5, #14
 8002ba6:	5f49      	ldrsh	r1, [r1, r5]
 8002ba8:	f000 f8c0 	bl	8002d2c <_read_r>
 8002bac:	2800      	cmp	r0, #0
 8002bae:	db03      	blt.n	8002bb8 <__sread+0x18>
 8002bb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bb2:	181b      	adds	r3, r3, r0
 8002bb4:	6563      	str	r3, [r4, #84]	; 0x54
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	4a02      	ldr	r2, [pc, #8]	; (8002bc4 <__sread+0x24>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	81a3      	strh	r3, [r4, #12]
 8002bc0:	e7f9      	b.n	8002bb6 <__sread+0x16>
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	ffffefff 	.word	0xffffefff

08002bc8 <__swrite>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	001f      	movs	r7, r3
 8002bcc:	898b      	ldrh	r3, [r1, #12]
 8002bce:	0005      	movs	r5, r0
 8002bd0:	000c      	movs	r4, r1
 8002bd2:	0016      	movs	r6, r2
 8002bd4:	05db      	lsls	r3, r3, #23
 8002bd6:	d505      	bpl.n	8002be4 <__swrite+0x1c>
 8002bd8:	230e      	movs	r3, #14
 8002bda:	5ec9      	ldrsh	r1, [r1, r3]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2302      	movs	r3, #2
 8002be0:	f000 f874 	bl	8002ccc <_lseek_r>
 8002be4:	89a3      	ldrh	r3, [r4, #12]
 8002be6:	4a05      	ldr	r2, [pc, #20]	; (8002bfc <__swrite+0x34>)
 8002be8:	0028      	movs	r0, r5
 8002bea:	4013      	ands	r3, r2
 8002bec:	81a3      	strh	r3, [r4, #12]
 8002bee:	0032      	movs	r2, r6
 8002bf0:	230e      	movs	r3, #14
 8002bf2:	5ee1      	ldrsh	r1, [r4, r3]
 8002bf4:	003b      	movs	r3, r7
 8002bf6:	f000 f81f 	bl	8002c38 <_write_r>
 8002bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bfc:	ffffefff 	.word	0xffffefff

08002c00 <__sseek>:
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	000c      	movs	r4, r1
 8002c04:	250e      	movs	r5, #14
 8002c06:	5f49      	ldrsh	r1, [r1, r5]
 8002c08:	f000 f860 	bl	8002ccc <_lseek_r>
 8002c0c:	89a3      	ldrh	r3, [r4, #12]
 8002c0e:	1c42      	adds	r2, r0, #1
 8002c10:	d103      	bne.n	8002c1a <__sseek+0x1a>
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <__sseek+0x28>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	81a3      	strh	r3, [r4, #12]
 8002c18:	bd70      	pop	{r4, r5, r6, pc}
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	0152      	lsls	r2, r2, #5
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	81a3      	strh	r3, [r4, #12]
 8002c22:	6560      	str	r0, [r4, #84]	; 0x54
 8002c24:	e7f8      	b.n	8002c18 <__sseek+0x18>
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	ffffefff 	.word	0xffffefff

08002c2c <__sclose>:
 8002c2c:	b510      	push	{r4, lr}
 8002c2e:	230e      	movs	r3, #14
 8002c30:	5ec9      	ldrsh	r1, [r1, r3]
 8002c32:	f000 f815 	bl	8002c60 <_close_r>
 8002c36:	bd10      	pop	{r4, pc}

08002c38 <_write_r>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	0004      	movs	r4, r0
 8002c3c:	0008      	movs	r0, r1
 8002c3e:	0011      	movs	r1, r2
 8002c40:	001a      	movs	r2, r3
 8002c42:	2300      	movs	r3, #0
 8002c44:	4d05      	ldr	r5, [pc, #20]	; (8002c5c <_write_r+0x24>)
 8002c46:	602b      	str	r3, [r5, #0]
 8002c48:	f7fe fec8 	bl	80019dc <_write>
 8002c4c:	1c43      	adds	r3, r0, #1
 8002c4e:	d103      	bne.n	8002c58 <_write_r+0x20>
 8002c50:	682b      	ldr	r3, [r5, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d000      	beq.n	8002c58 <_write_r+0x20>
 8002c56:	6023      	str	r3, [r4, #0]
 8002c58:	bd70      	pop	{r4, r5, r6, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	20000098 	.word	0x20000098

08002c60 <_close_r>:
 8002c60:	2300      	movs	r3, #0
 8002c62:	b570      	push	{r4, r5, r6, lr}
 8002c64:	4d06      	ldr	r5, [pc, #24]	; (8002c80 <_close_r+0x20>)
 8002c66:	0004      	movs	r4, r0
 8002c68:	0008      	movs	r0, r1
 8002c6a:	602b      	str	r3, [r5, #0]
 8002c6c:	f7fe fed2 	bl	8001a14 <_close>
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d103      	bne.n	8002c7c <_close_r+0x1c>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d000      	beq.n	8002c7c <_close_r+0x1c>
 8002c7a:	6023      	str	r3, [r4, #0]
 8002c7c:	bd70      	pop	{r4, r5, r6, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	20000098 	.word	0x20000098

08002c84 <_fstat_r>:
 8002c84:	2300      	movs	r3, #0
 8002c86:	b570      	push	{r4, r5, r6, lr}
 8002c88:	4d06      	ldr	r5, [pc, #24]	; (8002ca4 <_fstat_r+0x20>)
 8002c8a:	0004      	movs	r4, r0
 8002c8c:	0008      	movs	r0, r1
 8002c8e:	0011      	movs	r1, r2
 8002c90:	602b      	str	r3, [r5, #0]
 8002c92:	f7fe fec9 	bl	8001a28 <_fstat>
 8002c96:	1c43      	adds	r3, r0, #1
 8002c98:	d103      	bne.n	8002ca2 <_fstat_r+0x1e>
 8002c9a:	682b      	ldr	r3, [r5, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d000      	beq.n	8002ca2 <_fstat_r+0x1e>
 8002ca0:	6023      	str	r3, [r4, #0]
 8002ca2:	bd70      	pop	{r4, r5, r6, pc}
 8002ca4:	20000098 	.word	0x20000098

08002ca8 <_isatty_r>:
 8002ca8:	2300      	movs	r3, #0
 8002caa:	b570      	push	{r4, r5, r6, lr}
 8002cac:	4d06      	ldr	r5, [pc, #24]	; (8002cc8 <_isatty_r+0x20>)
 8002cae:	0004      	movs	r4, r0
 8002cb0:	0008      	movs	r0, r1
 8002cb2:	602b      	str	r3, [r5, #0]
 8002cb4:	f7fe fec6 	bl	8001a44 <_isatty>
 8002cb8:	1c43      	adds	r3, r0, #1
 8002cba:	d103      	bne.n	8002cc4 <_isatty_r+0x1c>
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d000      	beq.n	8002cc4 <_isatty_r+0x1c>
 8002cc2:	6023      	str	r3, [r4, #0]
 8002cc4:	bd70      	pop	{r4, r5, r6, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	20000098 	.word	0x20000098

08002ccc <_lseek_r>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	0004      	movs	r4, r0
 8002cd0:	0008      	movs	r0, r1
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	4d05      	ldr	r5, [pc, #20]	; (8002cf0 <_lseek_r+0x24>)
 8002cda:	602b      	str	r3, [r5, #0]
 8002cdc:	f7fe febb 	bl	8001a56 <_lseek>
 8002ce0:	1c43      	adds	r3, r0, #1
 8002ce2:	d103      	bne.n	8002cec <_lseek_r+0x20>
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d000      	beq.n	8002cec <_lseek_r+0x20>
 8002cea:	6023      	str	r3, [r4, #0]
 8002cec:	bd70      	pop	{r4, r5, r6, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	20000098 	.word	0x20000098

08002cf4 <memchr>:
 8002cf4:	b2c9      	uxtb	r1, r1
 8002cf6:	1882      	adds	r2, r0, r2
 8002cf8:	4290      	cmp	r0, r2
 8002cfa:	d101      	bne.n	8002d00 <memchr+0xc>
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	4770      	bx	lr
 8002d00:	7803      	ldrb	r3, [r0, #0]
 8002d02:	428b      	cmp	r3, r1
 8002d04:	d0fb      	beq.n	8002cfe <memchr+0xa>
 8002d06:	3001      	adds	r0, #1
 8002d08:	e7f6      	b.n	8002cf8 <memchr+0x4>
	...

08002d0c <__malloc_lock>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	4802      	ldr	r0, [pc, #8]	; (8002d18 <__malloc_lock+0xc>)
 8002d10:	f7ff fab5 	bl	800227e <__retarget_lock_acquire_recursive>
 8002d14:	bd10      	pop	{r4, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	2000008c 	.word	0x2000008c

08002d1c <__malloc_unlock>:
 8002d1c:	b510      	push	{r4, lr}
 8002d1e:	4802      	ldr	r0, [pc, #8]	; (8002d28 <__malloc_unlock+0xc>)
 8002d20:	f7ff faae 	bl	8002280 <__retarget_lock_release_recursive>
 8002d24:	bd10      	pop	{r4, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	2000008c 	.word	0x2000008c

08002d2c <_read_r>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	0004      	movs	r4, r0
 8002d30:	0008      	movs	r0, r1
 8002d32:	0011      	movs	r1, r2
 8002d34:	001a      	movs	r2, r3
 8002d36:	2300      	movs	r3, #0
 8002d38:	4d05      	ldr	r5, [pc, #20]	; (8002d50 <_read_r+0x24>)
 8002d3a:	602b      	str	r3, [r5, #0]
 8002d3c:	f7fe fe31 	bl	80019a2 <_read>
 8002d40:	1c43      	adds	r3, r0, #1
 8002d42:	d103      	bne.n	8002d4c <_read_r+0x20>
 8002d44:	682b      	ldr	r3, [r5, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d000      	beq.n	8002d4c <_read_r+0x20>
 8002d4a:	6023      	str	r3, [r4, #0]
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	20000098 	.word	0x20000098

08002d54 <_init>:
 8002d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5a:	bc08      	pop	{r3}
 8002d5c:	469e      	mov	lr, r3
 8002d5e:	4770      	bx	lr

08002d60 <_fini>:
 8002d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d66:	bc08      	pop	{r3}
 8002d68:	469e      	mov	lr, r3
 8002d6a:	4770      	bx	lr
